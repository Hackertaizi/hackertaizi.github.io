<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ETL开发流程</title>
    <url>/ETL/ETL%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="ETL开发流程"><a href="#ETL开发流程" class="headerlink" title="ETL开发流程"></a>ETL开发流程</h1><h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><h3 id="1-开发架构确定"><a href="#1-开发架构确定" class="headerlink" title="1. 开发架构确定"></a>1. 开发架构确定</h3><p>​	在接收到需求后，首先要弄清楚业务类型，以及数据源类型。在宏观上，ETL是围绕数据开展的工作，不应局限于某种技术或某种数据处理方式，所以，在条件允许的情况下，应该选取最适合业务的开发架构和方式。以下列举了几种开发架构，笔者经验所限，后续将持续更新新的架构。</p>
<ul>
<li><p>离线开发：Hadoop+ hive</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">经典的离线开发方式，当需求对数据的实时性要求没那么高时，可以采用此种开发方式。当然该架构对于配置要求较高，需要有Hadoop集群以及数据开发平台。</span><br></pre></td></tr></table></figure>
</li>
<li><p>实时开发：待补充</p>
</li>
<li><p>待补充</p>
</li>
</ul>
<h3 id="2-了解数据源"><a href="#2-了解数据源" class="headerlink" title="2. 了解数据源"></a>2. 了解数据源</h3><p>当拿到一份陌生的数据源&#x2F;数据源表，首先要做的是对该表进行充分的了解：</p>
<ul>
<li>表字段、字段类型、字段注释的了解</li>
<li>表的业务背景、来源、每个字段的含义</li>
<li>表的更新方式（增量&#x2F;全量）、表格结构（普通表&#x2F;分区&#x2F;分桶）、使用方式（只用最新分区&#x2F;使用部分分区&#x2F;使用全量分区）</li>
</ul>
<p>基于对表的这些了解，应该形成文档，对要点做适当的记录，避免下次使用该表时因为疏漏而踩坑。</p>
<p>然后，需要对数据源表进行数据探查，主要是为了大致评估数据量、数据质量、以及一些其他信息。数据探查的逻辑主要根据业务需求来制定，探查过后应该对资源分配、开发方式、数据源是否符合需求等有一个评估结论</p>
<h3 id="2-开发逻辑设计"><a href="#2-开发逻辑设计" class="headerlink" title="2. 开发逻辑设计"></a>2. 开发逻辑设计</h3><h3 id="3-表结构设计"><a href="#3-表结构设计" class="headerlink" title="3. 表结构设计"></a>3. 表结构设计</h3><h3 id="4-数据流梳理"><a href="#4-数据流梳理" class="headerlink" title="4. 数据流梳理"></a>4. 数据流梳理</h3><h2 id="开发阶段"><a href="#开发阶段" class="headerlink" title="开发阶段"></a>开发阶段</h2><h3 id="1-离线开发流程"><a href="#1-离线开发流程" class="headerlink" title="1. 离线开发流程"></a>1. 离线开发流程</h3><h4 id="1-1-数据探查（了解数据源）"><a href="#1-1-数据探查（了解数据源）" class="headerlink" title="1.1 数据探查（了解数据源）"></a>1.1 数据探查（了解数据源）</h4><p>当拿到一份陌生的数据源&#x2F;数据源表，首先要做的是对该表进行充分的了解，主要了解方式为数据探查：</p>
<ul>
<li><p><strong>表的业务背景、来源</strong></p>
<ul>
<li>使用数据前，必须了解数据源的来源及业务背景，这有助于理解业务，了解业务是开发的前提，否则成果将是充满隐患的。</li>
<li>这些知识可以从产品经理处获取，也可以联系数据源的创建者或相关人员，总之，为了理解业务可以联系一切业务相关的人。</li>
</ul>
</li>
<li><p><strong>了解表字段、字段类型、字段注释</strong></p>
<ul>
<li><strong>表字段</strong>：<br>表中总会有一些关键字段（类似于主键的字段）和一些维度字段，这些字段和业务息息相关。<br>① 了解这些字段的业务含义<br>② 关键字段需要探查一下是否有重复值，分析是否符合业务需求，并做好记录。<br>③ 维度字段需要探查一下字段值的组成，分析是否符合业务需求，并做好记录。<br>④ 还要关注这些字段的数据质量，例如是否有脏数据、缺失值等，并做好记录。<br>⑤ 待补充</li>
<li><strong>字段类型</strong>：<br>抽取表的一部分数据，查看各字段值的情况：<br>① 字段值形式上为集合数据类型的（例如数组、map、struct等），需要关注实际类型是否为集合类型，如果不是，则使用的时候大概率需要做类型转换，此处要做好记录。<br>② 字段值为时间或者时间戳的，需要关注一下实际类型，还要记录一下时间格式，以及时间戳的位数（10位 or 13位）。<br>③ 待补充</li>
<li><strong>字段注释</strong>：<br>字段注释是数据开发人员给出的字段简要解释，在某些情况下具有及其重要的解释意义：<br>① 有些字段是标识性的，其取值一般带有标识意义，例如用0， 1表示不同的意义，理解这些字段的关键就在于查看字段注释或者字段名称。<br>② 待补充</li>
</ul>
</li>
<li><p><strong>表的更新方式（增量&#x2F;全量）、表类型（普通表&#x2F;分区&#x2F;分桶）</strong></p>
<ul>
<li><strong>数据更新方式：</strong><br>数据更新方式有两种：增量更新和全量更新。<br>① 增量更新：以分区表为例，增量更新的表，分区内的数据只与该分区有关。例如一个天分区内只存储该天的数据。一般增量更新的表，使用的时候需要跨分区使用多个分区的数据。<br>② 全量更新：以分区表为例，全量更新的表，每个分区内都存储了截止到该分区的全量历史数据，一般全量更新的表，使用的时候只需要取最新分区的数据即可。</li>
<li><strong>表类型：</strong><br>以hive为例，介绍一下表类型：<br>① 内部表（Internal Table）：这是Hive默认创建的表类型，数据存储在Hive的数据仓库中，当删除表时，数据也会被删除。<br>② 外部表（External Table）：这种表类型的数据存储在Hive之外，例如HDFS或本地文件系统。当删除表时，数据不会被删除。③ 索引表（Index Table）：这种表类型是在Hive 0.8.0版本中引入的，它可以加速查询操作。索引表是基于内部表或外部表创建的，它们包含了指向原始表数据的指针。<br>④ 分区表（Partitioned Table）：这种表类型将数据按照指定的列分成不同的分区，可以提高查询效率。分区表可以是内部表或外部表。<br>⑤ 桶表（Bucketed Table）：这种表类型将数据按照指定的列分成不同的桶，每个桶中包含相同数量的数据。桶表可以是内部表或外部表。</li>
</ul>
</li>
</ul>
<ol>
<li><p>数据清洗<br>在充分了解了数据源之后，就需要根据业务需求对数据进行处理了：</p>
<ul>
<li><p><strong>确定业务数据范围</strong>。包括：</p>
<ul>
<li>业务数据范围：<br>在逻辑上对数据源的数据进行截取，例如只需要统计当年的数据，则通过表中的时间字段进行过滤即可。</li>
<li>字段范围：<br>确定关键的字段有哪些，根据业务抽取需要的字段，对于一些明显用不到的字段，可以舍去，对于以后可能会用到的字段予以保留，避免后续迭代对表结构做改动。</li>
<li>特别地，如果后续会经常使用该表，可以考虑只对该表做数据范围上的筛选，而不做字段范围上的限制（保留全部字段），加以清洗后形成一张通用明细表</li>
</ul>
</li>
<li><p><strong>脏数据清洗</strong>。</p>
<ul>
<li><p>字段内容清洗<br>字段内容清洗是最常见的脏数据处理方式</p>
<ul>
<li>某些字段中可能掺杂了一些特殊字符、乱码数据等。这种情况下，一般需要将特殊字符去除，或者将整个值做统一替换处理。处理方式一般为字符串替换、正则表达式替换、或者采用if 、case when 等条件函数进行映射等。</li>
<li>某些字段中可能存在一些不该存在的值，这种情况一般直接做映射处理，将这些不合适的值替换为其他值，可以采用上面的处理方式进行处理。</li>
</ul>
</li>
<li><p>缺失值处理</p>
<ul>
<li><p>缺失值统一转换：<br>对于缺失值，最常规的处理方式就是将缺失值做统一转换，可以转换为某个特定的值，也可以将不同的缺失值统一成一样的缺失值，便于后续处理。处理一般可借助COALESCE、IF、NVL、CASE WHEN等函数。<br>特别地，在处理表时，由于很多字段不能确定是否有缺失值，或者日后是否会产生缺失值，所以在处理时基本可以对所有字段进行缺失值处理，防止出现缺失值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">空值转换:</span><br><span class="line">	NVL(field, 替换后的值)</span><br><span class="line">	IF(field IS NULL, 替换后的值, field)</span><br><span class="line">空字符串转NULL:</span><br><span class="line">	IF(field = &#x27;&#x27;, 替换后的值, field)</span><br><span class="line">判断字段是否为空或者空字符串:</span><br><span class="line">	COALESCE(field, &#x27;&#x27;) = &#x27;&#x27;    --字段为空或者空字符串</span><br><span class="line">	field IS NULL OR field = &#x27;&#x27; --字段为空或者空字符串</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>详细地址解析<br>当表中只有一个长串的详细地址字段，而没有单独的省市地址字段时，需要使用正则表达式进行解析，表达式书写需要根据具体的数据情况来写，考虑到一般的地址书写格式都比较相似，下面总结了一下地址解析的HIVESQL代码，主要是从详细地址中解析出省份名称和市名称，后续会不断优化，注意代码中语句的顺序十分重要：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CASE</span><br><span class="line">    WHEN install_addr LIKE &#x27;%市%省%&#x27; THEN &#x27;其他&#x27; --异常数据过滤</span><br><span class="line">    WHEN install_addr LIKE &#x27;%北京%&#x27; THEN &#x27;北京市&#x27;</span><br><span class="line">    WHEN install_addr LIKE &#x27;%天津%&#x27; THEN &#x27;天津市&#x27;</span><br><span class="line">    WHEN install_addr LIKE &#x27;%上海%&#x27; THEN &#x27;上海市&#x27;</span><br><span class="line">    WHEN install_addr LIKE &#x27;%重庆%&#x27; THEN &#x27;重庆市&#x27;</span><br><span class="line">    WHEN install_addr LIKE &#x27;%香港%&#x27; THEN &#x27;香港特别行政区&#x27;</span><br><span class="line">    WHEN install_addr LIKE &#x27;%澳门%&#x27; THEN &#x27;澳门特别行政区&#x27;</span><br><span class="line">    WHEN install_addr LIKE &#x27;%自治区%&#x27; THEN REGEXP_EXTRACT(REGEXP_REPLACE(install_addr, &#x27;[ \f\n\r\t\v]&#x27;, &#x27;&#x27;), &#x27;.*?自治区&#x27;, 0)</span><br><span class="line">    WHEN install_addr LIKE &#x27;%省%&#x27; THEN REGEXP_EXTRACT(REGEXP_REPLACE(install_addr, &#x27;[ \f\n\r\t\v]&#x27;, &#x27;&#x27;), &#x27;.*?省&#x27;, 0)</span><br><span class="line">    ELSE &#x27;其他&#x27;</span><br><span class="line">END AS province_desc</span><br><span class="line">,CASE</span><br><span class="line">    WHEN install_addr LIKE &#x27;%北京%&#x27; THEN &#x27;北京市&#x27;</span><br><span class="line">    WHEN install_addr LIKE &#x27;%天津%&#x27; THEN &#x27;天津市&#x27;</span><br><span class="line">    WHEN install_addr LIKE &#x27;%上海%&#x27; THEN &#x27;上海市&#x27;</span><br><span class="line">    WHEN install_addr LIKE &#x27;%重庆%&#x27; THEN &#x27;重庆市&#x27;</span><br><span class="line">    WHEN install_addr LIKE &#x27;%省%自治州%&#x27; THEN REGEXP_EXTRACT(REGEXP_REPLACE(REGEXP_REPLACE(install_addr, &#x27;[ \f\n\r\t\v]&#x27;, &#x27;&#x27;), &#x27;^.*?省&#x27;, &#x27;&#x27;), &#x27;^.*?自治州&#x27;, 0)</span><br><span class="line">    WHEN install_addr LIKE &#x27;%自治区%自治州%&#x27; THEN REGEXP_EXTRACT(REGEXP_REPLACE(REGEXP_REPLACE(install_addr, &#x27;[ \f\n\r\t\v]&#x27;, &#x27;&#x27;), &#x27;^.*?自治区&#x27;, &#x27;&#x27;), &#x27;^.*?自治州&#x27;, 0)</span><br><span class="line">    WHEN install_addr LIKE &#x27;%自治区%地区%&#x27; THEN REGEXP_EXTRACT(REGEXP_REPLACE(REGEXP_REPLACE(install_addr, &#x27;[ \f\n\r\t\v]&#x27;, &#x27;&#x27;), &#x27;^.*?自治区&#x27;, &#x27;&#x27;), &#x27;^.*?地区&#x27;, 0)</span><br><span class="line">    WHEN install_addr LIKE &#x27;%省%地区%&#x27; THEN REGEXP_EXTRACT(REGEXP_REPLACE(REGEXP_REPLACE(install_addr, &#x27;[ \f\n\r\t\v]&#x27;, &#x27;&#x27;), &#x27;^.*?省&#x27;, &#x27;&#x27;), &#x27;^.*?地区&#x27;, 0)</span><br><span class="line">    WHEN install_addr LIKE &#x27;%自治区%盟%市%&#x27; THEN REGEXP_EXTRACT(REGEXP_REPLACE(REGEXP_REPLACE(install_addr, &#x27;[ \f\n\r\t\v]&#x27;, &#x27;&#x27;), &#x27;^.*?自治区&#x27;, &#x27;&#x27;), &#x27;^.*?盟&#x27;, 0)</span><br><span class="line">    WHEN install_addr LIKE &#x27;%自治区%市%&#x27; THEN REGEXP_EXTRACT(REGEXP_REPLACE(REGEXP_REPLACE(install_addr, &#x27;[ \f\n\r\t\v]&#x27;, &#x27;&#x27;), &#x27;^.*?自治区&#x27;, &#x27;&#x27;), &#x27;^.*?市&#x27;, 0)</span><br><span class="line">    WHEN install_addr LIKE &#x27;%自治区%盟%&#x27; THEN REGEXP_EXTRACT(REGEXP_REPLACE(REGEXP_REPLACE(install_addr, &#x27;[ \f\n\r\t\v]&#x27;, &#x27;&#x27;), &#x27;^.*?自治区&#x27;, &#x27;&#x27;), &#x27;^.*?盟&#x27;, 0)</span><br><span class="line">    WHEN install_addr LIKE &#x27;%省%市%&#x27; THEN REGEXP_EXTRACT(REGEXP_REPLACE(REGEXP_REPLACE(install_addr, &#x27;[ \f\n\r\t\v]&#x27;, &#x27;&#x27;), &#x27;^.*?省&#x27;, &#x27;&#x27;), &#x27;^.*?市&#x27;, 0)</span><br><span class="line">    WHEN install_addr LIKE &#x27;%香港%&#x27; THEN &#x27;香港特别行政区&#x27;</span><br><span class="line">    WHEN install_addr LIKE &#x27;%澳门%&#x27; THEN &#x27;澳门特别行政区&#x27;</span><br><span class="line">    WHEN install_addr LIKE &#x27;%神农架林区%&#x27; THEN &#x27;神农架林区&#x27;</span><br><span class="line">    WHEN install_addr LIKE &#x27;%平潭综合实验区%&#x27; THEN &#x27;平潭综合实验区&#x27;</span><br><span class="line">    ELSE &#x27;其他&#x27;</span><br><span class="line">END AS city_desc</span><br></pre></td></tr></table></figure>
</li>
<li><p>字段类型转换<br>字段类型转换是一个比较头疼的问题，按规范来说，不同类型的字段应该选取最合适的字段类型。但是在实际开发中，还是推荐尽量在建表时将字段类型都指定为字符串类型，避免因类型转换带来的一系列问题。但一些数字类型的字段例外特别是整形字段，对于需要做数学运算的整形字段，建表时还是指定为整形，因为对字符串数字进行运算，结果常常会出现小数，处理比较麻烦。<br>字段类型转换遵循由简入繁的规则，特别是数值类型的字段，例如，任何整数类型都可以隐式地转换为一个范围更大的类型，TINYINT,SMALLINT,INT,BIGINT,FLOAT,STRING 都可以隐式地转换为DOUBLE，INT类型不能隐式地转换为TINYINT、SMALLINT类型（除非使用cast函数）,BOOLEAN不能转换为任何类型。</p>
</li>
</ul>
</li>
</ul>
</li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>ETL</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>开发经验</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo基本配置流程</title>
    <url>/Hexo/Hexo%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p>​	具体教程待补充，先到网上找，注意修改安装路径即可。</p>
<h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><ol>
<li><p>下载地址<a href="https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a></p>
</li>
<li><p>选择系统对应的版本，windows选择.msi安装包</p>
<img src="/Hexo/Hexo%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B/image-20221115150935423.png" alt="image-20221115150935423" style="zoom: 80%;"></li>
</ol>
<p>​	3. 安装过程中组件选项选择下面四个就可以，其他页面选项可以默认</p>
<p>​						<img src="/Hexo/Hexo%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B/image-20221115151530738.png" alt="image-20221115151530738" style="zoom:80%;"></p>
<ol start="4">
<li><p>安装完毕后在控制台中分别输入<code>node -v</code>和<code>npm -v</code>，如能输出版本信息，证明安装成功，npm是Node.js自带的依赖包管理工具。安装完毕后目录如下所示：</p>
<p><img src="/Hexo/Hexo%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B/image-20221115152502084.png" alt="image-20221115152502084"></p>
</li>
<li><p>环境配置</p>
<ol>
<li><p>进入Node.js的安装路径</p>
</li>
<li><p>新建node_global 和 node_cache 文件夹，然后在node_global文件夹下再新建一个node_modules文件夹</p>
</li>
<li><p>创建完两个空文件夹后，在cmd命令窗口中输入：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> prefix &quot;node_global文件夹的全路径&quot;</span><br><span class="line">npm config <span class="built_in">set</span> cache &quot;node_cache文件夹的全路径&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置环境变量</p>
<p>在”我的电脑“右键-”属性“-”高级系统设置“-”高级“-”环境变量“中，系统变量中新增NODE_PATH，值为Node.js的安装文件夹下的node_modules文件夹全路径</p>
<p><img src="/Hexo/Hexo%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B/image-20221115153517234.png" alt="image-20221115153517234"></p>
<p>在<strong>用户变量</strong>中的Path新增三个路径，值分别为Node.js的路径，Node.js下node_global的路径以及Node.js下node_global下的node_modules文件夹的全路径</p>
<p><img src="/Hexo/Hexo%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B/image-20221115154004782.png" alt="image-20221115154004782"></p>
<p>设置完毕后保存即可。</p>
</li>
</ol>
</li>
</ol>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><ul>
<li><p>Hexo中文官方文档：<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p>
</li>
<li><p>npm下载慢，换源（换成淘宝的镜像源）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set registry=https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure></li>
</ul>
<p>安装、配置、使用流程可以参考官方文档，下面简述Windows系统下安装Hexo的流程：</p>
<ul>
<li><strong>如果遇到npm指令报错的情况，请使用管理员身份打开控制台窗口</strong></li>
</ul>
<ol>
<li><p>打开cmd命令行窗口，使用npm安装Hexo: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
</li>
<li><p>在电脑上建立一个Hexo的工作文件夹（里面存放Hexo配置包，文件，以及博客文件等）或选择一个已有的空文件夹，在命令行中使用hexo指令初始化该文件夹：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init &quot;文件夹路径&quot;</span><br></pre></td></tr></table></figure>

<p>执行完毕后，hexo相关配置文件和依赖包会拉到本地，此时Hexo即安装完成。</p>
</li>
</ol>
<h2 id="Hexo配置"><a href="#Hexo配置" class="headerlink" title="Hexo配置"></a>Hexo配置</h2><p>Hexo的配置文件是工作文件夹中的_comfig.yml文件，打开后可以进行配置。具体每个参数的含义可以在hexo官方文档上进行查看，下面介绍一些常要改的参数：</p>
<ol>
<li><p>基本网站配置，一般需要修改，使其符合自己的风格。</p>
<p><img src="/Hexo/Hexo%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B/image-20221115165231949.png" alt="image-20221115165231949"></p>
</li>
<li><p>网站URL和root路径</p>
<p>网站的url就是GitHubPage开通后生成的访问地址，如果没有二级目录，则root默认即可。如果有耳机目录，如：<a href="https://example.github.io/blog">https://example.github.io/blog</a>, 则root路径需要设置为：<code>root: /blog/</code></p>
</li>
<li><p>网站的永久连接形式permalink：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">默认值：</span><br><span class="line">	permalink: :year/:month/:day/:title/</span><br><span class="line">改为 ：</span><br><span class="line">	permalink: :title/</span><br></pre></td></tr></table></figure>
</li>
<li><p>_post文件夹中的外部文件夹是否上传，默认false，需要改为true以显示图片</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure>
</li>
<li><p>主题</p>
<p>如果要更换主题，theme参数的值需要改为新主题的名称，默认主题为landscape， <code>theme: landscape</code></p>
</li>
<li><p>部署</p>
<p>部署这里采用Git部署，仓库地址根据传输方式在github仓库上复制即可，分支branch一般需要由master改为main，因为github仓库的默认分支名称是main</p>
<p><img src="/Hexo/Hexo%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B/image-20221115170856565.png" alt="image-20221115170856565"></p>
</li>
</ol>
<h2 id="Hexo部署"><a href="#Hexo部署" class="headerlink" title="Hexo部署"></a>Hexo部署</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>由于国内网络访问github受限，直接使用HTTPS发布博客很容易失败，所以一般使用SSH通信进行传输：</p>
<ol>
<li><p>git中配置用户名和邮箱，github的用户名和邮箱即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;github用户名&quot;</span><br><span class="line">git config --global user.email &quot;github注册邮箱&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以检查配置的用户名和邮箱：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成ssh秘钥文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure>

<p>不设置密码，三个回车即可。</p>
</li>
<li><p>复制生成的秘钥：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>

<p>复制输出的秘钥</p>
</li>
<li><p>在github上新建SSHkey</p>
<blockquote>
<p>github头像-settings-SSH and GPG keys，填写标题以及秘钥即可。</p>
</blockquote>
</li>
</ol>
<p>​		<img src="/Hexo/Hexo%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B/image-20221115181308617.png" alt="image-20221115181308617"></p>
<ol start="6">
<li><p>修改配置文件</p>
<p>配置文件的配置信息在配置了SSH后，仓库地址需要修改为SSH地址，可以从github仓库中获取:</p>
<p><img src="/Hexo/Hexo%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B/image-20221115181940100.png" alt="image-20221115181940100"></p>
</li>
</ol>
<h3 id="部署命令"><a href="#部署命令" class="headerlink" title="部署命令"></a>部署命令</h3><p>使用以下命令生成静态页面以及将博客部署到网站上：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean  #清除缓存</span><br><span class="line">hexo g      #生成静态页面</span><br><span class="line">hexo d      #部署到网页  也可以使用全拼hexo deploy</span><br></pre></td></tr></table></figure>

<p>此外，在静态页面生成后，可以先在本地启动服务并查看网页</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s      #本地启动服务，也可以hexo server</span><br></pre></td></tr></table></figure>

<p>通过使用debug参数，可以实时修改配置并查看效果，只需要刷新页面即可看到修改后的结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d --debug</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>软件安装配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo报错处理</title>
    <url>/Hexo/Hexo%E6%8A%A5%E9%94%99%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="Hexo报错处理"><a href="#Hexo报错处理" class="headerlink" title="Hexo报错处理"></a>Hexo报错处理</h1><ol>
<li><p>使用部署命令<code>hexo d</code> <code>hexo deploy</code>或测试部署命令<code>hexo s</code> <code>hexo server</code>时出现报错：</p>
<blockquote>
<p>end of the stream or a document separator is expected</p>
</blockquote>
</li>
</ol>
<p>这种问题一般是因为头标注文件信息缺失而导致的。添加头标注文件即可，可以参考《为文章添加分类和标签》这篇文章进行解决。</p>
<ol start="2">
<li><p>为文章添加了标签tags 或分类 categorie，文章部署后，想修改标签或分类的大小写，直接修改了源文件头部标注文件，再次部署后相关tags 和 categories点击出现404空白页。</p>
<p>原因：自动生成的用于存放对应标签或分类的html文件的文件夹名字没有随源文件的更改而更改，这是由于git忽略了大小写而导致的。</p>
<p>解决办法：<br>方法一：修改git配置，在博客根目录下，显示隐藏文件，修改<code>.deploy_git/.git/config</code>文件，将该配置文件中的忽略大小写配置项改为false：<code>ignorecase = false</code><br>方法二：删除博客根目录文件夹下.deploy_git目录下tags文件夹或者categories文件夹中对应的标签或分类文件夹，然后重新部署发布，让文件夹重新生成。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>为文章添加分类和标签</title>
    <url>/Hexo/%E4%B8%BA%E6%96%87%E7%AB%A0%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[<h1 id="为文章添加分类和标签"><a href="#为文章添加分类和标签" class="headerlink" title="为文章添加分类和标签"></a>为文章添加分类和标签</h1><h2 id="一、修改配置文件"><a href="#一、修改配置文件" class="headerlink" title="一、修改配置文件"></a>一、修改配置文件</h2><p>将主题目录下的配置文件中的tags 和 categories配置项置为true，注意冒号后要有空格：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tags: true</span><br><span class="line">categories: true</span><br></pre></td></tr></table></figure>

<h2 id="二、-创建样板文件"><a href="#二、-创建样板文件" class="headerlink" title="二、 创建样板文件"></a>二、 创建样板文件</h2><p>在source目录下，与_posts文件夹平行的位置，使用git工具新建两个目录categories 和 tags：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;tags&quot;</span><br><span class="line">hexo new page &quot;categories&quot;</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page --path tags/index &quot;tags&quot;</span><br><span class="line">hexo new page --path categories/index &quot;categories&quot;</span><br></pre></td></tr></table></figure>

<p>编辑tags目录下的index文件，修改内容为：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span>  <span class="string">tags</span></span><br><span class="line"><span class="attr">date:</span>  <span class="number">2022-11-19 11:04:55</span></span><br><span class="line"><span class="attr">type:</span>  <span class="string">&quot;tags&quot;</span></span><br><span class="line"><span class="attr">layout:</span>  <span class="string">&quot;tags&quot;</span></span><br></pre></td></tr></table></figure>

<p>编辑categories目录下的index文件，修改内容为：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2022-11-19 11:04:55</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;categories&quot;</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">&quot;categories&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="三、-为文章打上分类和标签"><a href="#三、-为文章打上分类和标签" class="headerlink" title="三、 为文章打上分类和标签"></a>三、 为文章打上分类和标签</h2><p>为文章打上分类和标签的位置是Markdown文件中的头部标注文件，如果使用git工具通过hexo命令新建文件，那么头部标注文件会自动生成，修改其中内容即可添加分类和标签。如果是自己创建的Markdown文件，则需要手动添加一个头部标注文件用于添加分类和标签的信息。</p>
<h3 id="通过hexo命令创建文章"><a href="#通过hexo命令创建文章" class="headerlink" title="通过hexo命令创建文章"></a>通过hexo命令创建文章</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo n &quot;文件名&quot;</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new &quot;文件名&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>编辑根目录&#x2F;scaffolds下的post.md文件，这个文件决定了通过hexo创建文章后的头部标注文件的格式，修改为以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;title: &#123;&#123; title &#125;&#125;</span><br><span class="line">&gt;date: &#123;&#123; date &#125;&#125;</span><br><span class="line">&gt;tags: </span><br><span class="line">&gt;categories: </span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="手动创建Markdown文章"><a href="#手动创建Markdown文章" class="headerlink" title="手动创建Markdown文章"></a>手动创建Markdown文章</h3><p>在Typora中右键插入–&gt;YAML Front matter</p>
<p>然后再头部标注文件中加入以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: 标题</span><br><span class="line">date: 日期，格式为yyyy-MM-dd HH:mm:ss</span><br><span class="line">tags: 标签，可以有多个</span><br><span class="line">categories: 分类，只能有一个</span><br></pre></td></tr></table></figure>

<h3 id="同一篇文章打多个标签的方式"><a href="#同一篇文章打多个标签的方式" class="headerlink" title="同一篇文章打多个标签的方式"></a>同一篇文章打多个标签的方式</h3><p>修改头部标注文件中的tags选项：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tags:</span><br><span class="line">	- 标签1</span><br><span class="line">	- 标签2</span><br></pre></td></tr></table></figure>

<p>注意：tags下另起一行，注意 - 前的tab缩进和后面的空格。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux环境下安装anaconda</title>
    <url>/Linux/Linux%E4%B8%8B%E5%AE%89%E8%A3%85anaconda/</url>
    <content><![CDATA[<h1 id="Linux下安装anaconda"><a href="#Linux下安装anaconda" class="headerlink" title="Linux下安装anaconda"></a>Linux下安装anaconda</h1><ul>
<li>首先在anaconda官网下载Linux版本的anaconda的shell包；</li>
<li>使用bash命令执行.sh脚本文件安装anaconda，注意更改安装路径，一般可以安装在&#x2F;opt目录下；</li>
<li>安装结束后，在系统中添加环境变量：</li>
</ul>
<blockquote>
<p>sudo vim &#x2F;etc&#x2F;profile</p>
</blockquote>
<p>在配置文件最后加入路径：</p>
<blockquote>
<p>#Anaconda</p>
<p>export PATH&#x3D;$PATH:anaconda安装路径&#x2F;bin</p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>软件安装配置</tag>
        <tag>Linux</tag>
        <tag>Anaconda</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux环境下安装hive</title>
    <url>/Linux/Linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%AE%89%E8%A3%85Hive/</url>
    <content><![CDATA[<h1 id="Linux环境下安装Hive"><a href="#Linux环境下安装Hive" class="headerlink" title="Linux环境下安装Hive"></a>Linux环境下安装Hive</h1><p><strong>前提：需要虚拟环境中安装了Hadoop才能运行Hive</strong></p>
<h2 id="一、下载Hive安装包"><a href="#一、下载Hive安装包" class="headerlink" title="一、下载Hive安装包"></a>一、下载Hive安装包</h2><p><a href="https://dlcdn.apache.org/hive/">官方推荐版本下载地址</a></p>
<p><a href="http://archive.apache.org/dist/hive/">历史发行版本的下载地址</a></p>
<p>选择好版本后，选择-bin.tar.gz 格式的安装包进行下载</p>
<h2 id="二、解压安装包"><a href="#二、解压安装包" class="headerlink" title="二、解压安装包"></a>二、解压安装包</h2><p>提前创建好存放安装包以及存放解压文件的目录，便于解压和环境配置时使用。</p>
<p>将安装包解压到指定安装目录中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf 安装包路径 -C 安装目录</span><br></pre></td></tr></table></figure>

<h2 id="三、配置全局环境变量"><a href="#三、配置全局环境变量" class="headerlink" title="三、配置全局环境变量"></a>三、配置全局环境变量</h2><p>编辑全局配置文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure>

<p>在文件末尾增加环境变量配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#hive environment</span><br><span class="line">export HIVE_HOME=解压文件安装路径</span><br><span class="line">export PATH=$PATH:$HIVE_HOME/bin</span><br></pre></td></tr></table></figure>

<p>退出编辑，用以下命令使配置文件生效：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<h2 id="四、配置Hive环境变量"><a href="#四、配置Hive环境变量" class="headerlink" title="四、配置Hive环境变量"></a>四、配置Hive环境变量</h2><p>进入hive安装目录下的conf目录配置hive环境变量</p>
<p>进入目录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd $HIVE_HOME/conf</span><br></pre></td></tr></table></figure>

<p>从环境变量模板文件复制一份环境变量文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp hive-env.sh.template hive-env.sh</span><br></pre></td></tr></table></figure>

<p>编辑环境变量文件，向其中写入Hadoop路径以及Hive配置文件目录路径：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Set HADOOP_HOME to point to a specific hadoop install directory</span><br><span class="line"># HADOOP_HOME=$&#123;bin&#125;/../../hadoop</span><br><span class="line">export HADOOP_HOME=/opt/module/hadoop-2.7.2</span><br><span class="line"># Hive Configuration Directory can be controlled by:</span><br><span class="line"># export HIVE_CONF_DIR=</span><br><span class="line">export HIVE_CONF_DIR=/opt/module/hive/conf</span><br></pre></td></tr></table></figure>

<p>配置hive-site.xml, 从模板中复制一份作为配置文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp hive-default.xml.template hive-site.xml</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>软件安装配置</tag>
        <tag>Linux</tag>
        <tag>Hive</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux环境下安装JDK</title>
    <url>/Linux/Linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%AE%89%E8%A3%85JDK/</url>
    <content><![CDATA[<h1 id="Linux环境下安装JDK"><a href="#Linux环境下安装JDK" class="headerlink" title="Linux环境下安装JDK"></a>Linux环境下安装JDK</h1><h2 id="一、卸载系统自带的OpenJDK及相关java文件"><a href="#一、卸载系统自带的OpenJDK及相关java文件" class="headerlink" title="一、卸载系统自带的OpenJDK及相关java文件"></a>一、卸载系统自带的OpenJDK及相关java文件</h2><p>安装JDK之前，先确保没有默认安装JDK，执行以下命令检查：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>

<p>如果有信息显示，可以看到系统自带的OpenJDK版本信息，然后查询相关的Java文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep java</span><br></pre></td></tr></table></figure>

<blockquote>
<p>命令说明：<br>rpm 　管理套件<br>-qa 　使用询问模式，查询所有套件<br>grep　　查找文件里符合条件的字符串<br>java 　查找包含java字符串的文件</p>
</blockquote>
<p>查询到的文件中，与OpenJDK相关的可以删除：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -e --nodeps 文件名</span><br></pre></td></tr></table></figure>

<blockquote>
<p>命令介绍：<br>rpm 　　　管理套件<br>-e　　　　　删除指定的套件<br>–nodeps　　不验证套件档的相互关联性</p>
</blockquote>
<p>再次运行版本信息命令，验证是否已经删除成功：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>

<p>无信息提示或提示未找到Java命令，标识删除成功。</p>
<h2 id="二、下载JDK"><a href="#二、下载JDK" class="headerlink" title="二、下载JDK"></a>二、下载JDK</h2><p>下载地址：<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">最新版下载地址</a></p>
<p><a href="http://www.oracle.com/technetwork/java/javase/archive-139210.html">历史版本下载地址</a></p>
<p>根据系统版本，选择下载tar.gz格式的压缩包</p>
<h2 id="三、安装JDK"><a href="#三、安装JDK" class="headerlink" title="三、安装JDK"></a>三、安装JDK</h2><p>提前创建好存放安装包的目录和存放解压文件的目录。一般我会在&#x2F;opt目录下创建两个目录，&#x2F;opt&#x2F;module里用于存放解压文件，&#x2F;opt&#x2F;software用于存放压缩包，只需要在这两个目录下在创建子目录即可。</p>
<p>首先解压安装包：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf 安装包路径 -C 要解压到的目录</span><br></pre></td></tr></table></figure>

<h2 id="四、配置环境变量"><a href="#四、配置环境变量" class="headerlink" title="四、配置环境变量"></a>四、配置环境变量</h2><p>编辑系统配置文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure>

<p>在文件末尾添加Java环境变量（解压路径可以通过pwd 命令获取）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#java environment</span><br><span class="line">export JAVA_HOME=JDK解压路径</span><br><span class="line">export JRE_HOME=JDK解压路径/jre</span><br><span class="line">export CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span><br></pre></td></tr></table></figure>

<p>编辑后退出编辑器，并使配置文件生效：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<p>检查JDK是否安装配置成功：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>软件安装配置</tag>
        <tag>Linux</tag>
        <tag>JDK</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux环境下安装MySQL</title>
    <url>/Linux/MySQL%E5%AE%89%E8%A3%85(Linux)/</url>
    <content><![CDATA[<h1 id="MySQL安装-Linux"><a href="#MySQL安装-Linux" class="headerlink" title="MySQL安装(Linux)"></a>MySQL安装(Linux)</h1><p>说明：本教程案例为CentOS7系统下安装MySQL8.0.31版本</p>
<h2 id="一、下载MySQL安装包"><a href="#一、下载MySQL安装包" class="headerlink" title="一、下载MySQL安装包"></a>一、下载MySQL安装包</h2><p>安装包需要根据系统版本选择</p>
<p><a href="https://dev.mysql.com/downloads/mysql/">下载地址</a></p>
<h2 id="二、安装MySQL"><a href="#二、安装MySQL" class="headerlink" title="二、安装MySQL"></a>二、安装MySQL</h2><p>安装新版mysql之前，需要先将系统自带的Mariadb-lib卸载</p>
<p>查询mariadb：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -qa|grep mariadb</span><br></pre></td></tr></table></figure>

<p>删除自带的mariadb：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -e --nodeps mariadb-libs-5.5.68-1.el7.x86_64</span><br></pre></td></tr></table></figure>

<p>提前建立好存放MySQL安装包，以及存放解压文件的目录，然后将下载的压缩包解压，此处以CentOS7系统为例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -xvf mysql-8.0.31-1.el7.x86_64.rpm-bundle.tar</span><br><span class="line">[tar -xvf 包路径 -C 安装路径]</span><br></pre></td></tr></table></figure>

<p>解压后，严格按照以下下顺序安装解压后的其中四个包：<br>mysql-community-common-8.0.31-1.el7.x86_64.rpm、mysql-community-libs-8.0.31-1.el7.x86_64.rpm、mysql-community-client-8.0.31-1.el7.x86_64.rpm、mysql-community-server-8.0.31-1.el7.x86_64.rpm</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -ivh mysql-community-common-8.0.31-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -ivh mysql-community-libs-8.0.31-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -ivh mysql-community-client-8.0.31-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -ivh mysql-community-server-8.0.31-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<p>安装过程中可能会出现报错：<br><img src="/Linux/MySQL%E5%AE%89%E8%A3%85(Linux)/image-20230112184038119.png" alt="image-20230112184038119"></p>
<p>如果安装过程中出现这个错误就在后面添加 –force –nodeps，这可能是由于yum安装了旧版本的GPG keys造成的，当然，通过报错信息也可以解决，不难看出安装这个依赖包需要先安装mysql-community-client-plugins-8这个包，我们的解压目录里是有这个包的。使用相同的安装命令先安装这个plugins这个包，然后再安装libs包即可。</p>
<p>之后安装 mysql-community-server-8.0.31-1.el7.x86_64.rpm也可能会出错：<br><img src="/Linux/MySQL%E5%AE%89%E8%A3%85(Linux)/image-20230112185019036.png" alt="image-20230112185019036"></p>
<p>通过命令后加参数–force –nodeps依旧可以强制安装，也可以按照提示先把这些需要的依赖包安装上。如图，第一部分是perl相关的包，可以使用yum进行下载安装：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y perl-Module-Install.noarch</span><br></pre></td></tr></table></figure>

<p>第二个包是libaio相关的包，由于我们解压目录里没有相关包，依旧使用yum进行下载：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install libaio</span><br></pre></td></tr></table></figure>

<p>第三个包是我们的压缩目录里有的包，使用rpm进行安装即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -ivh mysql-community-icu-data-files-8.0.31-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<p>所需要的包都安装完毕后，再安装mysql-community-server-8.0.31-1.el7.x86_64.rpm即可。</p>
<h2 id="三、配置数据库"><a href="#三、配置数据库" class="headerlink" title="三、配置数据库"></a>三、配置数据库</h2><p>编辑mysql配置文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/my.cnf</span><br></pre></td></tr></table></figure>

<p>可以在文件最上方增加一些配置，一下仅供参考，不配置也可以：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">#跳过登录验证</span><br><span class="line">skip-grant-tables</span><br><span class="line">#设置默认字符集UTF-8</span><br><span class="line">character_set_server=utf8</span><br><span class="line">init_connect=&#x27;SET NAMES utf8&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="四、操作MySQL服务"><a href="#四、操作MySQL服务" class="headerlink" title="四、操作MySQL服务"></a>四、操作MySQL服务</h2><p>以下命令可以用来操作MySQL服务：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 启动MySQL服务</span><br><span class="line">systemctl start mysqld.service   或  systemctl start mysqld</span><br><span class="line">// 关闭MySQL服务</span><br><span class="line">systemctl stop mysqld.service  或  systemctl stop mysqld</span><br><span class="line">// MySQL服务运行状态，正常运行状态下 active应为running</span><br><span class="line">systemctl status mysqld.service 或 systemctl status mysqld</span><br></pre></td></tr></table></figure>

<h2 id="五、启动MySQL以及设置密码"><a href="#五、启动MySQL以及设置密码" class="headerlink" title="五、启动MySQL以及设置密码"></a>五、启动MySQL以及设置密码</h2><p>查询随机生成的MySQL密码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /var/log/mysqld.log | grep password</span><br></pre></td></tr></table></figure>

<p>启动MySQL服务后，使用一下命令登录mysql：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

<p>然后粘贴刚刚查询的密码。</p>
<p>注意登录mysql的指令可能会出现报错：</p>
<p><code>Can&#39;t connect to local MySQL server through socket &#39;/var/lib/mysql/mysql.sock&#39;</code></p>
<p>遇到报错，首先查看mysql的报错日志：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /var/log/mysqld.log</span><br></pre></td></tr></table></figure>

<p>我遇到的错误如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[ERROR] [MY-010262] [Server] Can&#x27;t start server: Bind on TCP/IP port: Address already in use</span><br><span class="line">[ERROR] [MY-010257] [Server] Do you already have another mysqld server running on port: 3306 ?</span><br><span class="line">[ERROR] [MY-010119] [Server] Aborting</span><br></pre></td></tr></table></figure>

<p>显然是3306端口被占用，Linux环境下查看端口占用情况：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -tunlp</span><br></pre></td></tr></table></figure>

<p>如果有结果，找到3306的那个进程的进程号，然后杀掉进程即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kill -9 进程号</span><br></pre></td></tr></table></figure>

<p>但我的实际错误是由于CentOS系统是安装在WSL（windows的linux子系统）下的，因为windows里安装了mysql占用了3306端口号而导致linux下无法启动mysql服务。需要杀死占用windows下3306端口的进程，使用管理员身份打开windows下的命令行窗口，查询所有占用端口的进程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -ano</span><br><span class="line">netstat -ano | findstr 3306</span><br></pre></td></tr></table></figure>

<p>找到占用3306端口的进程号，然后杀死进程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TASKKILL /F /PID 进程号</span><br></pre></td></tr></table></figure>

<p>其中&#x2F;F是强制杀死进程。此时返回linux系统下，重启mysql服务即可成功登录。</p>
<p>还有可能在日志中看到报错：<code>Plugin mysqlx reported: &#39;Setup of socket: &#39;/var/run/mysqld/mysqlx.sock&#39; failed, can&#39;t create lock file /var/run/mysqld/mysqlx.sock.lock&#39;</code></p>
<p>遇到这种情况，创建目录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir /var/run/mysqld</span><br></pre></td></tr></table></figure>

<p>然后为mysql赋予目录权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown mysql:mysql /var/run/mysqld</span><br><span class="line">chmod 750 /var/run/mysqld</span><br></pre></td></tr></table></figure>

<p>之后重新启动mysql服务即可。</p>
<p>进入mysql后，设置一个自己的登录密码，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SET PASSWORD = &#x27;123456&#x27;</span><br></pre></td></tr></table></figure>





<h2 id="Ubuntu系统安装MySQL"><a href="#Ubuntu系统安装MySQL" class="headerlink" title="Ubuntu系统安装MySQL"></a>Ubuntu系统安装MySQL</h2><h3 id="首先彻底删除环境中的MySQL"><a href="#首先彻底删除环境中的MySQL" class="headerlink" title="首先彻底删除环境中的MySQL"></a>首先彻底删除环境中的MySQL</h3><ol>
<li><p>删除mysql的配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo rm /var/lib/mysql/ -R</span><br><span class="line">sudo rm /etc/mysql/ -R</span><br></pre></td></tr></table></figure>
</li>
<li><p>自动卸载MySQL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get autoremove mysql* --purge</span><br><span class="line">sudo apt-get remove apparmor</span><br></pre></td></tr></table></figure>
</li>
<li><p>终端中查看MySQL的依赖项</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dpkg --list|grep mysql</span><br></pre></td></tr></table></figure>

<p>如果还有依赖项，则继续执行卸载命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get autoremove mysql* --purge</span><br></pre></td></tr></table></figure>
</li>
<li><p>卸载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove php7.0-mysql</span><br></pre></td></tr></table></figure>
</li>
<li><p>清除残留数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dpkg -l|grep ^rc|awk ‘&#123;print$2&#125;’|sudo xargs dpkg -P</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看剩余依赖项</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dpkg --list|grep mysql</span><br></pre></td></tr></table></figure>

<p>没有依赖项时，删除成功。</p>
</li>
</ol>
<h3 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure>

<h3 id="安装MySQL服务器"><a href="#安装MySQL服务器" class="headerlink" title="安装MySQL服务器"></a>安装MySQL服务器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install mysql-server</span><br></pre></td></tr></table></figure>

<h3 id="启动MySQL（WSL环境下需要先杀死Windows中的3306端口进程）"><a href="#启动MySQL（WSL环境下需要先杀死Windows中的3306端口进程）" class="headerlink" title="启动MySQL（WSL环境下需要先杀死Windows中的3306端口进程）"></a>启动MySQL（WSL环境下需要先杀死Windows中的3306端口进程）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo service mysql start</span><br></pre></td></tr></table></figure>

<h3 id="设置用户名和密码"><a href="#设置用户名和密码" class="headerlink" title="设置用户名和密码"></a>设置用户名和密码</h3><p>查看系统默认的用户名和密码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo cat /etc/mysql/debian.cnf</span><br></pre></td></tr></table></figure>

<p>用默认用户名和密码登录MySQL：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u默认用户名 -p默认密码</span><br></pre></td></tr></table></figure>

<h3 id="重置用户名和密码"><a href="#重置用户名和密码" class="headerlink" title="重置用户名和密码"></a>重置用户名和密码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use mysql;  </span><br><span class="line">update mysql.user set authentication_string=password(&#x27;123456&#x27;) where user=&#x27;root&#x27; and Host =&#x27;localhost&#x27;; </span><br><span class="line">update user set  plugin=&quot;mysql_native_password&quot;;     </span><br><span class="line">flush privileges;      </span><br><span class="line">quit;     </span><br></pre></td></tr></table></figure>

<p>MySQL80使用一下方式设置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use mysql;    </span><br><span class="line">alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified with mysql_native_password by &#x27;123456&#x27;;   </span><br><span class="line">flush privileges; </span><br></pre></td></tr></table></figure>

<h3 id="初始化MySQL"><a href="#初始化MySQL" class="headerlink" title="初始化MySQL"></a>初始化MySQL</h3><p>命令行中初始化MySQL：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure>

<h3 id="配置字符集"><a href="#配置字符集" class="headerlink" title="配置字符集"></a>配置字符集</h3><p>编辑配置文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure>

<p>在[mysqld]下加入一行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">character_set_server=utf8</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>软件安装配置</tag>
        <tag>Linux</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown基本语法</title>
    <url>/Markdown/Markdown%20%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="Markdown-基本语法"><a href="#Markdown-基本语法" class="headerlink" title="Markdown 基本语法"></a>Markdown 基本语法</h1><h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><h3 id="1、使用-x3D-和-标记一级和二级标题"><a href="#1、使用-x3D-和-标记一级和二级标题" class="headerlink" title="1、使用 &#x3D; 和 - 标记一级和二级标题"></a>1、使用 &#x3D; 和 - 标记一级和二级标题</h3><p>例如 ：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">我展示的是一级标题</span></span><br><span class="line"><span class="section">===============</span></span><br><span class="line"><span class="section">我展示的是二级标题</span></span><br><span class="line"><span class="section">---------------</span></span><br></pre></td></tr></table></figure>

<h3 id="2、使用-号标记"><a href="#2、使用-号标记" class="headerlink" title="2、使用#号标记"></a>2、使用#号标记</h3><p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure>



<h2 id="二、段落"><a href="#二、段落" class="headerlink" title="二、段落"></a>二、段落</h2><h3 id="1、Markdown-段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上空格加上回车-shift-回车-。当然也可以在段落后面使用一个空行来表示重新开始一个段落。"><a href="#1、Markdown-段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上空格加上回车-shift-回车-。当然也可以在段落后面使用一个空行来表示重新开始一个段落。" class="headerlink" title="1、Markdown 段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上空格加上回车(shift+回车)。当然也可以在段落后面使用一个空行来表示重新开始一个段落。"></a>1、Markdown 段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上空格加上回车(shift+回车)。当然也可以在段落后面使用一个空行来表示重新开始一个段落。</h3><p>例如：</p>
<p>第一行   </p>
<p>第二行</p>
<h1 id="三、字体"><a href="#三、字体" class="headerlink" title="三、字体"></a>三、字体</h1><h2 id="1、Markdown-可以使用以下几种字体："><a href="#1、Markdown-可以使用以下几种字体：" class="headerlink" title="1、Markdown 可以使用以下几种字体："></a>1、Markdown 可以使用以下几种字体：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*斜体文本*</span><br><span class="line">_斜体文本_</span><br><span class="line">**粗体文本**</span><br><span class="line">__粗体文本__</span><br><span class="line">***粗斜体文本***</span><br><span class="line">___粗斜体文本___</span><br></pre></td></tr></table></figure>



<h1 id="四、线"><a href="#四、线" class="headerlink" title="四、线"></a>四、线</h1><h2 id="1、分割线"><a href="#1、分割线" class="headerlink" title="1、分割线"></a>1、分割线</h2><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">***</span><br><span class="line"></span><br><span class="line">* * *</span><br><span class="line"></span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">- - -</span><br><span class="line"></span><br><span class="line">----------</span><br></pre></td></tr></table></figure>

<h2 id="2、删除线"><a href="#2、删除线" class="headerlink" title="2、删除线"></a>2、删除线</h2><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ 即可，实例如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~~RUNOOB.COM~~</span><br><span class="line">~~GOOGLE.COM~~</span><br><span class="line">~~BAIDU.COM~~</span><br></pre></td></tr></table></figure>

<h2 id="3、下划线"><a href="#3、下划线" class="headerlink" title="3、下划线"></a>3、下划线</h2><p>下划线可以通过 HTML 的 <u> 标签来实现：</u></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;u&gt;带下划线文本&lt;/u&gt;</span><br></pre></td></tr></table></figure>

<h2 id="4、脚注"><a href="#4、脚注" class="headerlink" title="4、脚注"></a>4、脚注</h2><p>脚注是对文本的补充说明。</p>
<p>Markdown 脚注的格式如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[^要注明的文本]</span><br></pre></td></tr></table></figure>

<p>以下实例演示了脚注的用法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">创建脚注格式类似这样 [^RUNOOB]。</span><br><span class="line"></span><br><span class="line">[^RUNOOB]: 菜鸟教程 -- 学的不仅是技术，更是梦想！！！</span><br></pre></td></tr></table></figure>

<p>演示效果如下：</p>
<p>创建脚注格式类似这样 [^RUNOOB]。</p>
<p>[^RUNOOB]: 菜鸟教程 – 学的不仅是技术，更是梦想！！！</p>
<h1 id="五、列表"><a href="#五、列表" class="headerlink" title="五、列表"></a>五、列表</h1><h1 id="Markdown-列表"><a href="#Markdown-列表" class="headerlink" title="Markdown 列表"></a>Markdown 列表</h1><p>Markdown 支持有序列表和无序列表。</p>
<p>无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空格，然后再填写内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 第一项</span><br><span class="line">* 第二项</span><br><span class="line">* 第三项</span><br><span class="line"></span><br><span class="line">+ 第一项</span><br><span class="line">+ 第二项</span><br><span class="line">+ 第三项</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- 第一项</span><br><span class="line">- 第二项</span><br><span class="line">- 第三项</span><br></pre></td></tr></table></figure>

<p>演示效果如下：</p>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<p>有序列表使用数字并加上 . 号来表示，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 第一项</span><br><span class="line">2. 第二项</span><br><span class="line">3. 第三项</span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<ol>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ol>
<h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><p>列表嵌套只需在子列表中的选项前面添加四个空格即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 第一项：</span><br><span class="line">    - 第一项嵌套的第一个元素</span><br><span class="line">    - 第一项嵌套的第二个元素</span><br><span class="line">2. 第二项：</span><br><span class="line">    - 第二项嵌套的第一个元素</span><br><span class="line">    - 第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<ol>
<li>第一项：<ul>
<li>第一项嵌套的第一个元素</li>
<li>第一项嵌套的第二个元素</li>
</ul>
</li>
<li>第二项：<ul>
<li>第二项嵌套的第一个元素</li>
<li>第二项嵌套的第二个元素</li>
</ul>
</li>
</ol>
<h1 id="六、区块"><a href="#六、区块" class="headerlink" title="六、区块"></a>六、区块</h1><h1 id="Markdown-区块"><a href="#Markdown-区块" class="headerlink" title="Markdown 区块"></a>Markdown 区块</h1><p>Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个<strong>空格</strong>符号：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; 区块引用</span><br><span class="line">&gt; 菜鸟教程</span><br><span class="line">&gt; 学的不仅是技术更是梦想</span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<blockquote>
<p>区块引用<br>菜鸟教程<br>学的不仅是技术更是梦想</p>
</blockquote>
<p>另外区块是可以嵌套的，一个 &gt; 符号是最外层，两个 &gt; 符号是第一层嵌套，以此类推：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; 最外层</span><br><span class="line">&gt; &gt; 第一层嵌套</span><br><span class="line">&gt; &gt; &gt; 第二层嵌套</span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<blockquote>
<p>最外层</p>
<blockquote>
<p>第一层嵌套</p>
<blockquote>
<p>第二层嵌套</p>
</blockquote>
</blockquote>
</blockquote>
<h3 id="区块中使用列表"><a href="#区块中使用列表" class="headerlink" title="区块中使用列表"></a>区块中使用列表</h3><p>区块中使用列表实例如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; 区块中使用列表</span><br><span class="line">&gt; 1. 第一项</span><br><span class="line">&gt; 2. 第二项</span><br><span class="line">&gt; + 第一项</span><br><span class="line">&gt; + 第二项</span><br><span class="line">&gt; + 第三项</span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<blockquote>
<p>区块中使用列表</p>
<ol>
<li>第一项</li>
<li>第二项</li>
</ol>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
</blockquote>
<h3 id="列表中使用区块"><a href="#列表中使用区块" class="headerlink" title="列表中使用区块"></a>列表中使用区块</h3><p>如果要在列表项目内放进区块，那么就需要在 &gt; 前添加四个空格的缩进。</p>
<p>列表中使用区块实例如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 第一项</span><br><span class="line">    &gt; 菜鸟教程</span><br><span class="line">    &gt; 学的不仅是技术更是梦想</span><br><span class="line">* 第二项</span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<ul>
<li>第一项<blockquote>
<p>菜鸟教程<br>学的不仅是技术更是梦想</p>
</blockquote>
</li>
<li>第二项</li>
</ul>
<h1 id="七、代码"><a href="#七、代码" class="headerlink" title="七、代码"></a>七、代码</h1><h1 id="Markdown-代码"><a href="#Markdown-代码" class="headerlink" title="Markdown 代码"></a>Markdown 代码</h1><p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来（&#96;），例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`printf()` 函数</span><br></pre></td></tr></table></figure>

<p>显示结果如下:</p>
<p><code>printf()</code> 函数</p>
<h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><p>代码区块使用 <strong>4 个空格</strong>或者一个<strong>制表符（Tab 键）</strong>。</p>
<p>实例如下：</p>
<p>​	#include <iostream></iostream></p>
<p>​    using namespace std;</p>
<p>​    int main()</p>
<p>​    {</p>
<p>​    	return 0</p>
<p>​    }</p>
<p>显示结果如下:	</p>
<p>​    #include <iostream></iostream></p>
<p>​    using namespace std;</p>
<p>​    int main()</p>
<p>​    {</p>
<p>​    	return 0</p>
<p>​    }</p>
<p>你也可以用 &#96;&#96;&#96; 包裹一段代码，并指定一种语言（也可以不指定）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```javascript</span><br><span class="line">$(document).ready(function () &#123;</span><br><span class="line">    alert(&#x27;RUNOOB&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line">```</span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;RUNOOB&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h1 id="八、链接"><a href="#八、链接" class="headerlink" title="八、链接"></a>八、链接</h1><h1 id="Markdown-链接"><a href="#Markdown-链接" class="headerlink" title="Markdown 链接"></a>Markdown 链接</h1><p>链接使用方法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[链接名称](链接地址)</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">&lt;链接地址&gt;</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这是一个链接 [菜鸟教程](https://www.runoob.com)</span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<p>这是一个链接 <a href="https://www.runoob.com/">菜鸟教程</a></p>
<p>直接使用链接地址：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;https://www.runoob.com&gt;</span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<p><a href="https://www.runoob.com/">https://www.runoob.com</a></p>
<h3 id="高级链接"><a href="#高级链接" class="headerlink" title="高级链接"></a>高级链接</h3><p>我们可以通过变量来设置一个链接，变量赋值在文档末尾进行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这个链接用 1 作为网址变量 [Google][1]</span><br><span class="line">这个链接用 runoob 作为网址变量 [Runoob][runoob]</span><br><span class="line">然后在文档的结尾为变量赋值（网址）</span><br><span class="line"></span><br><span class="line">  [1]: http://www.google.com/</span><br><span class="line">  [runoob]: http://www.runoob.com/</span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<p>这个链接用 1 作为网址变量 <a href="http://www.google.com/">Google</a><br>这个链接用 runoob 作为网址变量 <a href="http://www.runoob.com/">Runoob</a><br>然后在文档的结尾为变量赋值（网址）</p>
<h1 id="九、图片"><a href="#九、图片" class="headerlink" title="九、图片"></a>九、图片</h1><h1 id="Markdown-图片"><a href="#Markdown-图片" class="headerlink" title="Markdown 图片"></a>Markdown 图片</h1><p>Markdown 图片语法格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![alt 属性文本](图片地址)</span><br><span class="line"></span><br><span class="line">![alt 属性文本](图片地址 &quot;可选标题&quot;)</span><br></pre></td></tr></table></figure>

<ul>
<li>开头一个感叹号 !</li>
<li>接着一个方括号，里面放上图片的替代文字</li>
<li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。</li>
</ul>
<p>使用实例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![RUNOOB 图标](http://static.runoob.com/images/runoob-logo.png)</span><br><span class="line"></span><br><span class="line">![RUNOOB 图标](http://static.runoob.com/images/runoob-logo.png &quot;RUNOOB&quot;)</span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标"></p>
<p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标" title="RUNOOB"></p>
<p>当然，你也可以像网址那样对图片网址使用变量:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这个链接用 1 作为网址变量 [RUNOOB][1].</span><br><span class="line">然后在文档的结尾为变量赋值（网址）</span><br><span class="line"></span><br><span class="line">[1]: http://static.runoob.com/images/runoob-logo.png</span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<p>这个链接用 1 作为网址变量 <a href="http://www.google.com/">RUNOOB</a>.<br>然后在文档的结尾为变量赋值（网址）</p>
<p>Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <img> 标签。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;http://static.runoob.com/images/runoob-logo.png&quot; width=&quot;50%&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<img src="http://static.runoob.com/images/runoob-logo.png" width="50%">



<h1 id="十、表格"><a href="#十、表格" class="headerlink" title="十、表格"></a>十、表格</h1><h1 id="Markdown-表格"><a href="#Markdown-表格" class="headerlink" title="Markdown 表格"></a>Markdown 表格</h1><p>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。</p>
<p>语法格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|  表头   | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |</span><br></pre></td></tr></table></figure>

<p>以上代码显示结果如下：</p>
<table>
<thead>
<tr>
<th>表头</th>
<th>表头</th>
</tr>
</thead>
<tbody><tr>
<td>单元格</td>
<td>单元格</td>
</tr>
<tr>
<td>单元格</td>
<td>单元格</td>
</tr>
</tbody></table>
<p><strong>我们可以设置表格的对齐方式：</strong></p>
<ul>
<li>-: 设置内容和标题栏居右对齐。</li>
<li>:- 设置内容和标题栏居左对齐。</li>
<li>:-: 设置内容和标题栏居中对齐。</li>
</ul>
<p>实例如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure>

<p>以上代码显示结果如下：</p>
<table>
<thead>
<tr>
<th align="left">左对齐</th>
<th align="right">右对齐</th>
<th align="center">居中对齐</th>
</tr>
</thead>
<tbody><tr>
<td align="left">单元格</td>
<td align="right">单元格</td>
<td align="center">单元格</td>
</tr>
<tr>
<td align="left">单元格</td>
<td align="right">单元格</td>
<td align="center">单元格</td>
</tr>
</tbody></table>
<h1 id="十一、高级技巧"><a href="#十一、高级技巧" class="headerlink" title="十一、高级技巧"></a>十一、高级技巧</h1><h1 id="Markdown-高级技巧"><a href="#Markdown-高级技巧" class="headerlink" title="Markdown 高级技巧"></a>Markdown 高级技巧</h1><h3 id="支持的-HTML-元素"><a href="#支持的-HTML-元素" class="headerlink" title="支持的 HTML 元素"></a>支持的 HTML 元素</h3><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p>
<p>目前支持的 HTML 元素有：<code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等 ，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用 &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt; 重启电脑</span><br></pre></td></tr></table></figure>

<p>输出结果为：</p>
<p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p>
<h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">**文本加粗** </span><br><span class="line">\*\* 正常显示星号 \*\*</span><br></pre></td></tr></table></figure>

<p>输出结果为：</p>
<p><strong>文本加粗</strong><br>** 正常显示星号 **</p>
<p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\   反斜线</span><br><span class="line">`   反引号</span><br><span class="line">*   星号</span><br><span class="line">_   下划线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  小括号</span><br><span class="line">#   井字号</span><br><span class="line">+   加号</span><br><span class="line">-   减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   感叹号</span><br></pre></td></tr></table></figure>

<h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\mathbf&#123;V&#125;_1 \times \mathbf&#123;V&#125;_2 =  \begin&#123;vmatrix&#125; </span><br><span class="line">\mathbf&#123;i&#125; &amp; \mathbf&#123;j&#125; &amp; \mathbf&#123;k&#125; \\</span><br><span class="line">\frac&#123;\partial X&#125;&#123;\partial u&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial u&#125; &amp; 0 \\</span><br><span class="line">\frac&#123;\partial X&#125;&#123;\partial v&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial v&#125; &amp; 0 \\</span><br><span class="line">\end&#123;vmatrix&#125;</span><br><span class="line">$&#123;$tep1&#125;&#123;\style&#123;visibility:hidden&#125;&#123;(x+1)(x+1)&#125;&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p>输出结果为：<br>$$<br>\mathbf{V}_1 \times \mathbf{V}_2 &#x3D;  \begin{vmatrix}<br>\mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \<br>\frac{\partial X}{\partial u} &amp;  \frac{\partial Y}{\partial u} &amp; 0 \<br>\frac{\partial X}{\partial v} &amp;  \frac{\partial Y}{\partial v} &amp; 0 \<br>\end{vmatrix}<br>${$tep1}{\style{visibility:hidden}{(x+1)(x+1)}}<br>$$</p>
<h2 id="画流程图、时序图、甘特图"><a href="#画流程图、时序图、甘特图" class="headerlink" title="画流程图、时序图、甘特图"></a>画流程图、时序图、甘特图</h2><p>在typora上方工具栏的‘视图’选项卡中选择“源代码格式”，然后可以按以下示例画流程图、时序图、甘特图。</p>
<p>以下几个实例效果图如下：</p>
<p><strong>1、横向流程图源码格式：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```mermaid</span><br><span class="line">graph LR</span><br><span class="line">A[方形] --&gt;B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt;|a=1| D[结果1]</span><br><span class="line">    C --&gt;|a=2| E[结果2]</span><br><span class="line">    F[横向流程图]</span><br><span class="line">```</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[方形] --&gt;B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt;|a=1| D[结果1]</span><br><span class="line">    C --&gt;|a=2| E[结果2]</span><br><span class="line">    F[横向流程图]</span><br></pre></td></tr></table></figure>

<p><strong>2、竖向流程图源码格式：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```mermaid</span><br><span class="line">graph TD</span><br><span class="line">A[方形] --&gt; B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt; |a=1| D[结果1]</span><br><span class="line">    C --&gt; |a=2| E[结果2]</span><br><span class="line">    F[竖向流程图]</span><br><span class="line">```</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A[方形] --&gt; B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt; |a=1| D[结果1]</span><br><span class="line">    C --&gt; |a=2| E[结果2]</span><br><span class="line">    F[竖向流程图]</span><br></pre></td></tr></table></figure>

<p><strong>3、标准流程图源码格式：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```flow</span><br><span class="line">st=&gt;start: 开始框</span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br><span class="line">```</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始框</span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure>

<p><strong>4、标准流程图源码格式（横向）：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```flow</span><br><span class="line">st=&gt;start: 开始框</span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line">st(right)-&gt;op(right)-&gt;cond</span><br><span class="line">cond(yes)-&gt;io(bottom)-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br><span class="line">```</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始框</span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line">st(right)-&gt;op(right)-&gt;cond</span><br><span class="line">cond(yes)-&gt;io(bottom)-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure>

<p><strong>5、UML时序图源码样例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```sequence</span><br><span class="line">对象A-&gt;对象B: 对象B你好吗?（请求）</span><br><span class="line">Note right of 对象B: 对象B的描述</span><br><span class="line">Note left of 对象A: 对象A的描述(提示)</span><br><span class="line">对象B--&gt;对象A: 我很好(响应)</span><br><span class="line">对象A-&gt;对象B: 你真的好吗？</span><br><span class="line">```</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">对象A-&gt;对象B: 对象B你好吗?（请求）</span><br><span class="line">Note right of 对象B: 对象B的描述</span><br><span class="line">Note left of 对象A: 对象A的描述(提示)</span><br><span class="line">对象B--&gt;对象A: 我很好(响应)</span><br><span class="line">对象A-&gt;对象B: 你真的好吗？</span><br></pre></td></tr></table></figure>

<p><strong>6、UML时序图源码复杂样例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```sequence</span><br><span class="line">Title: 标题：复杂使用</span><br><span class="line">对象A-&gt;对象B: 对象B你好吗?（请求）</span><br><span class="line">Note right of 对象B: 对象B的描述</span><br><span class="line">Note left of 对象A: 对象A的描述(提示)</span><br><span class="line">对象B--&gt;对象A: 我很好(响应)</span><br><span class="line">对象B-&gt;小三: 你好吗</span><br><span class="line">小三--&gt;&gt;对象A: 对象B找我了</span><br><span class="line">对象A-&gt;对象B: 你真的好吗？</span><br><span class="line">Note over 小三,对象B: 我们是朋友</span><br><span class="line">participant C</span><br><span class="line">Note right of C: 没人陪我玩</span><br><span class="line">```</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Title: 标题：复杂使用</span><br><span class="line">对象A-&gt;对象B: 对象B你好吗?（请求）</span><br><span class="line">Note right of 对象B: 对象B的描述</span><br><span class="line">Note left of 对象A: 对象A的描述(提示)</span><br><span class="line">对象B--&gt;对象A: 我很好(响应)</span><br><span class="line">对象B-&gt;小三: 你好吗</span><br><span class="line">小三--&gt;&gt;对象A: 对象B找我了</span><br><span class="line">对象A-&gt;对象B: 你真的好吗？</span><br><span class="line">Note over 小三,对象B: 我们是朋友</span><br><span class="line">participant C</span><br><span class="line">Note right of C: 没人陪我玩</span><br></pre></td></tr></table></figure>

<p><strong>7、UML标准时序图样例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```mermaid</span><br><span class="line">%% 时序图例子,-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头</span><br><span class="line">  sequenceDiagram</span><br><span class="line">    participant 张三</span><br><span class="line">    participant 李四</span><br><span class="line">    张三-&gt;王五: 王五你好吗？</span><br><span class="line">    loop 健康检查</span><br><span class="line">        王五-&gt;王五: 与疾病战斗</span><br><span class="line">    end</span><br><span class="line">    Note right of 王五: 合理 食物 &lt;br/&gt;看医生...</span><br><span class="line">    李四--&gt;&gt;张三: 很好!</span><br><span class="line">    王五-&gt;李四: 你怎么样?</span><br><span class="line">    李四--&gt;王五: 很好!</span><br><span class="line">```</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%% 时序图例子,-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头</span><br><span class="line">  sequenceDiagram</span><br><span class="line">    participant 张三</span><br><span class="line">    participant 李四</span><br><span class="line">    张三-&gt;王五: 王五你好吗？</span><br><span class="line">    loop 健康检查</span><br><span class="line">        王五-&gt;王五: 与疾病战斗</span><br><span class="line">    end</span><br><span class="line">    Note right of 王五: 合理 食物 &lt;br/&gt;看医生...</span><br><span class="line">    李四--&gt;&gt;张三: 很好!</span><br><span class="line">    王五-&gt;李四: 你怎么样?</span><br><span class="line">    李四--&gt;王五: 很好!</span><br></pre></td></tr></table></figure>

<p><strong>8、甘特图样例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```mermaid</span><br><span class="line">%% 语法示例</span><br><span class="line">        gantt</span><br><span class="line">        dateFormat  YYYY-MM-DD</span><br><span class="line">        title 软件开发甘特图</span><br><span class="line">        section 设计</span><br><span class="line">        需求                      :done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">        原型                      :active,  des2, 2014-01-09, 3d</span><br><span class="line">        UI设计                     :         des3, after des2, 5d</span><br><span class="line">    未来任务                     :         des4, after des3, 5d</span><br><span class="line">        section 开发</span><br><span class="line">        学习准备理解需求                      :crit, done, 2014-01-06,24h</span><br><span class="line">        设计框架                             :crit, done, after des2, 2d</span><br><span class="line">        开发                                 :crit, active, 3d</span><br><span class="line">        未来任务                              :crit, 5d</span><br><span class="line">        耍                                   :2d</span><br><span class="line">        section 测试</span><br><span class="line">        功能测试                              :active, a1, after des3, 3d</span><br><span class="line">        压力测试                               :after a1  , 20h</span><br><span class="line">        测试报告                               : 48h</span><br><span class="line">```</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%% 语法示例</span><br><span class="line">        gantt</span><br><span class="line">        dateFormat  YYYY-MM-DD</span><br><span class="line">        title 软件开发甘特图</span><br><span class="line">        section 设计</span><br><span class="line">        需求                      :done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">        原型                      :active,  des2, 2014-01-09, 3d</span><br><span class="line">        UI设计                     :         des3, after des2, 5d</span><br><span class="line">    未来任务                     :         des4, after des3, 5d</span><br><span class="line">        section 开发</span><br><span class="line">        学习准备理解需求                      :crit, done, 2014-01-06,24h</span><br><span class="line">        设计框架                             :crit, done, after des2, 2d</span><br><span class="line">        开发                                 :crit, active, 3d</span><br><span class="line">        未来任务                              :crit, 5d</span><br><span class="line">        耍                                   :2d</span><br><span class="line">        section 测试</span><br><span class="line">        功能测试                              :active, a1, after des3, 3d</span><br><span class="line">        压力测试                               :after a1  , 20h</span><br><span class="line">        测试报告                               : 48h</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Kats安装教程</title>
    <url>/Python/kats%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="kats安装教程"><a href="#kats安装教程" class="headerlink" title="kats安装教程"></a>kats安装教程</h1><p>kats是Facebook开发的时间序列预测服务工具库，集成了多种时间预测模型。</p>
<h2 id="安装过程（建议单独创建虚拟环境）"><a href="#安装过程（建议单独创建虚拟环境）" class="headerlink" title="安装过程（建议单独创建虚拟环境）"></a>安装过程（建议单独创建虚拟环境）</h2><h3 id="1-fbprophet的安装"><a href="#1-fbprophet的安装" class="headerlink" title="1.fbprophet的安装"></a>1.fbprophet的安装</h3><p>由于直接安装kats会报错，主要原因是fbprophet的安装问题。所以在安装kats之前，首先将fbprophet单独进行安装。</p>
<p>直接pip install fdprophet也会出错，因此依次执行下面三个命令：</p>
<blockquote>
<p>python -m pip install -U pip</p>
<p>conda install -c conda-forge pystan</p>
<p>pip install fbprophet</p>
</blockquote>
<p>过程中，执行第二条命令conda install -c conda-forge pystan后可能会出现pip命令无法使用的情况，提示错误为ModuleNotFoundError: No module named ‘_sysconfigdata_x86_64_conda_linux_gnu’，这是因为第二条指令使用conda安装了“gxx-linux-64”，在某一个版本的python中丢失了一个备份文件，通常在同一个版本的python下会有两个相同的<code>_sysconfigdata_x86_64_conda_cos6_linux_gnu.py</code>文件和<code>_sysconfigdata_x86_64_conda_linux_gnu.py</code>文件。而在某些程序的运行过程中会依赖于其中的一个，因此我们需要做的就是检索系统中是否存在有这两个文件：</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo find ~ -name _sysconfigdata_x86_64*</span><br></pre></td></tr></table></figure>
</blockquote>
<p>我发现的问题是在虚拟环境下的anaconda下的python3.8路径下只有一个<code>_sysconfigdata_x86_64_conda_cos6_linux_gnu.py</code>文件而没有</p>
<p><code>_sysconfigdata_x86_64_conda_linux_gnu.py</code>文件，所以只需要将上面有的文件复制一份成下面文件的名字即可，使用了命令：</p>
<blockquote>
<p> <code>cp /opt/anaconda3/envs/kats/lib/python3.8/_sysconfigdata_x86_64_conda_cos6_linux_gnu.py /opt/anaconda3/envs/kats/lib/python3.8/_sysconfigdata_x86_64_conda_linux_gnu.py</code></p>
</blockquote>
<p>这里kats是我创建的虚拟环境的名字。</p>
<p>到此，不出意外的话fbprophet安装完毕。</p>
<h3 id="2-kats的安装"><a href="#2-kats的安装" class="headerlink" title="2. kats的安装"></a>2. kats的安装</h3><p>由于kats的安装过程中需要安装pytorch，而安装pytorch的过程会导致进程killed，所以安装kats需要添加参数</p>
<p>“–no-cache-dir”，安装命令为：</p>
<p><code>pip install kats --no-cache-dir</code></p>
<p>等待安装完毕即可。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>程序包安装</tag>
      </tags>
  </entry>
  <entry>
    <title>结构性思维</title>
    <url>/%E5%85%B6%E4%BB%96/%E7%BB%93%E6%9E%84%E6%80%A7%E6%80%9D%E7%BB%B4/</url>
    <content><![CDATA[<h1 id="结构性思维"><a href="#结构性思维" class="headerlink" title="结构性思维"></a>结构性思维</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">核心总结：</span><br><span class="line">	图像化：构思图</span><br><span class="line">	核心要点：</span><br><span class="line">		结论先行：说话做事以目标为导向，注意使用场景。</span><br><span class="line">		上下先行：注意因果逻辑。</span><br></pre></td></tr></table></figure>

<h2 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h2><table>
<thead>
<tr>
<th>核心点</th>
<th>定义</th>
<th>内容</th>
<th>应用</th>
</tr>
</thead>
<tbody><tr>
<td>构思图</td>
<td><img src="/%E5%85%B6%E4%BB%96/%E7%BB%93%E6%9E%84%E6%80%A7%E6%80%9D%E7%BB%B4/blogfile-master\source_posts\其他\结构性思维\image-20231021.png"></td>
<td>结构性思维的图形化<br>G：Goal，也就是你沟通表达的目的、目标和结论<br>A、B、C：解构得到的步骤，也就是因为A、B、C，所以才有了G<br>A1、B1、C1、……：更深层次的解构，同时强调了逻辑的顺序性</td>
<td></td>
</tr>
<tr>
<td>结论先行</td>
<td>向别人传递信息时，先给出结论的思维和行为方式。</td>
<td>1. 结论先行本质上是一种用户思维，为用户考虑。<br>2. 结论先行的思想可以用在文案标题中，标题点明内容的重点。<br>3. 结论先行可以为行动提供指南，结论先行的思维决定了以终为始的行动，即向着目标行动。</td>
<td><strong>用户思维</strong>：<br>case1：时间紧，短时间内需要传递重要信息<br>case2：信息多，例如向领导汇报时，信息量如果很大，先讲结论。<br>case3：ta需要，例如你讲解时有人提问原因原理，这时你就需要告诉他结论<br><strong>标题应用</strong>：<br><br>标题就是结论，标题要从内容中来，比如写年终总结报告时，标题不要写成《年终总结》，而要点明你的内容要点。<br><strong>提供行动指南</strong>：<br>例如企业领导者能看到发展的愿景，那么他还需要将这些愿景描绘传递给员工，让他们知道奋斗的方向和结果。</td>
</tr>
<tr>
<td>上下对应</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="1-什么是结构性思维"><a href="#1-什么是结构性思维" class="headerlink" title="1. 什么是结构性思维"></a>1. 什么是结构性思维</h2><p><img src="/%E5%85%B6%E4%BB%96/%E7%BB%93%E6%9E%84%E6%80%A7%E6%80%9D%E7%BB%B4/8X6hPmjPTp.jpg" alt="8X6hPmjPTp"></p>
<p>透过现象看本质</p>
<h2 id="2-解构与建构"><a href="#2-解构与建构" class="headerlink" title="2. 解构与建构"></a>2. 解构与建构</h2><p>解构：从整体到部分</p>
<p>建构：从部分到整体</p>
<p>eg: 电影剧本的批量生产、汽车流水线、高考作文的套路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">个人感想：</span><br><span class="line">	通过解构虽然提高了生产效率，但对于参与的个体来讲，发展是受限的，并且是大量同质的。</span><br></pre></td></tr></table></figure>

<h2 id><a href="#" class="headerlink" title></a></h2><h2 id="3-构思图"><a href="#3-构思图" class="headerlink" title="3. 构思图"></a>3. 构思图</h2><p><img src="/%E5%85%B6%E4%BB%96/%E7%BB%93%E6%9E%84%E6%80%A7%E6%80%9D%E7%BB%B4/image-20231021104612408.png" alt="image-20231021104612408"></p>
<p>G:goal , 沟通和表达的目的、目标和结论</p>
<p>构思图的原则：</p>
<ol>
<li><p>结论先行：先说结果，goal</p>
</li>
<li><p>上下对应：因果逻辑存在：因为ABC，所以goal</p>
</li>
<li><p>分类清楚：A  B  C</p>
</li>
<li><p>排序逻辑：A1  A2  A3</p>
</li>
</ol>
<p>构思图应用示例：</p>
<p><img src="/%E5%85%B6%E4%BB%96/%E7%BB%93%E6%9E%84%E6%80%A7%E6%80%9D%E7%BB%B4/image-20231021105741955.png" alt="image-20231021105741955"></p>
<h2 id="4-结论先行——用户思维应用"><a href="#4-结论先行——用户思维应用" class="headerlink" title="4. 结论先行——用户思维应用"></a>4. 结论先行——用户思维应用</h2><p>结论先行：说话先说结论，让对方快速地理解你想表达的意思。</p>
<p>应用场景：</p>
<pre><code> 1. 时间紧 ：例如战地记者
 2. 信息多 ：例如汇报
 3. ta需要 ：例如你说话时别人要问你结论
</code></pre>
<p>底层是用户思维</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">个人感想：</span><br><span class="line">	1. 能保证重要信息快速传达给对方</span><br><span class="line">	2. 避免信息漏传，如果长篇大论先扯，自己反而可能忘了要说的事。</span><br><span class="line">	3. 先说结论避免长篇大论给对面</span><br></pre></td></tr></table></figure>



<h2 id="5-结论先行——让标题会说话"><a href="#5-结论先行——让标题会说话" class="headerlink" title="5. 结论先行——让标题会说话"></a>5. 结论先行——让标题会说话</h2><p>重点：标题就是GOAL ，标题从内容中来</p>
<p>其他：一些起标题的方法，1. 左右对称：做什么：得什么，例如好好学习，天天向上；2. 制造悬念，加问句；</p>
<h2 id="6-结论先行——为行动确定指南"><a href="#6-结论先行——为行动确定指南" class="headerlink" title="6. 结论先行——为行动确定指南"></a>6. 结论先行——为行动确定指南</h2><p>重点：结论先行的思维决定了以终为始的行动</p>
<p>以终为始：明确目标，找到关键要务，然后再付诸实践。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">个人感想：</span><br><span class="line">	看起来不可能或难以完成的任务：解构</span><br><span class="line">	所以很少有什么事是不可完成的</span><br></pre></td></tr></table></figure>



<h2 id="7-上下对应——建立因果逻辑关系"><a href="#7-上下对应——建立因果逻辑关系" class="headerlink" title="7. 上下对应——建立因果逻辑关系"></a>7. 上下对应——建立因果逻辑关系</h2><p>上下对应：</p>
<p>讲理。</p>
<p>“知其然，并知其所以然”</p>
<p>完成了，并且要知道为什么完成了。</p>
<p>因果之间的强逻辑。</p>
<p>说服：</p>
<p>​	定义核心词</p>
<p>​	逐字审题法</p>
<p>项目方案：</p>
<p>​	1st. 当前问题</p>
<p>​	2nd. 解决方案</p>
<p>​	3rd. 具体案例</p>
<p>PPT写作：</p>
<p>​	有内容的主题句</p>
<h2 id="8-分类清楚"><a href="#8-分类清楚" class="headerlink" title="8. 分类清楚"></a>8. 分类清楚</h2><h3 id="什么是分类"><a href="#什么是分类" class="headerlink" title="什么是分类"></a>什么是分类</h3><p>分类：按照种类、等级或性质分别归类</p>
<p>分类的意义：</p>
<p>​	</p>
<p>​	分类便于记忆</p>
<p>​	分类便于计算</p>
<h3 id="分类的MECE原则"><a href="#分类的MECE原则" class="headerlink" title="分类的MECE原则"></a>分类的MECE原则</h3><p>分类标准：麦肯锡MECE原则</p>
<p>​	part1.相互独立       没有交集</p>
<p>​	part2.完全穷尽       全集</p>
<p>​	也就是不重不漏</p>
<p><img src="/%E5%85%B6%E4%BB%96/%E7%BB%93%E6%9E%84%E6%80%A7%E6%80%9D%E7%BB%B4/image-20231021143716527.png" alt="image-20231021143716527"></p>
<p>如何符合MECE原则：</p>
<p>​	part1.界定范围</p>
<p>​	part2.明确标准</p>
<p>做分类，图、表比文字好！</p>
<h3 id="思维的层次感"><a href="#思维的层次感" class="headerlink" title="思维的层次感"></a>思维的层次感</h3><p>应对复杂问题：分类讨论</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>思维方法</tag>
        <tag>结构性思维</tag>
      </tags>
  </entry>
  <entry>
    <title>TreeMap</title>
    <url>/%E5%85%B6%E4%BB%96/TreeMap/</url>
    <content><![CDATA[<h1 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>TreeMap是map家族的一员，用来存放key-value键值对。</p>
<h2 id="2-特点"><a href="#2-特点" class="headerlink" title="2. 特点"></a>2. 特点</h2><ul>
<li>有序性：<br>TreeMap中的键值对是按照键的自然顺序或自定义顺序排列，key不可以为null，可以快速地进行插入、查找、删除等操作。</li>
<li>元素唯一性：<br>TreeMap中的键是唯一的，不允许出现相同的键。如果在TreeMap中插入一个已经存在的键，则新的值会覆盖原有的值。</li>
<li>可排序性：<br>由于TreeMap是有序的，因此它提供了多种按照键排序的方法，例如自然排序和自定义排序。</li>
<li>线程不安全：<br>TreeMap是线程不安全的，如果要在多线程环境下使用，需要进行同步处理。</li>
<li>性能优异：<br>TreeMap的基本操作时间复杂度为O(log n), 具有良好的性能表现，适合处理大量的键值对。</li>
<li>内存占用较高：<br>TreeMap底层使用的红黑树结构决定了它的内存占用较高，要略高于HashMap。</li>
</ul>
<h2 id="3-应用场景"><a href="#3-应用场景" class="headerlink" title="3. 应用场景"></a>3. 应用场景</h2><p>基于以上特点描述，在需要对数据进行<strong>排序</strong>或者<strong>快速查找</strong>的场景下，可以考虑使用TreeMap。</p>
<h2 id="4-使用"><a href="#4-使用" class="headerlink" title="4. 使用"></a>4. 使用</h2><ul>
<li><p>自然排序(针对数字和字符串，按数字自然顺序或字符串的字符顺序排序)：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="comment">// 创建一个TreeMap实例  </span></span><br><span class="line">        TreeMap&lt;Integer, String&gt; treeMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 添加一些元素  </span></span><br><span class="line">        treeMap.put(<span class="number">3</span>, <span class="string">&quot;Three&quot;</span>);  </span><br><span class="line">        treeMap.put(<span class="number">2</span>, <span class="string">&quot;Two&quot;</span>);  </span><br><span class="line">        treeMap.put(<span class="number">1</span>, <span class="string">&quot;One&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 输出TreeMap，将按键的自然顺序排序  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;TreeMap: &quot;</span> + treeMap);  <span class="comment">// TreeMap: &#123;1=One, 2=Two, 3=Three&#125;</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>定制排序：<br>通过构造函数指定排序的Comparator可以实现定制化排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        Comparator&lt;String&gt; comparator = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;String&gt;() &#123;  </span><br><span class="line">            <span class="meta">@Override</span>  </span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(String o1, String o2)</span> &#123;  </span><br><span class="line">                <span class="keyword">return</span> o2.compareTo(o1);  <span class="comment">// 降序排序  </span></span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;;  </span><br><span class="line">        TreeMap&lt;String, String&gt; treeMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;(comparator);  </span><br><span class="line">        treeMap.put(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;B&quot;</span>);  </span><br><span class="line">        treeMap.put(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;A&quot;</span>);  </span><br><span class="line">        treeMap.put(<span class="string">&quot;c&quot;</span>, <span class="string">&quot;C&quot;</span>);  </span><br><span class="line">        System.out.println(treeMap);  <span class="comment">// 输出: &#123;c=C, b=B, a=A&#125;  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="5-实现原理"><a href="#5-实现原理" class="headerlink" title="5. 实现原理"></a>5. 实现原理</h2><p>TreeMap底层是基于红黑树实现的，红黑树是一棵自平衡的二叉排序树。</p>
<p>从二叉树说起：</p>
<ul>
<li><p>二叉树：<br>每个节点最多有两个子树的树形结构。<br><img src="/%E5%85%B6%E4%BB%96/TreeMap/image-20231105203739536.png" alt="image-20231105203739536"></p>
</li>
<li><p>平衡二叉树：<br>平衡二叉树或者是一棵空树，或者是具有以下性质的二叉树：它的左子树和右子树都是平衡二叉树，且左子树和右子树的高度差的绝对值不超过1。<br><img src="/%E5%85%B6%E4%BB%96/TreeMap/image-20231105204215000.png" alt="image-20231105204215000"></p>
</li>
<li><p>平衡二叉排序树：<br>在平衡二叉树的基础上，如果左子树非空，则左子树上所有节点的值均小于根节点的值，如果右子树非空，则右子树上的所有节点的值均大于根节点的值。这样的树就是平衡二叉排序树。<br><img src="/%E5%85%B6%E4%BB%96/TreeMap/image-20231105205415958.png" alt="image-20231105205415958"></p>
</li>
</ul>
<h3 id="红黑树："><a href="#红黑树：" class="headerlink" title="红黑树："></a>红黑树：</h3><p>平衡二叉排序树，在需要增加和删除节点的时候，为了保持平衡需要做大量的旋转操作，红黑树可以解决该问题。</p>
<h4 id="红黑树的性质"><a href="#红黑树的性质" class="headerlink" title="红黑树的性质"></a>红黑树的性质</h4><p>在平衡二叉排序树的基础上：</p>
<p>  ①每个节点只能是黑色或红色</p>
<p>  ②根节点是黑色</p>
<p>  ③每个叶子节点（指空节点NIL）都是黑色的</p>
<p>  ④红色节点的子节点必须是黑色，即一条路径上不能出现两个相邻的红色节点。。</p>
<p>  ⑤从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点。</p>
<p>  这样的树就是红黑树。<br>  <img src="/%E5%85%B6%E4%BB%96/TreeMap/image-20231105210154658.png" alt="image-20231105210154658"></p>
<p>红黑树的插入效率很高，插入一个元素的时候只需要进行最多三次旋转。</p>
<h4 id="红黑树的平衡维护-左旋、右旋、变色"><a href="#红黑树的平衡维护-左旋、右旋、变色" class="headerlink" title="红黑树的平衡维护(左旋、右旋、变色)"></a>红黑树的平衡维护(左旋、右旋、变色)</h4><h5 id="左旋和右旋："><a href="#左旋和右旋：" class="headerlink" title="左旋和右旋："></a>左旋和右旋：</h5><p>旋转操作是为了维持二叉树的平衡性，节点的左旋是指将根节点的右侧往左拉，原先的右子节点变成新的父节点，并把多余的左子节点出让，给已经降级的根节点当右子节点：</p>
<p><img src="/%E5%85%B6%E4%BB%96/TreeMap/image-20231105210640691.png" alt="image-20231105210640691"></p>
<p>相反地，右旋则是将根节点的左侧往右拉，原先的左子节点变成新的父节点，并把多余的右子节点出让，给已经将降级的根节点当右子节点：</p>
<p><img src="/%E5%85%B6%E4%BB%96/TreeMap/image-20231105210651111.png" alt="image-20231105210651111"></p>
<h5 id="红黑树节点的插入、删除："><a href="#红黑树节点的插入、删除：" class="headerlink" title="红黑树节点的插入、删除："></a>红黑树节点的插入、删除：</h5><p>红黑树详解：<a href="https://segmentfault.com/a/1190000012728513">https://segmentfault.com/a/1190000012728513</a></p>
<h2 id="TreeMap源码解析："><a href="#TreeMap源码解析：" class="headerlink" title="TreeMap源码解析："></a>TreeMap源码解析：</h2><ul>
<li><p>左旋：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对节点p进行左旋</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rotateLeft</span><span class="params">(Entry&lt;K,V&gt; p)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// r是p的右子树</span></span><br><span class="line">            Entry&lt;K,V&gt; r = p.right;</span><br><span class="line">            <span class="comment">// r的左子树成为p的右子树</span></span><br><span class="line">            p.right = r.left;</span><br><span class="line">            <span class="keyword">if</span> (r.left != <span class="literal">null</span>)</span><br><span class="line">                r.left.parent = p;</span><br><span class="line">            <span class="comment">// 使r成为根节点</span></span><br><span class="line">            r.parent = p.parent;</span><br><span class="line">            <span class="keyword">if</span> (p.parent == <span class="literal">null</span>)</span><br><span class="line">                root = r;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p.parent.left == p)</span><br><span class="line">                p.parent.left = r;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                p.parent.right = r;</span><br><span class="line">            <span class="comment">// 使p成为r的左子树</span></span><br><span class="line">            r.left = p;</span><br><span class="line">            p.parent = r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src="/%E5%85%B6%E4%BB%96/TreeMap/image-20231112213452258.png" alt="image-20231112213452258"></p>
</li>
<li><p>右旋：右旋的操作与左旋相反</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rotateRight</span><span class="params">(Entry&lt;K,V&gt; p)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// l是p的左子树</span></span><br><span class="line">            Entry&lt;K,V&gt; l = p.left;</span><br><span class="line">            <span class="comment">// l的右子树成为p的左子树</span></span><br><span class="line">            p.left = l.right;</span><br><span class="line">            <span class="keyword">if</span> (l.right != <span class="literal">null</span>) l.right.parent = p;</span><br><span class="line">            <span class="comment">// 使l成为根节点</span></span><br><span class="line">            l.parent = p.parent;</span><br><span class="line">            <span class="keyword">if</span> (p.parent == <span class="literal">null</span>)</span><br><span class="line">                root = l;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p.parent.right == p)</span><br><span class="line">                p.parent.right = l;</span><br><span class="line">            <span class="keyword">else</span> p.parent.left = l;</span><br><span class="line">            <span class="comment">// 使p成为l的右子树</span></span><br><span class="line">            l.right = p;</span><br><span class="line">            p.parent = l;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>关于TreeMap插入、删除节点时的分析，可以<a href="https://blog.csdn.net/weixin_46761894/article/details/127330170">查看文章</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>Hadoop学习笔记</title>
    <url>/Hadoop/Hadoop%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Hadoop%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Hadoop学习笔记"><a href="#Hadoop学习笔记" class="headerlink" title="Hadoop学习笔记"></a>Hadoop学习笔记</h1><h3 id="1-一些基本命令"><a href="#1-一些基本命令" class="headerlink" title="1. 一些基本命令"></a>1. 一些基本命令</h3><p>启动hadoop：<br>1)开启SSH传输服务：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service ssh start</span><br></pre></td></tr></table></figure>

<p>2)启动hadoop：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一次启动</span><br><span class="line">[bash] hadoop安装路径/sbin/start-all.sh</span><br><span class="line">也可以手动多次启动</span><br></pre></td></tr></table></figure>

<p>操作HDFS系统：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop 2.x版本</span><br><span class="line">hadoop安装路径/bin/hdfs dfs -命令</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop 3.x版本</span><br><span class="line">hadoop安装路径/bin/hdfs fs -命令</span><br></pre></td></tr></table></figure>

<h3 id="2-mapreduce样例运行时的文件系统切换"><a href="#2-mapreduce样例运行时的文件系统切换" class="headerlink" title="2. mapreduce样例运行时的文件系统切换"></a>2. mapreduce样例运行时的文件系统切换</h3><p>在运行诸如mapreduce样例中的grep、wordcount等功能时，很重要的一点是指定文件的输入文件夹路径和输出文件夹（注意输出文件夹不需要提前创建），此时，我们指定的路径是本地路径还是HDFS中的路径呢？需要在Hadoop的配置文件core-site.xml进行指定，当不配置路径时，默认文件系统的路径是Hadoop的安装文件夹下，此外，可以通过配置将文件系统切换为HDFS，在core-site.xml中添加以下配置指定HDFS中NameNode的地址即可：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>添加此配置后，运行wordcount等案例时，指定的输入输出路径就是HDFS中的路径了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.2.jar wordcount /user/root/input /user/root/output</span><br></pre></td></tr></table></figure>

<h3 id="3-hadoop50070监控界面中无法下载HDFS中的文件"><a href="#3-hadoop50070监控界面中无法下载HDFS中的文件" class="headerlink" title="3. hadoop50070监控界面中无法下载HDFS中的文件"></a>3. hadoop50070监控界面中无法下载HDFS中的文件</h3><p>添加主机到虚拟机集群的IP映射，将虚拟机hosts文件中的内容添加到windows主机中<br>虚拟机hosts文件路径：<code>/etc/hosts</code><br>windows hosts文件路径：<code>C:\Windows\System32\drivers\etc\hosts</code></p>
<p>添加后重启服务器或虚拟机即可。</p>
<h3 id="4-格式化NameNode（首次启动集群时格式化，不要总格式化）"><a href="#4-格式化NameNode（首次启动集群时格式化，不要总格式化）" class="headerlink" title="4. 格式化NameNode（首次启动集群时格式化，不要总格式化）"></a>4. 格式化NameNode（首次启动集群时格式化，不要总格式化）</h3><p><strong>注意：格式化NameNode，会产生新的集群id,导致NameNode和DataNode的集群id不一致，集群找不到已往数据。所以，格式NameNode时，一定要先删除data数据和log日志，然后再格式化NameNode。(集群id不一致将导致DataNode和NameNode不能同时启动)</strong></p>
<p><strong>提示：NameNode和DataNode的集群id可以在<code>安装路径/data/tmp/dfs/name/current/VERSION</code> <code>安装路径/data/tmp/dfs/data/current/</code>中或者<code>安装路径/tmp/dfs/name/current/VERSION</code> <code>安装路径/tmp/dfs/data/current/VERSION</code>中查看</strong></p>
<p>查看java进程，查看NameNode和DataNode是否关闭(jps是JDK中的命令，非linux自带命令)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jps</span><br></pre></td></tr></table></figure>

<p>将hadoop安装目录下的data文件夹 和 logs文件夹删除</p>
<p>格式化NameNode：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop安装目录下/bin/hdfs namenode -format</span><br></pre></td></tr></table></figure>

<h3 id="5-通过yarn运行MapReduce程序时的问题处理"><a href="#5-通过yarn运行MapReduce程序时的问题处理" class="headerlink" title="5. 通过yarn运行MapReduce程序时的问题处理"></a>5. 通过yarn运行MapReduce程序时的问题处理</h3><ul>
<li>资源监控页面配置</li>
</ul>
<p>yarn资源监控界面需要在yarn-site.xml中配置主机名称，默认名称为0.0.0.0,默认端口号为8088，在启动yarn（ResourceManager和NodeManager）后可以访问资源监控页面，查看MapReduce任务的执行情况和资源使用情况。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">	&lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</span><br><span class="line">	&lt;value&gt;主机名称，自己指定&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>运行失败时classpath配置</li>
</ul>
<p>通过yarn运行MR程序时，可能出现运行失败的情况，可以在hadoop安装目录&#x2F;logs&#x2F;userlogs&#x2F;目录下，根据报错信息找到出错应用日志的位置。如报错信息中显示：<code>Error: Could not find or load main class org.apache.hadoop.mapreduce.v2.app.</code>，需要将hadoop的classpath信息写入配置。在命令行中执行<code>hadoop classpath</code>,得到路径将其复制，然后写入yarn-site.xml以及mapred-site.xml中:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">	&lt;name&gt;yarn.application.classpath&lt;/name&gt;</span><br><span class="line">	&lt;value&gt;classpath内容&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>虚拟内存超限配置</li>
</ul>
<p>如果运行任务遇到虚拟内存使用超过限制的报错，可以在yarn-site.xml中添加参数，使程序运行时跳过内存检查：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">	&lt;name&gt;yarn.nodemanager.pmem-check-enabled&lt;/name&gt;</span><br><span class="line">	&lt;value&gt;false&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">	&lt;name&gt;yarn.nodemanager.vmem-check-enabled&lt;/name&gt;</span><br><span class="line">	&lt;value&gt;false&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>由于NameNode开启了安全模式（safe-mode）导致程序运行时DataNode权限不足的问题</li>
</ul>
<p>退出安全模式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hdfs dfsadmin -safemode leave</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Hadoop</category>
        <category>Hadoop学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Hive基本知识</title>
    <url>/Hadoop/Hive/Hive%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h1 id="Hive基本知识"><a href="#Hive基本知识" class="headerlink" title="Hive基本知识"></a>Hive基本知识</h1><h2 id="一、分区表"><a href="#一、分区表" class="headerlink" title="一、分区表"></a>一、分区表</h2><p>分区表是指按照数据表的某列或某些列分为多个区，区从形式上可以理解为文件夹，分区是手动进行的。</p>
<p>注意，不通与传统数据库，hive在创建分区表时 CREATE TABLE 下的字段中不能包含分区表字段，分区表字段只在PARTITION BY中定义，创建后，分区字段是表中的最后字段。</p>
<p>如果对表进行分区，即数据分分割存放在若干子目录下，则既可以将分区指向各个子目录，也可以采用递归分区使一个表访问所有子目录。当子目录无法满足这两个中的任何中情况，则会出现错误或者查询为空。</p>
<p>分区最佳实践：</p>
<ul>
<li>挑选一列作为分区键，其唯一值的个数应该在较低值到中间值之间。</li>
<li>避免分区小于1G(越大越好）。</li>
<li>当分区数量较多时，调整HiveServer2和Hive Metastore的内存。</li>
<li>当使用多列作为分区键时，对于每一个分区键列的组合都要创建一个子目录的嵌套树。应避免深入嵌套，因为这会导致太多的分区，进而是创建的文件非常小。</li>
<li>当使用Hive流处理插入数据时，如果多个会话向相同的分区写入数据，那么就会导致锁闭。</li>
<li>你可以修改某一分区表的模式，然而，一旦结构发生改变，你就无法在已有分区中修改数据了。</li>
<li>如果要将数据并行插入到多个分区，应该将<code>hive.optimize.sort.dynamic.partition</code>设置为true。</li>
</ul>
<h2 id="二、分桶表"><a href="#二、分桶表" class="headerlink" title="二、分桶表"></a>二、分桶表</h2>]]></content>
      <categories>
        <category>Hadoop</category>
        <category>Hive</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Hive</tag>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Hive优化</title>
    <url>/Hadoop/Hive/Hive%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h1 id="Hive优化"><a href="#Hive优化" class="headerlink" title="Hive优化"></a>Hive优化</h1><h2 id="1-Fetch抓取"><a href="#1-Fetch抓取" class="headerlink" title="1. Fetch抓取"></a>1. Fetch抓取</h2><blockquote>
<p>Fetch抓取是指，Hive中对某些情况的查询可以不必使用MapReduce计算.</p>
<p>hive.fetch.task.conversion默认是more，老版本hive默认是minimal，该属性修改为more以后，在全局查找、字段查找、limit查找等都不走mapreduce。</p>
</blockquote>
<h2 id="2-本地模式"><a href="#2-本地模式" class="headerlink" title="2. 本地模式"></a>2. 本地模式</h2><blockquote>
<p>有时Hive的输入数据量是非常小的。在这种情况下，为查询触发执行任务消耗的时间可能会比实际job的执行时间要多的多。对于大多数这种情况，Hive可以通过本地模式在单台机器上处理所有的任务。对于小数据集，执行时间可以明显被缩短。</p>
<p>可以通过设置hive.exec.mode.local.auto的值为true，来让Hive在适当的时候自动启动这个优化。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> hive.exec.mode.local.auto<span class="operator">=</span><span class="literal">true</span>;  <span class="operator">/</span><span class="operator">/</span>开启本地mr</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>设置<span class="keyword">local</span> mr的最大输入数据量，当输入数据量小于这个值时采用<span class="keyword">local</span>  mr的方式，默认为<span class="number">134217728</span>，即<span class="number">128</span>M</span><br><span class="line"><span class="keyword">set</span> hive.exec.mode.local.auto.inputbytes.max<span class="operator">=</span><span class="number">50000000</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>设置<span class="keyword">local</span> mr的最大输入文件个数，当输入文件个数小于这个值时采用<span class="keyword">local</span> mr的方式，默认为<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> hive.exec.mode.local.auto.input.files.max<span class="operator">=</span><span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<h2 id="3-表的优化"><a href="#3-表的优化" class="headerlink" title="3. 表的优化"></a>3. 表的优化</h2><h3 id="3-1-小表、大表join"><a href="#3-1-小表、大表join" class="headerlink" title="3.1 小表、大表join"></a>3.1 小表、大表join</h3><blockquote>
<p>将key相对分散，并且数据量小的表放在join的左边，这样可以有效减少内存溢出错误发生的几率；再进一步，可以使用map join让小的维度表（1000条以下的记录条数）先进内存。在map端完成reduce。</p>
<p>新版的hive已经对小表JOIN大表和大表JOIN小表进行了优化。小表放在左边和右边已经没有明显区别。</p>
</blockquote>
<h3 id="3-2-大表-join-大表"><a href="#3-2-大表-join-大表" class="headerlink" title="3.2 大表 join 大表"></a>3.2 大表 join 大表</h3><h4 id="3-2-1-空key过滤"><a href="#3-2-1-空key过滤" class="headerlink" title="3.2.1 空key过滤"></a>3.2.1 空key过滤</h4><blockquote>
<p>有时join超时是因为某些key对应的数据太多，而相同key对应的数据都会发送到相同的reducer上，从而导致内存不够。此时我们应该仔细分析这些异常的key，很多情况下，这些key对应的数据是异常数据，我们需要在SQL语句中进行过滤。</p>
<p>join前可以将值为空的连接key过滤掉。</p>
</blockquote>
<h4 id="3-2-2-空key转换"><a href="#3-2-2-空key转换" class="headerlink" title="3.2.2 空key转换"></a>3.2.2 空key转换</h4><blockquote>
<p>有时虽然某个key为空对应的数据很多，但是相应的数据不是异常数据，必须要包含在join的结果中，此时我们可以表a中key为空的字段赋一个随机的值，使得数据随机均匀地分不到不同的reducer上。</p>
</blockquote>
<h3 id="3-3-MapJoin"><a href="#3-3-MapJoin" class="headerlink" title="3.3 MapJoin"></a>3.3 MapJoin</h3><p>工作机制：</p>
<p><img src="/Hadoop/Hive/Hive%E4%BC%98%E5%8C%96/.%5CHive%E4%BC%98%E5%8C%96%5Cclip_image002.png" alt="img"></p>
<p>开启MapJoin功能：</p>
<p>​	<code>set hive.auto.convert.join = true; </code>         默认为true</p>
<p>大表小表的阈值设置（默认25M一下认为是小表）：</p>
<p>​	<code>set hive.mapjoin.smalltable.filesize=25000000;</code></p>
<h3 id="3-4-Group-By"><a href="#3-4-Group-By" class="headerlink" title="3.4 Group By"></a>3.4 Group By</h3><blockquote>
<p>默认情况下，Map阶段同一Key数据分发给一个reduce，当一个key数据过大时就倾斜了。</p>
<p>并不是所有的聚合操作都需要在Reduce端完成，很多聚合操作都可以先在Map端进行部分聚合，最后在Reduce端得出最终结果。</p>
</blockquote>
<p>1．开启Map端聚合参数设置</p>
<p>（1）是否在Map端进行聚合，默认为True</p>
<p>​	<code>hive.map.aggr = true</code></p>
<p>（2）在Map端进行聚合操作的条目数目</p>
<p>​	<code>hive.groupby.mapaggr.checkinterval = 100000</code></p>
<p>（3）有数据倾斜的时候进行负载均衡（默认是false）</p>
<p>​	<code>hive.groupby.skewindata = true</code></p>
<blockquote>
<p>当选项设定为 true，生成的查询计划会有两个MR Job。第一个MR Job中，Map的输出结果会随机分布到Reduce中，每个Reduce做部分聚合操作，并输出结果，这样处理的结果是相同的Group By Key有可能被分发到不同的Reduce中，从而达到负载均衡的目的；第二个MR Job再根据预处理的数据结果按照Group By Key分布到Reduce中（这个过程可以保证相同的Group By Key被分布到同一个Reduce中），最后完成最终的聚合操作。</p>
</blockquote>
<h3 id="3-5-Count-Distinct-去重统计"><a href="#3-5-Count-Distinct-去重统计" class="headerlink" title="3.5 Count(Distinct) 去重统计"></a>3.5 Count(Distinct) 去重统计</h3><blockquote>
<p>数据量小的时候无所谓，数据量大的情况下，由于COUNT DISTINCT操作需要用一个Reduce Task来完成，这一个Reduce需要处理的数据量太大，就会导致整个Job很难完成，一般COUNT DISTINCT使用先GROUP BY再COUNT的方式替换,虽然会多用一个Job来完成，但在数据量大的情况下，这个绝对是值得的。</p>
</blockquote>
<h3 id="3-6-笛卡尔积"><a href="#3-6-笛卡尔积" class="headerlink" title="3.6 笛卡尔积"></a>3.6 笛卡尔积</h3><blockquote>
<p>尽量避免笛卡尔积，join的时候不加on条件，或者无效的on条件，Hive只能使用1个reducer来完成笛卡尔积。</p>
</blockquote>
<h3 id="3-7-行列过滤"><a href="#3-7-行列过滤" class="headerlink" title="3.7 行列过滤"></a>3.7 行列过滤</h3><blockquote>
<p>列处理：在SELECT中，只拿需要的列，如果有，尽量使用分区过滤，少用SELECT *。</p>
<p>行处理：在分区剪裁中，当使用外关联时，如果将副表的过滤条件写在Where后面，那么就会先全表关联，之后再过滤.  所以连接的子表需要过滤时，应尽量现在子表中使用where条件过滤，实在无法再子表中过滤时再考虑在关联之后使用where条件过滤</p>
</blockquote>
<h3 id="3-8-动态分区"><a href="#3-8-动态分区" class="headerlink" title="3.8 动态分区"></a>3.8 动态分区</h3><blockquote>
<p>关系型数据库中，对分区表Insert数据时候，数据库自动会根据分区字段的值，将数据插入到相应的分区中，Hive中也提供了类似的机制，即动态分区(Dynamic Partition)，只不过，使用Hive的动态分区，需要进行相应的配置。</p>
</blockquote>
<p><strong>1．开启动态分区参数设置</strong></p>
<p>（1）开启动态分区功能（默认true，开启）</p>
<p>​	<code>set hive.exec.dynamic.partition=true;</code></p>
<p>（2）设置为非严格模式（动态分区的模式，默认strict，表示必须指定至少一个分区为静态分区，nonstrict模式表示允许所有的分区字段都可以使用动态分区。）</p>
<p>​	<code>set hive.exec.dynamic.partition.mode=nonstrict;</code></p>
<p>（3）在所有执行MR的节点上，最大一共可以创建多少个动态分区。</p>
<p>​	<code>set hive.exec.max.dynamic.partitions=1000;</code></p>
<p>​    （4）在每个执行MR的节点上，最大可以创建多少个动态分区。该参数需要根据实际的数据来设定。比如：源数据中包含了一年的数据，即day字段有365个值，那么该参数就需要设置成大于365，如果使用默认值100，则会报错。</p>
<p>​	<code>set hive.exec.max.dynamic.partitions.pernode=100;</code></p>
<p>（5）整个MR Job中，最大可以创建多少个HDFS文件。</p>
<p>​	<code>set hive.exec.max.created.files=100000;</code></p>
<p>（6）当有空分区生成时，是否抛出异常。一般不需要设置。</p>
<p>​	<code>set hive.error.on.empty.partition=false;</code></p>
<h2 id="4-数据倾斜（MR优化）"><a href="#4-数据倾斜（MR优化）" class="headerlink" title="4. 数据倾斜（MR优化）"></a>4. 数据倾斜（MR优化）</h2><h3 id="4-1-合理设置Map数"><a href="#4-1-合理设置Map数" class="headerlink" title="4.1 合理设置Map数"></a>4.1 合理设置Map数</h3><p><strong>1</strong>）通常情况下，作业会通过input的目录产生一个或者多个map任务。</p>
<p>​	主要的决定因素有：input的文件总个数，input的文件大小，集群设置的文件块大小。</p>
<p><strong>2</strong>）是不是map数越多越好？</p>
<p>​	答案是否定的。如果一个任务有很多小文件（远远小于块大小128m），则每个小文件也会被当做一个块，用一个map任务来完成，而一个map任务启动和初始化的时间远远大于逻辑处理的时间，就会造成很大的资源浪费。而且，同时可执行的map数是受限的。</p>
<p><strong>3</strong>）是不是保证每个map处理接近128m的文件块，就高枕无忧了？</p>
<p>​	答案也是不一定。比如有一个127m的文件，正常会用一个map去完成，但这个文件只有一个或者两个小字段，却有几千万的记录，如果map处理的逻辑比较复杂，用一个map任务去做，肯定也比较耗时。</p>
<p>针对上面的问题2和3，我们需要采取两种方式来解决：即减少map数和增加map数；</p>
<h3 id="4-2-小文件合并"><a href="#4-2-小文件合并" class="headerlink" title="4.2 小文件合并"></a>4.2 小文件合并</h3><p>在map执行前合并小文件，减少map数：CombineHiveInputFormat具有对小文件进行合并的功能（系统默认的格式）。HiveInputFormat没有对小文件合并功能。</p>
<p>​	<code>set hive.input.format= org.apache.hadoop.hive.ql.io.CombineHiveInputFormat;</code></p>
<h3 id="4-3-复杂文件增加Map数"><a href="#4-3-复杂文件增加Map数" class="headerlink" title="4.3 复杂文件增加Map数"></a>4.3 复杂文件增加Map数</h3><p>当input的文件都很大，任务逻辑复杂，map执行非常慢的时候，可以考虑增加Map数，来使得每个map处理的数据量减少，从而提高任务的执行效率。</p>
<p>增加map的方法为：根据computeSliteSize(Math.max(minSize,Math.min(maxSize,blocksize)))&#x3D;blocksize&#x3D;128M公式，调整maxSize最大值。让maxSize最大值低于blocksize就可以增加map的个数。</p>
<p>设置最大切片值大小：</p>
<p>​	<code>set mapreduce.input.fileinputformat.split.maxsize=100;</code></p>
<h3 id="4-4-合理设置Reduce数"><a href="#4-4-合理设置Reduce数" class="headerlink" title="4.4 合理设置Reduce数"></a>4.4 合理设置Reduce数</h3><p><strong>1．调整reduce个数方法一</strong>   （通过设置每个Reduce处理的数据量确定Reduce的值）</p>
<p>（1）每个Reduce处理的数据量默认是256MB</p>
<p>​	<code>set hive.exec.reducers.bytes.per.reducer=256000000;</code></p>
<p>（2）每个任务最大的reduce数，默认为1009</p>
<p>​	<code>set hive.exec.reducers.max=1009;</code></p>
<p>（3）计算reducer数的公式</p>
<p>​	<code>	N=min(参数2，总输入数据量/参数1)</code></p>
<p><strong>2．调整reduce个数方法二</strong>	(直接指定reduce的个数)</p>
<p>在hadoop的mapred-default.xml文件中修改</p>
<p>设置每个job的Reduce个数(默认为-1, 按数据在MapReduce之前的大小，以及上面方法一的配置量来分配的)</p>
<p>​	<code>set mapreduce.job.reduces = 15;</code></p>
<p><strong>3．reduce个数并不是越多越好</strong></p>
<p>1）过多的启动和初始化reduce也会消耗时间和资源；</p>
<p>2）另外，有多少个reduce，就会有多少个输出文件，如果生成了很多个小文件，那么如果这些小文件作为下一个任务的输入，则也会出现小文件过多的问题；</p>
<p>在设置reduce个数的时候也需要考虑这两个原则：处理大数据量利用合适的reduce数；使单个reduce任务处理数据量大小要合适；</p>
<h2 id="5-并行执行"><a href="#5-并行执行" class="headerlink" title="5. 并行执行"></a>5. 并行执行</h2><p>hive会将一个查询转化成一个或者多个阶段。这样的阶段可以是MapReduce阶段、抽样阶段、合并阶段、limit阶段。或者Hive执行过程中可能需要的其他阶段。默认情况下，Hive一次只会执行一个阶段。不过，某个特定的job可能包含众多的阶段，而这些阶段可能并非完全互相依赖的，也就是说有些阶段是可以并行执行的，这样可能使得整个job的执行时间缩短。不过，如果有更多的阶段可以并行执行，那么job可能就越快完成。</p>
<p>​    通过设置参数hive.exec.parallel值为true，就可以开启并发执行。不过，在共享集群中，需要注意下，如果job中并行阶段增多，那么集群利用率就会增加。</p>
<p><code>set hive.exec.parallel=true; </code>      &#x2F;&#x2F;打开任务并行执行</p>
<p><code>set hive.exec.parallel.thread.number=16;</code> &#x2F;&#x2F;同一个sql允许最大并行度，默认为8。</p>
<p>当然，得是在系统资源比较空闲的时候才有优势，否则，没资源，并行也起不来。</p>
<h2 id="6-严格模式"><a href="#6-严格模式" class="headerlink" title="6. 严格模式"></a>6. 严格模式</h2><p>Hive提供了一个严格模式，可以防止用户执行那些可能意想不到的不好的影响的查询。</p>
<p>​    通过设置属性hive.mapred.mode值为默认是非严格模式nonstrict 。开启严格模式需要修改hive.mapred.mode值为strict     <code>set hive.mapred.mode=strict;</code></p>
<p>，开启严格模式可以禁止3种类型的查询。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.mapred.mode<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>strict<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line">      The mode in which the Hive operations are being performed. </span><br><span class="line">      In strict mode, some risky queries are not allowed to run. They include:</span><br><span class="line">        Cartesian Product.</span><br><span class="line">        No partition being picked up for a query.</span><br><span class="line">        Comparing bigints and strings.</span><br><span class="line">        Comparing bigints and doubles.</span><br><span class="line">        Orderby without limit.</span><br><span class="line"><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol>
<li><p>对于分区表，除非where语句中含有分区字段过滤条件来限制范围，否则不允许执行。换句话说，就是用户不允许扫描所有分区。进行这个限制的原因是，通常分区表都拥有非常大的数据集，而且数据增加迅速。没有进行分区限制的查询可能会消耗令人不可接受的巨大资源来处理这个表。</p>
</li>
<li><p>对于使用了order by语句的查询，要求必须使用limit语句。因为order by为了执行排序过程会将所有的结果数据分发到同一个Reducer中进行处理，强制要求用户增加这个LIMIT语句可以防止Reducer额外执行很长一段时间。</p>
</li>
<li><p>限制笛卡尔积的查询。对关系型数据库非常了解的用户可能期望在执行JOIN查询的时候不使用ON语句而是使用where语句，这样关系数据库的执行优化器就可以高效地将WHERE语句转化成那个ON语句。不幸的是，Hive并不会执行这种优化，因此，如果表足够大，那么这个查询就会出现不可控的情况。</p>
</li>
</ol>
<h2 id="7-JVM重用"><a href="#7-JVM重用" class="headerlink" title="7. JVM重用"></a>7. JVM重用</h2><p>JVM重用是Hadoop调优参数的内容，其对Hive的性能具有非常大的影响，特别是对于很难避免小文件的场景或task特别多的场景，这类场景大多数执行时间都很短。</p>
<p>Hadoop的默认配置通常是使用派生JVM来执行map和Reduce任务的。这时JVM的启动过程可能会造成相当大的开销，尤其是执行的job包含有成百上千task任务的情况。JVM重用可以使得JVM实例在同一个job中重新使用N次。N的值可以在Hadoop的mapred-site.xml文件中进行配置。通常在10-20之间，具体多少需要根据具体业务场景测试得出。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.job.jvm.numtasks<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">value</span>&gt;</span>10<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line">     How many tasks to run per jvm. If set to -1, there is no limit. </span><br><span class="line"> <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个功能的缺点是，开启JVM重用将一直占用使用到的task插槽，以便进行重用，直到任务完成后才能释放。如果某个“不平衡的”job中有某几个reduce task执行的时间要比其他Reduce task消耗的时间多的多的话，那么保留的插槽就会一直空闲着却无法被其他的job使用，直到所有的task都结束了才会释放。</p>
<h2 id="8-推测执行"><a href="#8-推测执行" class="headerlink" title="8. 推测执行"></a>8. 推测执行</h2><p>在分布式集群环境下，因为程序Bug（包括Hadoop本身的bug），负载不均衡或者资源分布不均等原因，会造成同一个作业的多个任务之间运行速度不一致，有些任务的运行速度可能明显慢于其他任务（比如一个作业的某个任务进度只有50%，而其他所有任务已经运行完毕），则这些任务会拖慢作业的整体执行进度。为了避免这种情况发生，Hadoop采用了推测执行（Speculative Execution）机制，它根据一定的法则推测出“拖后腿”的任务，并为这样的任务启动一个备份任务，让该任务与原始任务同时处理同一份数据，并最终选用最先成功运行完成任务的计算结果作为最终结果。</p>
<p>设置开启推测执行参数：Hadoop的mapred-site.xml文件中进行配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.map.speculative<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>If true, then multiple instances of some map tasks </span><br><span class="line">               may be executed in parallel.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.reduce.speculative<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>If true, then multiple instances of some reduce tasks </span><br><span class="line">               may be executed in parallel.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>不过hive本身也提供了配置项来控制reduce-side的推测执行：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.mapred.reduce.tasks.speculative.execution<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Whether speculative execution for reducers should be turned on. <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>关于调优这些推测执行变量，还很难给一个具体的建议。如果用户对于运行时的偏差非常敏感的话，那么可以将这些功能关闭掉。如果用户因为输入数据量很大而需要执行长时间的map或者Reduce task的话，那么启动推测执行造成的浪费是非常巨大大。</p>
<h2 id="10-执行计划（Explain）"><a href="#10-执行计划（Explain）" class="headerlink" title="10. 执行计划（Explain）"></a>10. 执行计划（Explain）</h2><p>1．基本语法</p>
<p>EXPLAIN [EXTENDED | DEPENDENCY | AUTHORIZATION] query</p>
<p>2．案例实操</p>
<p>（1）查看下面这条语句的执行计划</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> explain <span class="keyword">select</span> deptno, <span class="built_in">avg</span>(sal) avg_sal <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno;</span><br></pre></td></tr></table></figure>

<p>（2）查看详细执行计划</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> explain extended <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> explain extended <span class="keyword">select</span> deptno, <span class="built_in">avg</span>(sal) avg_sal <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hadoop</category>
        <category>Hive</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Hive</tag>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Hive数据类型</title>
    <url>/Hadoop/Hive/Hive%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="Hive数据类型"><a href="#Hive数据类型" class="headerlink" title="Hive数据类型"></a>Hive数据类型</h1><h2 id="一、数字类型"><a href="#一、数字类型" class="headerlink" title="一、数字类型"></a>一、数字类型</h2><ul>
<li><p>TINYINT  (1字节有符号整数，范围从-128到127)</p>
</li>
<li><p>SMALLINT  (2字节有符号整数，范围从-32,768到32,767)</p>
</li>
<li><p>INT &#x2F; INTEGER  (4字节有符号整数，范围从 -2,147,483,648 到 2,147,483,647)</p>
</li>
<li><p>BIGINT  (8字节有符号整数，范围从-9,223,372,036,854,775,808到9,223,372,036,854,775,807)</p>
</li>
<li><p>FLOAT  (4字节单精度浮点数)</p>
</li>
<li><p>DOUBLE  (8字节双精度浮点数)</p>
</li>
<li><p>DOUBLE PRECISION  (DOUBLE的别名，自Hive2.2.0起可用)</p>
</li>
<li><p>DECIMAL</p>
<ul>
<li>Hive0.11.0起引入，38位精度</li>
<li>Hive0.13.0起支持用于自定义精度和比例</li>
</ul>
</li>
<li><p>NUMBERIC  (同DECIMAL，Hive3.0.0起可用)</p>
</li>
</ul>
<h2 id="二、日期-x2F-时间类型"><a href="#二、日期-x2F-时间类型" class="headerlink" title="二、日期&#x2F;时间类型"></a>二、日期&#x2F;时间类型</h2><ul>
<li>TIMESTAMP  (Hive 0.8.0起可用)</li>
<li>DATE  (Hive 0.12.0起可用)</li>
<li>INTERVAL  (Hive 1.2.0起可用)</li>
</ul>
<h2 id="三、字符串类型"><a href="#三、字符串类型" class="headerlink" title="三、字符串类型"></a>三、字符串类型</h2><ul>
<li>STRING</li>
<li>VARCHAR  (Hive 0.12.0起可用)</li>
<li>CHAR  (Hive 0.13.0起可用)</li>
</ul>
<h2 id="四、其他类型"><a href="#四、其他类型" class="headerlink" title="四、其他类型"></a>四、其他类型</h2><ul>
<li>BOOLEAN</li>
<li>BINARY  (Hive 0.8.0起可用)</li>
</ul>
<h2 id="五-、复杂类型"><a href="#五-、复杂类型" class="headerlink" title="五 、复杂类型"></a>五 、复杂类型</h2><ul>
<li>arrays : ARRAY<data_type>  (Hive 0.14起可用)</data_type></li>
<li>maps : MAP&lt;primitive_type,data_type&gt;  (Hive 0.14起可用)</li>
<li>structs : STRUCT&lt;col_name : data_type [COMMENT col_comment], …&gt;</li>
<li>union : UNIONTYPE&lt;data_type, data_type, …&gt; (Hive 0.7.0起可用)</li>
</ul>
<h2 id="六、列类型"><a href="#六、列类型" class="headerlink" title="六、列类型"></a>六、列类型</h2><h3 id="6-1-整形类型（TINYINT-SMALLINT-INT-INTEGER-BIGINT）"><a href="#6-1-整形类型（TINYINT-SMALLINT-INT-INTEGER-BIGINT）" class="headerlink" title="6.1 整形类型（TINYINT, SMALLINT, INT/INTEGER, BIGINT）"></a>6.1 整形类型（<code>TINYINT</code>, <code>SMALLINT</code>, <code>INT/INTEGER</code>, <code>BIGINT</code>）</h3><p>在默认情况下，整形类型被设定为<code>INT</code>,如果数字超过了INT的范围，这时列类型将会被转换为<code>BIGINT</code>，或者可以使用下载后缀的方式指定整形类型：</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Postfix</th>
<th>Example</th>
</tr>
</thead>
<tbody><tr>
<td>TINYINT</td>
<td>Y</td>
<td>100Y</td>
</tr>
<tr>
<td>SMALLINT</td>
<td>S</td>
<td>100S</td>
</tr>
<tr>
<td>BIGINT</td>
<td>L</td>
<td>100L</td>
</tr>
</tbody></table>
<p>版本信息：INTEGER在Hive 2.2.0中作为INT 的同义词引入。</p>
<h3 id="6-2-String类型"><a href="#6-2-String类型" class="headerlink" title="6.2 String类型"></a>6.2 String类型</h3><p>字符串型类型值可以使用单引号或双引号表示，Hive将使用C风格在字符串中转义。</p>
<h3 id="6-3-Varchar类型"><a href="#6-3-Varchar类型" class="headerlink" title="6.3 Varchar类型"></a>6.3 Varchar类型</h3><p>varchar类型在创建时需要指定长度（范围1~65535），即定义允许存放的最大字符数。如果要转换&#x2F;分配给varchar类型的字符串超过了指定的长度，字符串会被自动截断。 字符长度由字符串包含的代码点数决定。 </p>
<p>和string一样，尾随在varchar最后的空格很重要，会影响比较的结果。</p>
<p>版本信息：</p>
<blockquote>
<p>varchar 在Hive 0.12.0之后起可用</p>
</blockquote>
<h3 id="6-4-Char-类型"><a href="#6-4-Char-类型" class="headerlink" title="6.4 Char 类型"></a>6.4 Char 类型</h3><p>Char类型与Varchar类型相似，但是Char类型的字符串是固定长度的，没有达到固定长度的部分会使用空格填充，这也意味着在Char类型在比较时尾部的空格没有那么重要，Char的最大长度固定为255。</p>
<p>版本信息：</p>
<blockquote>
<p>Char 类型在Hive 0.13.0后可用</p>
</blockquote>
<h3 id="6-5-Timestamp类型"><a href="#6-5-Timestamp类型" class="headerlink" title="6.5 Timestamp类型"></a>6.5 Timestamp类型</h3><p>支持具有可选纳秒精度的传统UNIX时间戳。</p>
<p>支持的转换：</p>
<ul>
<li><p>整数数字类型：以秒为单位解释为UNIX时间戳</p>
</li>
<li><p>浮点数字类型：以秒为单位，以十进制精度解释为UNIX时间戳</p>
</li>
<li><p>字符串：符合JDBC的java、sql。时间戳格式“YYYY-MM-DD HH:MM:SS.FFFFFFF”（小数点后9位精度）</p>
</li>
</ul>
<p>时间戳被解释为无时区的，并存储为UNIX历元的偏移量。提供了方便的自定义项（to_utc_timestamp, from_utc_timestamp）用于时区之间的转换。</p>
<p>所有现有的datetime UDF（月、日、年、小时等）都使用时间戳数据类型。</p>
<p>文本文件中的时间戳必须使用格式yyyy-mm-dd hh:mm:ss[.f…]。如果它们是另一种格式，请将其声明为适当的类型（INT、FLOAT、STRING等），并使用UDF将其转换为时间戳。</p>
<p>通过设置<code>hive.parquet.write.int64.timestamp=true</code>和<code>hive.parquet.timestamp.time.unit</code>为默认的存储时间单位 (“nanos”纳秒, “micros”微秒, “millis毫秒”; default: “micros”)，Parquet 文件中的时间戳可以存储为int64（而不是int96）。请注意，由于仅存储了64位，如果超出1677-09-21T00:12:43.15和2262-04-11T23:47:16.8的范围，则存储时间单位为“nanos”的int64时间戳将存储为NULL。</p>
<p>在表级别上，可以通过向SerDe属性“timestamp.formats”提供格式（从HIVE1.2.0开始），来支持其他时间戳格式。例如，yyyy-MM-dd’T’HH:MM:ss。SSS，yyyy-MM-dd’T’HH:MM:ss。</p>
<p>版本信息:</p>
<blockquote>
<p>Timestamp在Hive 0.8.0起可用。</p>
</blockquote>
<h3 id="6-6-Dates-类型"><a href="#6-6-Dates-类型" class="headerlink" title="6.6 Dates 类型"></a>6.6 Dates 类型</h3><p>Date类型：</p>
<p>Date 值主要用来描述年月日信息，使用形式YYYY-MM-DD,例如，Date ‘2022-05-30’。Date类型中没有时间组件。Date类型支持的值的范围为0000-01-01到9999-12-31，取决于原Java提供的日期类型的支持。</p>
<p>版本信息：</p>
<blockquote>
<p>Dates 在Hive 0.12.0之后可用。</p>
</blockquote>
<p>类型转换：</p>
<p>Date类型可以转换&#x2F;被转换为Date，Timestamp，或者String类型。也可以按使用者指定的格式转换（<strong>知识暂未深入研究</strong>）</p>
<p>以下是一些有关Date类型转换的说明：</p>
<table>
<thead>
<tr>
<th>转换为Date&#x2F; Date转换为其他时间类型</th>
<th>转换结果</th>
</tr>
</thead>
<tbody><tr>
<td>Date 转换为 Date</td>
<td>结果相同</td>
</tr>
<tr>
<td>Timestamp 转换为 Date</td>
<td>年、月、日在timestamp中是定好的，基于当地的时区将其转换为Date类型</td>
</tr>
<tr>
<td>String 转换为 Date</td>
<td>如果string 的格式为”YYYY-MM-DD”，将会按此年月日来转换成Date，如果String不是这种格式，则转换结果为NULL</td>
</tr>
<tr>
<td>Date 转换为Timestamp</td>
<td>基于本地时区，生成与日期值的年&#x2F;月&#x2F;日的午夜相对应的时间戳值。</td>
</tr>
<tr>
<td>Date 转换为 String</td>
<td>Date的年月日将以”YYYY-MM-DD”的格式转换为String</td>
</tr>
</tbody></table>
<p><strong>Interval类型：暂未研究</strong></p>
<h3 id="6-7-Decimal类型"><a href="#6-7-Decimal类型" class="headerlink" title="6.7 Decimal类型"></a>6.7 Decimal类型</h3><p>版本信息：</p>
<blockquote>
<p>Decimal数据类型在Hive 0.11.0引入，在Hive 0.13.0修正。在Hive 3.0.0中，	NUMERIC与Decimal类型作为同义词引入。</p>
</blockquote>
<p>介绍：</p>
<blockquote>
<p>Hive中的Decimal 类型是基于Java中用来表示不可变的任意精度的十进制数的BigDecimal类型而产生的。所有常规的数字运算（如加减乘除）和自定义项（如 Floor, Ceil, Round等）都可以用来处理Decimal类型。可以按照自己的想法将Decimal转换为其他类型，或将其他类型转换为Decimal。Decimal类型的持久性使得它支持科学和非科学计数法。</p>
</blockquote>
<p>使用：</p>
<blockquote>
<ul>
<li>Hive 0.11 和 0.12 版本Decimal类型的精度固定为38位</li>
<li>从Hive 0.13起，使用者可以自定义精度(字段长度）和范围（小数位数），创建表时，对于Decimal类型只需使用DECIMAL(precision, scale)的语法格式即可。如果小数位数没有确定，则其默认值为0；如果精度没有确定，其默认值为10。</li>
</ul>
</blockquote>
<p>以下是一个建表时指定Decimal类型属性的例子：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> foo (</span><br><span class="line">  a <span class="type">DECIMAL</span>, <span class="comment">-- Defaults to decimal(10,0)</span></span><br><span class="line">  b <span class="type">DECIMAL</span>(<span class="number">9</span>, <span class="number">7</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>Decimal 文本：</p>
<blockquote>
<p>大于BIGINT的整型文本必须使用Decimal(38,0)来处理，且’BD’后缀是必须携带的，如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">CAST</span>(<span class="number">18446744073709001000</span>BD <span class="keyword">AS</span> <span class="type">DECIMAL</span>(<span class="number">38</span>,<span class="number">0</span>)) </span><br><span class="line"><span class="keyword">from</span> my_table limit <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>Hive 0.12.0 和 Hive 0.13.0版本间的Decimal类型是不兼容的。</strong></p>
<blockquote>
<p>由于Hive 0.13.0中Decimal类型的变化，Hive 0.13.0 之前版本的Decimal类型的列，在Hive 0.13.0版本后将被视为decimal(10,0),这意味着写入或写出这张表的整形值都会被转换为10位长度，所以从0.12.0版本获取的表最好升级到0.13.0版本后。</p>
</blockquote>
<p>更新Hive 0.13.0版本之前的表的Decimal类型列：</p>
<blockquote>
<ol>
<li>确定要对Decimal类型设置的的精度和范围。</li>
<li>对于表中的每一个Decimal类型的列，使用ALTER TABLE 命令将其修改为想要的精度和范围，如：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE foo CHANGE COLUMN dec_column_name dec_column_name DECIMAL(38,18);</span><br></pre></td></tr></table></figure>

<p>​	如果不是分区表，更新到此已经完成了，如果是分区表，还需要继续下面的第三步。</p>
<ol start="3">
<li><p>如果表是分区表，先查询表的分区列列表，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW PARTITIONS foo;</span><br><span class="line">  </span><br><span class="line">ds=2008-04-08/hr=11</span><br><span class="line">ds=2008-04-08/hr=12</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
</li>
<li><p>表中现有的每个分区必须修改其Decimal列，以添加所需的精度和范围。可以通过动态分区的ALTER TABLE CHANGE COLUMN(Hive 0.14.0后可用)来实现，如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> hive.exec.dynamic.partition <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">     </span><br><span class="line"><span class="comment">-- hive.exec.dynamic.partition needs to be set to true to enable dynamic partitioning with ALTER PARTITION</span></span><br><span class="line"><span class="comment">-- This will alter all existing partitions of the table - be sure you know what you are doing!</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> foo <span class="keyword">PARTITION</span> (ds, hr) CHANGE <span class="keyword">COLUMN</span> dec_column_name dec_column_name <span class="type">DECIMAL</span>(<span class="number">38</span>,<span class="number">18</span>);</span><br></pre></td></tr></table></figure>

<p>或者，可以使用ALTER TABLE CHANGE COLUMN一次指定一个分区，通过为每个语句指定一个分区来完成，如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> foo <span class="keyword">PARTITION</span> (ds<span class="operator">=</span><span class="string">&#x27;2008-04-08&#x27;</span>, hr<span class="operator">=</span><span class="number">11</span>) CHANGE <span class="keyword">COLUMN</span> dec_column_name dec_column_name <span class="type">DECIMAL</span>(<span class="number">38</span>,<span class="number">18</span>);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> foo <span class="keyword">PARTITION</span> (ds<span class="operator">=</span><span class="string">&#x27;2008-04-08&#x27;</span>, hr<span class="operator">=</span><span class="number">12</span>) CHANGE <span class="keyword">COLUMN</span> dec_column_name dec_column_name <span class="type">DECIMAL</span>(<span class="number">38</span>,<span class="number">18</span>);</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li>
</ol>
</blockquote>
<h3 id="6-8-UNION类型"><a href="#6-8-UNION类型" class="headerlink" title="6.8 UNION类型"></a>6.8 UNION类型</h3><p> <strong>UNIONTYPE支持不完整</strong> ：</p>
<blockquote>
<p> 在Hive 0.7.0（Hive-537）中引入了UNIONTYPE数据类型，但在Hive中对该类型的完全支持仍不完整。在JOIN（HIVE-2508）、WHERE和GROUP BY子句中引用UNIONTYPE字段的查询将失败，并且HIVE没有定义提取UNIONTYPE的标记或值字段的语法。这意味着UNIONTYPEs只能有效地传递。 </p>
</blockquote>
<p>使用：</p>
<blockquote>
<p>联合类型可以在任意一点保存它们指定的数据类型之一。你可以使用create_union UDF创建该类型的实例:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> union_test(foo UNIONTYPE<span class="operator">&lt;</span><span class="type">int</span>, <span class="keyword">double</span>, <span class="keyword">array</span><span class="operator">&lt;</span>string<span class="operator">&gt;</span>, struct<span class="operator">&lt;</span>a:<span class="type">int</span>,b:string<span class="operator">&gt;&gt;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> foo <span class="keyword">FROM</span> union_test;</span><br><span class="line"></span><br><span class="line">&#123;<span class="number">0</span>:<span class="number">1</span>&#125;</span><br><span class="line">&#123;<span class="number">1</span>:<span class="number">2.0</span>&#125;</span><br><span class="line">&#123;<span class="number">2</span>:[&quot;three&quot;,&quot;four&quot;]&#125;</span><br><span class="line">&#123;<span class="number">3</span>:&#123;&quot;a&quot;:<span class="number">5</span>,&quot;b&quot;:&quot;five&quot;&#125;&#125;</span><br><span class="line">&#123;<span class="number">2</span>:[&quot;six&quot;,&quot;seven&quot;]&#125;</span><br><span class="line">&#123;<span class="number">3</span>:&#123;&quot;a&quot;:<span class="number">8</span>,&quot;b&quot;:&quot;eight&quot;&#125;&#125;</span><br><span class="line">&#123;<span class="number">0</span>:<span class="number">9</span>&#125;</span><br><span class="line">&#123;<span class="number">1</span>:<span class="number">10.0</span>&#125;</span><br></pre></td></tr></table></figure>

<p>反序列化的联合中的第一部分是标记，它让我们知道使用的是联合的哪个部分。在这个示例中，0表示定义中的第一个data_type，它是一个int，以此类推。要创建一个联合，你必须给create_union UDF提供这个标签:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> create_union(<span class="number">0</span>, key), create_union(if(key<span class="operator">&lt;</span><span class="number">100</span>, <span class="number">0</span>, <span class="number">1</span>), <span class="number">2.0</span>, <span class="keyword">value</span>), create_union(<span class="number">1</span>, &quot;a&quot;, struct(<span class="number">2</span>, &quot;b&quot;)) <span class="keyword">FROM</span> src LIMIT <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">&#123;<span class="number">0</span>:&quot;238&quot;&#125;	&#123;<span class="number">1</span>:&quot;val_238&quot;&#125;	&#123;<span class="number">1</span>:&#123;&quot;col1&quot;:<span class="number">2</span>,&quot;col2&quot;:&quot;b&quot;&#125;&#125;</span><br><span class="line">&#123;<span class="number">0</span>:&quot;86&quot;&#125;	&#123;<span class="number">0</span>:<span class="number">2.0</span>&#125;	&#123;<span class="number">1</span>:&#123;&quot;col1&quot;:<span class="number">2</span>,&quot;col2&quot;:&quot;b&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="七、字面常量类型（Literals）"><a href="#七、字面常量类型（Literals）" class="headerlink" title="七、字面常量类型（Literals）"></a>七、字面常量类型（Literals）</h2><h3 id="7-1-浮点类型"><a href="#7-1-浮点类型" class="headerlink" title="7.1 浮点类型"></a>7.1 浮点类型</h3><p>浮点类型的字面常量被设定为DOUBLE类型，暂不支持科学计数法。</p>
<h3 id="7-2-Decimal类型"><a href="#7-2-Decimal类型" class="headerlink" title="7.2 Decimal类型"></a>7.2 Decimal类型</h3><p>十进制字面值(Decimal Literals)为浮点数提供了比DOUBLE类型更精确的值和更大的范围。十进制数据类型存储数值的精确表示，而DOUBLE数据类型存储数值的非常接近的表示。当DOUBLE类型精确度不够时，可以使用Decimal类型。</p>
<p>可以创建一个含有Decimal类型属性的表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> decimal_1 (t <span class="type">decimal</span>);</span><br></pre></td></tr></table></figure>

<p>可以使用LazySimpleSerDe或LazyBinarySerDe在这样的表中读写值。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> decimal_1 <span class="keyword">set</span> serde <span class="string">&#x27;org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 或者</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> decimal_1 <span class="keyword">set</span> serde <span class="string">&#x27;org.apache.hadoop.hive.serde2.lazy.LazyBinarySerDe&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>可以将Decimal值转换为其他基本类型，例如BOOLEAN:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">cast</span>(t <span class="keyword">as</span> <span class="type">boolean</span>) <span class="keyword">from</span> decimal_2;</span><br></pre></td></tr></table></figure>

<p> Decimal还支持许多算术运算符、数学UDF(用户自定义函数)和UDAFs，其语法与DOUBLE中使用的语法相同 。</p>
<p>可以使用在Decimal类型的基本数学运算如下：</p>
<blockquote>
<ul>
<li>Positive</li>
<li>Negative</li>
<li>Addition</li>
<li>Subtraction</li>
<li>Multiplication</li>
<li>Division</li>
<li>Average (avg)</li>
<li>Sum</li>
<li>Count</li>
<li>Modulus (pmod)</li>
<li>Sign – Hive 0.13.0 and later</li>
<li>Exp – Hive 0.13.0 and later</li>
<li>Ln – Hive 0.13.0 and later</li>
<li>Log2 – Hive 0.13.0 and later</li>
<li>Log10 – Hive 0.13.0 and later</li>
<li>Log(<em>base</em>)  – Hive 0.13.0 and later</li>
<li>Sqrt – Hive 0.13.0 and later</li>
<li>Sin – Hive 0.13.0 and later</li>
<li>Asin  – Hive 0.13.0 and later</li>
<li>Cos – Hive 0.13.0 and later</li>
<li>Acos – Hive 0.13.0 and later</li>
<li>Tan – Hive 0.13.0 and later</li>
<li>Atan – Hive 0.13.0 and later</li>
<li>Radians – Hive 0.13.0 and later</li>
<li>Degrees – Hive 0.13.0 and later</li>
</ul>
</blockquote>
<p>一些舍入函数也可以用在Decimal类型上：</p>
<blockquote>
<ul>
<li>Floor</li>
<li>Ceiling</li>
<li>Round</li>
</ul>
</blockquote>
<p>Power(decimal, n) 只支持指数n的正整数值。</p>
<ul>
<li>缺失值处理</li>
</ul>
<blockquote>
<p>缺失的值由特殊值NULL表示。要导入带有NULL字段的数据，请检查表使用的SerDe的文档。(默认的文本格式使用LazySimpleSerDe，它在导入时将字符串\N解释为NULL。)</p>
</blockquote>
<ul>
<li>类型转换</li>
</ul>
<blockquote>
<p> 当hive.metastore.disallow.incompatible.col.type.changes被设置为false时，可以将原数据中列的类型从一种类型任意转换到另一种类型，如果类型转换是成功的，结果将会被显示，否则将显示NULL。</p>
</blockquote>
<p>下表展示了类型间是否可以相互转换：</p>
<table>
<thead>
<tr>
<th></th>
<th>void</th>
<th>boolean</th>
<th>tinyint</th>
<th>smallint</th>
<th>int</th>
<th>bigint</th>
<th>float</th>
<th>double</th>
<th>decimal</th>
<th>string</th>
<th>varchar</th>
<th>timestamp</th>
<th>date</th>
<th>binary</th>
</tr>
</thead>
<tbody><tr>
<td>void to</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
</tr>
<tr>
<td>boolean to</td>
<td>false</td>
<td>true</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>tinyint to</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>false</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>smallint to</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>false</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>int to</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>false</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>bigint to</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>false</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>float to</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>false</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>double to</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>false</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>decimal to</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>false</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>string to</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>false</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>varchar to</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>false</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>timestamp to</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>date to</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>true</td>
<td>false</td>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>binary to</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>true</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Hadoop</category>
        <category>Hive</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Hive</tag>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Hive数据检索</title>
    <url>/Hadoop/Hive/Hive%E6%95%B0%E6%8D%AE%E6%A3%80%E7%B4%A2/</url>
    <content><![CDATA[<h1 id="Hive数据检索"><a href="#Hive数据检索" class="headerlink" title="Hive数据检索"></a>Hive数据检索</h1><h2 id="一、Select语法"><a href="#一、Select语法" class="headerlink" title="一、Select语法"></a>一、Select语法</h2><p>语法格式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">WITH</span> CommonTableExpression (, CommonTableExpression)<span class="operator">*</span>]    (Note: <span class="keyword">Only</span> available starting <span class="keyword">with</span> Hive <span class="number">0.13</span><span class="number">.0</span>)</span><br><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">ALL</span> <span class="operator">|</span> <span class="keyword">DISTINCT</span>] select_expr, select_expr, ...</span><br><span class="line">  <span class="keyword">FROM</span> table_reference</span><br><span class="line">  [<span class="keyword">WHERE</span> where_condition]</span><br><span class="line">  [<span class="keyword">GROUP</span> <span class="keyword">BY</span> col_list]</span><br><span class="line">  [<span class="keyword">ORDER</span> <span class="keyword">BY</span> col_list]</span><br><span class="line">  [CLUSTER <span class="keyword">BY</span> col_list</span><br><span class="line">    <span class="operator">|</span> [DISTRIBUTE <span class="keyword">BY</span> col_list] [SORT <span class="keyword">BY</span> col_list]</span><br><span class="line">  ]</span><br><span class="line"> [LIMIT [<span class="keyword">offset</span>,] <span class="keyword">rows</span>]</span><br></pre></td></tr></table></figure>

<p>语法解析：</p>
<ul>
<li><p>Select语句可以是UNION查询的一部分，也可以是另一个查询的子查询。</p>
</li>
<li><p><code>table_reference</code>是指查询的输入，它可以是一个普通表、视图、连接结构或者子查询。</p>
</li>
<li><p>表名和列名不区分大小写。</p>
<ul>
<li>在Hive 0.12 及之前版本，表名和列名中只允许出现字母、数字和下划线。</li>
<li>在Hive 0.13及之后的版本，列名可以包含任何Unicode字符。在反引号中指定的任何列名都按照字面意思处理。在反引号包裹的字符串中，可以使用连续的两个反引号来表示反引号字符。</li>
<li>如果要使用Hive 0.13之前的命名规则，即只能使用字母、数字、下划线命名的方式，可以将配置属性<code>hive.support.quoted.identifiers</code>为none，在这种设置下，反引号中的名字将被看作普通表达。</li>
</ul>
</li>
<li><p>一个简单的查询，查询表t1中的所有行列值：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t1 </span><br></pre></td></tr></table></figure>
</li>
<li><p>注意：自Hive 0.13.0起，from关键字变为可选的。</p>
</li>
<li><p>如果要获取当前数据库中的内容，可以使用current_database()函数，如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> current_database()</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询时指定数据库，可以使用携带数据库名字的表名，如“db_name.table_name”(Hive 0.7 起使用)，也可以在查询之前使用USE语句(Hive 0.6起使用)。<br>“db_name.table_name”的方式允许一个查询在不同的数据库中获取表。</p>
</li>
<li><p>USE 关键字为之后的所有HiveQL语句设置了数据库，使用关键字”default”可以将数据库重设为默认数据库，如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE database_name;</span><br><span class="line"><span class="keyword">SELECT</span> query_specifications;</span><br><span class="line">USE <span class="keyword">default</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="1-1-WHERE子句"><a href="#1-1-WHERE子句" class="headerlink" title="1.1 WHERE子句"></a>1.1 WHERE子句</h3><p>WHERE条件是一个布尔表达式，例如，下面的查询只返回来自美国地区的金额大于10的销售记录。Hive在WHERE子句中支持许多操作符和用户自定义函数：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> sales <span class="keyword">WHERE</span> amount <span class="operator">&gt;</span> <span class="number">10</span> <span class="keyword">AND</span> region <span class="operator">=</span> &quot;US&quot;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-ALL-和-DISTINCT-子句"><a href="#1-2-ALL-和-DISTINCT-子句" class="headerlink" title="1.2 ALL 和 DISTINCT 子句"></a>1.2 ALL 和 DISTINCT 子句</h3><p>ALL 和 DISTINCT 子句用来确定重复的行是否应该被返回，如果没有给出这些选项，则默认为ALL(所有匹配的行都被返回)。DISTINCT指定了要在结果集中删除的行。注意，Hive 在 1.1.0版本后支持SELECT DISTINCT * 的写法。下面是一些例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hive&gt; SELECT col1, col2 FROM t1</span><br><span class="line">    1 3</span><br><span class="line">    1 3</span><br><span class="line">    1 4</span><br><span class="line">    2 5</span><br><span class="line">hive&gt; SELECT DISTINCT col1, col2 FROM t1</span><br><span class="line">    1 3</span><br><span class="line">    1 4</span><br><span class="line">    2 5</span><br><span class="line">hive&gt; SELECT DISTINCT col1 FROM t1</span><br><span class="line">    1</span><br><span class="line">    2</span><br></pre></td></tr></table></figure>

<p>ALL 和  DISTINCT 也可以被用在UNION子句中。</p>
<h3 id="1-3-基于分区的查询"><a href="#1-3-基于分区的查询" class="headerlink" title="1.3 基于分区的查询"></a>1.3 基于分区的查询</h3><p>一般来说，选择语句查询会扫描整个表(除了抽样外)。如果建表时使用了PARTITIONED BY子句，查询范围会减小为只扫描与指定分区相关的表的一部分。如果分区谓词是在WHERE子句中，或者在JOIN中的ON子句指定的，则Hive会做分区修整。例如，如果表page_views使用日期列进行分区，下面的查询只会检索那些在2008-03-01 到 2008-03-31之间的行：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> page_views.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> page_views</span><br><span class="line"><span class="keyword">WHERE</span> page_views.date <span class="operator">&gt;=</span> <span class="string">&#x27;2008-03-01&#x27;</span> <span class="keyword">AND</span> page_views.date <span class="operator">&lt;=</span> <span class="string">&#x27;2008-03-31&#x27;</span></span><br></pre></td></tr></table></figure>

<p>如果表page_views与另一个表dim_users连接在一起，可以像下面这样在ON子句中确定分区范围：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> page_views.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> page_views <span class="keyword">JOIN</span> dim_users</span><br><span class="line">  <span class="keyword">ON</span> (page_views.user_id <span class="operator">=</span> dim_users.id <span class="keyword">AND</span> page_views.date <span class="operator">&gt;=</span> <span class="string">&#x27;2008-03-01&#x27;</span> <span class="keyword">AND</span> page_views.date <span class="operator">&lt;=</span> <span class="string">&#x27;2008-03-31&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="1-4-Having子句"><a href="#1-4-Having子句" class="headerlink" title="1.4 Having子句"></a>1.4 Having子句</h3><p>Having用法：</p>
<blockquote>
<p> 1.WHERE 子句用来筛选 FROM 子句中指定的操作所产生的行。<br> 2.GROUP BY 子句用来分组 WHERE 子句的输出。<br> 3.HAVING 子句用来从分组的结果中筛选行。</p>
</blockquote>
<p><strong>Having子句必须配合Group By 子句使用！</strong></p>
<p>在0.7.0 版本中 Hive添加了对HAVING子句的支持，而在更老的版本中，Hive也可能通过子查询达到相同的效果，如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> col1 <span class="keyword">FROM</span> t1 <span class="keyword">GROUP</span> <span class="keyword">BY</span> col1 <span class="keyword">HAVING</span> <span class="built_in">SUM</span>(col2) <span class="operator">&gt;</span> <span class="number">10</span></span><br></pre></td></tr></table></figure>

<p>也可以被这样表示：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> col1 <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> col1, <span class="built_in">SUM</span>(col2) <span class="keyword">AS</span> col2sum <span class="keyword">FROM</span> t1 <span class="keyword">GROUP</span> <span class="keyword">BY</span> col1) t2 <span class="keyword">WHERE</span> t2.col2sum <span class="operator">&gt;</span> <span class="number">10</span></span><br></pre></td></tr></table></figure>

<h3 id="1-5-LIMIT子句"><a href="#1-5-LIMIT子句" class="headerlink" title="1.5 LIMIT子句"></a>1.5 LIMIT子句</h3><p>LIMIT子句可以用来对SELECT查询的返回结果进行行数上的限制。</p>
<p>LIMIT 关键字可以带有一到两个参数，这些参数必须是非负整数。</p>
<p>第一个参数指定了到第一行的偏移量，第二个参数指定了最大返回行数。</p>
<p>当只给定了一个参数据，它代表返回的最大行数，此时偏移量默认为0。</p>
<p>下面的查询返回了5个任意的customers：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> customers LIMIT <span class="number">5</span></span><br></pre></td></tr></table></figure>

<p>下面的查询返回了最先创建的5个customers：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> customers LIMIT <span class="number">5</span></span><br></pre></td></tr></table></figure>

<p>下面的查询返回了第三个到第七个创建的customers：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> customers <span class="keyword">ORDER</span> <span class="keyword">BY</span> create_date LIMIT <span class="number">2</span>,<span class="number">5</span></span><br></pre></td></tr></table></figure>

<p>在Hive 0.13.0之前的版本中，SELECT语句可以采用基于正则表达式(REGEX)的列规范，或者在0.13.0及以后的版本中，将<code>hive.support.quoted.identifiers</code>设置为none。</p>
<blockquote>
<p>使用Java的正则表达式语法规则。</p>
<p>下面的查询选择了除ds和hr的所有列:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `(ds<span class="operator">|</span>hr)?<span class="operator">+</span>.<span class="operator">+</span>` <span class="keyword">FROM</span> sales</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="1-6-Group-By语法"><a href="#1-6-Group-By语法" class="headerlink" title="1.6 Group By语法"></a>1.6 Group By语法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">groupByClause: GROUP BY groupByExpression (, groupByExpression)*</span><br><span class="line"> </span><br><span class="line">groupByExpression: expression</span><br><span class="line"> </span><br><span class="line">groupByQuery: SELECT expression (, expression)* FROM src groupByClause?</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<p>groupByExpression中列可以通过名字指定，但不能通过位置指定。但在Hive 0.11.0之后，列可以通过位置指定，只要按照以下方式配置：	</p>
<ul>
<li>当Hive 版本在 0.11.0 到 2.1.x之间，将<code>hive.groupby.orderby.position.alias</code>设置为true(默认为false)</li>
<li>当Hive 版本在 2.2.0及以后时，将<code>hive.groupby.position.alias</code>设置为true(默认为false)</li>
</ul>
<h4 id="1-6-1-一些样例"><a href="#1-6-1-一些样例" class="headerlink" title="1.6.1 一些样例"></a>1.6.1 一些样例</h4><ul>
<li><p>查询表中的数据行数：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> table2;</span><br></pre></td></tr></table></figure>

<p>注意在一些hive版本中不支持COUNT(*)，需要使用COUNT(1)代替。</p>
</li>
<li><p>按性别计算不同用户的数量，可以编写如下查询:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> OVERWRITE <span class="keyword">TABLE</span> pv_gender_sum</span><br><span class="line"><span class="keyword">SELECT</span> pv_users.gender, <span class="built_in">count</span> (<span class="keyword">DISTINCT</span> pv_users.userid)</span><br><span class="line"><span class="keyword">FROM</span> pv_users</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> pv_users.gender;</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以同时进行多个聚合，但是不能有两个聚合具有不同的DISTINCT列。例如，下面的做法是可行的，因为count(DISTINCT)和sum(DISTINCT)指定了相同的列:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> OVERWRITE <span class="keyword">TABLE</span> pv_gender_agg</span><br><span class="line"><span class="keyword">SELECT</span> pv_users.gender, <span class="built_in">count</span>(<span class="keyword">DISTINCT</span> pv_users.userid), <span class="built_in">count</span>(<span class="operator">*</span>), <span class="built_in">sum</span>(<span class="keyword">DISTINCT</span> pv_users.userid)</span><br><span class="line"><span class="keyword">FROM</span> pv_users</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> pv_users.gender;</span><br></pre></td></tr></table></figure>

<p>下面的聚合则是不允许的，因为聚合的列不同：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> OVERWRITE <span class="keyword">TABLE</span> pv_gender_agg</span><br><span class="line"><span class="keyword">SELECT</span> pv_users.gender, <span class="built_in">count</span>(<span class="keyword">DISTINCT</span> pv_users.userid), <span class="built_in">count</span>(<span class="keyword">DISTINCT</span> pv_users.ip)</span><br><span class="line"><span class="keyword">FROM</span> pv_users</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> pv_users.gender;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="1-6-2-select表达式和group-by子句"><a href="#1-6-2-select表达式和group-by子句" class="headerlink" title="1.6.2 select表达式和group by子句"></a>1.6.2 select表达式和group by子句</h4><p>当要使用group by子句时，select表达式中只能包含那些在group by子句中的列，当然，select表达式中可以尽可能多的使用聚合函数(如count)。</p>
<p>下面用一个例子来说明：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t1(a <span class="type">INTEGER</span>, b INTGER);</span><br></pre></td></tr></table></figure>

<p>查询上面创建的表可以这样写：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">   a,</span><br><span class="line">   <span class="built_in">sum</span>(b)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">   t1</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">   a;</span><br></pre></td></tr></table></figure>

<p>但一下的查询方式是不被允许的，因为select表达式中含有group by子句中没有的列：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">   a,</span><br><span class="line">   b</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">   t1</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">   a;</span><br></pre></td></tr></table></figure>

<p>这是因为如果表是下面的形式：</p>
<figure class="highlight plaintext"><figcaption><span>b</span></figcaption><table><tr><td class="code"><pre><span class="line">a    b</span><br><span class="line">------</span><br><span class="line">100  1</span><br><span class="line">100  2</span><br><span class="line">100  3</span><br></pre></td></tr></table></figure>

<p>如果使用a来分组，返回哪条数据是一个矛盾的问题。</p>
<h4 id="1-6-3-高级特性"><a href="#1-6-3-高级特性" class="headerlink" title="1.6.3 高级特性"></a>1.6.3 高级特性</h4><h5 id="1-6-3-1-多表分组插入"><a href="#1-6-3-1-多表分组插入" class="headerlink" title="1.6.3.1 多表分组插入"></a>1.6.3.1 多表分组插入</h5><p>聚合或简单选择的输出可以进一步发送到多个表中，甚至发送到hadoop dfs文件(然后可以使用hdfs实用程序操作这些文件)。例如，如果除了性别分类，还需要找到按年龄分列单独视图页，可以通过以下查询实现:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> pv_users</span><br><span class="line"><span class="keyword">INSERT</span> OVERWRITE <span class="keyword">TABLE</span> pv_gender_sum</span><br><span class="line">  <span class="keyword">SELECT</span> pv_users.gender, <span class="built_in">count</span>(<span class="keyword">DISTINCT</span> pv_users.userid)</span><br><span class="line">  <span class="keyword">GROUP</span> <span class="keyword">BY</span> pv_users.gender</span><br><span class="line"><span class="keyword">INSERT</span> OVERWRITE DIRECTORY <span class="string">&#x27;/user/facebook/tmp/pv_age_sum&#x27;</span></span><br><span class="line">  <span class="keyword">SELECT</span> pv_users.age, <span class="built_in">count</span>(<span class="keyword">DISTINCT</span> pv_users.userid)</span><br><span class="line">  <span class="keyword">GROUP</span> <span class="keyword">BY</span> pv_users.age</span><br></pre></td></tr></table></figure>

<h5 id="1-6-3-2-基于分组的映射端聚合"><a href="#1-6-3-2-基于分组的映射端聚合" class="headerlink" title="1.6.3.2 基于分组的映射端聚合"></a>1.6.3.2 基于分组的映射端聚合</h5><p><code>hive.map.aggr</code>参数控制了我们的聚合方式，默认为false，如果设置为true，Hive将直接在map任务中做第一级聚合。通常这样的销量更高，但是成功运行可能需要更多的内存。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> hive.map.aggr<span class="operator">=</span>``<span class="literal">true</span>``;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> table2;</span><br></pre></td></tr></table></figure>

<p>注意：不包含HIVE-287的Hive版本需要用COUNT(1)来代替COUNT(*)。</p>
<h3 id="1-7-Order-Sort-Cluster-and-Distribute-By"><a href="#1-7-Order-Sort-Cluster-and-Distribute-By" class="headerlink" title="1.7 Order, Sort, Cluster, and Distribute By"></a>1.7 Order, Sort, Cluster, and Distribute By</h3><h4 id="1-7-1-Order-By"><a href="#1-7-1-Order-By" class="headerlink" title="1.7.1 Order By"></a>1.7.1 Order By</h4><p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">colOrder: ( <span class="keyword">ASC</span> <span class="operator">|</span> <span class="keyword">DESC</span> )</span><br><span class="line">colNullOrder: (NULLS <span class="keyword">FIRST</span> <span class="operator">|</span> NULLS <span class="keyword">LAST</span>)           <span class="comment">-- (<span class="doctag">Note:</span> Available in Hive 2.1.0 and later)</span></span><br><span class="line">orderBy: <span class="keyword">ORDER</span> <span class="keyword">BY</span> colName colOrder? colNullOrder? (<span class="string">&#x27;,&#x27;</span> colName colOrder? colNullOrder?)<span class="operator">*</span></span><br><span class="line">query: <span class="keyword">SELECT</span> expression (<span class="string">&#x27;,&#x27;</span> expression)<span class="operator">*</span> <span class="keyword">FROM</span> src orderBy</span><br></pre></td></tr></table></figure>

<p>Order By子句存在一些限制，在严格模式下(设置 hive.mapred.mode&#x3D;strict)，Order By子句后必须跟着一个Limit子句。如果没有设置严格模式的话Limit子句就不是必需的。原因是为了强制得到所有结果的总顺序，必须有一个reducer来对最终结果分类。如果输出行数非常多，则单个reducer可能会执行非常长的时间。</p>
<p>模式的排序顺序是增序（ascending，ASC）。</p>
<p>在Hive 2.1.0版本以后，支持在Order By子句中为每一列指定空的排序顺序。ASC顺序的默认空排序顺序是NULLS FIRST，而DESC顺序的默认空排序顺序是NULLS LAST。</p>
<p>在Hive 3.0.0之后，没有Limit 的Order By子句在子查询和视图中将被优化器移除，要防止这种情况，可以将<code>hive.remove.orderby.in.subquery</code>设置为false。</p>
<h4 id="1-7-2-Sort-By"><a href="#1-7-2-Sort-By" class="headerlink" title="1.7.2 Sort By"></a>1.7.2 Sort By</h4><p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">colOrder: ( <span class="keyword">ASC</span> <span class="operator">|</span> <span class="keyword">DESC</span> )</span><br><span class="line">sortBy: SORT <span class="keyword">BY</span> colName colOrder? (<span class="string">&#x27;,&#x27;</span> colName colOrder?)<span class="operator">*</span></span><br><span class="line">query: <span class="keyword">SELECT</span> expression (<span class="string">&#x27;,&#x27;</span> expression)<span class="operator">*</span> <span class="keyword">FROM</span> src sortBy</span><br></pre></td></tr></table></figure>

<p>Hive使用SORT BY中的列对行进行排序，然后再将行输入reducer。分类顺序取决于列的类型。如果列是数值类型的，那么分类顺序也是按照数值顺序。如果列是string类型的，则分类顺序将是辞典编纂的循序（字典顺序）。</p>
<p>在Hive 3.0.0之后，没有Limit 的Sort By子句在子查询和视图中将被优化器移除，要防止这种情况，可以将<code>hive.remove.orderby.in.subquery</code>设置为false。</p>
<h4 id="1-7-3-Sort-By-和-Order-By的不同点"><a href="#1-7-3-Sort-By-和-Order-By的不同点" class="headerlink" title="1.7.3 Sort By 和 Order By的不同点"></a>1.7.3 Sort By 和 Order By的不同点</h4><p>“order by”和“sort by”之间的区别是，前者保证输出的总顺序，而后者仅保证reducer内的行排序。如果有多个reducer，“sort by”可能会给出部分排序的最终结果。</p>
<p>单个列的SORT BY和CLUSTER BY之间的区别可能会令人困惑。不同之处在于CLUSTER BY是按字段进行分区，而SORT BY是在多个reducer之间随机分配数据(和加载)的情况下进行的。</p>
<p>总的来说，每个reducer中的数据将按使用者提供的顺序来分类。下面是一个例子：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> key, <span class="keyword">value</span> <span class="keyword">FROM</span> src SORT <span class="keyword">BY</span> key <span class="keyword">ASC</span>, <span class="keyword">value</span> <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>

<p>查询有两个reducer，每一个的输出分别为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>   <span class="number">5</span></span><br><span class="line"><span class="number">0</span>   <span class="number">3</span></span><br><span class="line"><span class="number">3</span>   <span class="number">6</span></span><br><span class="line"><span class="number">9</span>   <span class="number">1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>   <span class="number">4</span></span><br><span class="line"><span class="number">0</span>   <span class="number">3</span></span><br><span class="line"><span class="number">1</span>   <span class="number">1</span></span><br><span class="line"><span class="number">2</span>   <span class="number">5</span></span><br></pre></td></tr></table></figure>

<h4 id="1-7-4-为Sort-By设置类型"><a href="#1-7-4-为Sort-By设置类型" class="headerlink" title="1.7.4 为Sort By设置类型"></a>1.7.4 为Sort By设置类型</h4><p>在TRANSFORM之后，变量类型通常被认为是字符串，这意味着数字数据将按字典顺序排序。为了克服这个问题，可以在使用SORT BY之前再使用带强制转换的SELECT语句。例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> (<span class="keyword">FROM</span> (<span class="keyword">FROM</span> src</span><br><span class="line">            <span class="keyword">SELECT</span> TRANSFORM(<span class="keyword">value</span>)</span><br><span class="line">            <span class="keyword">USING</span> <span class="string">&#x27;mapper&#x27;</span></span><br><span class="line">            <span class="keyword">AS</span> <span class="keyword">value</span>, count) mapped</span><br><span class="line">      <span class="keyword">SELECT</span> <span class="built_in">cast</span>(<span class="keyword">value</span> <span class="keyword">as</span> <span class="keyword">double</span>) <span class="keyword">AS</span> <span class="keyword">value</span>, <span class="built_in">cast</span>(count <span class="keyword">as</span> <span class="type">int</span>) <span class="keyword">AS</span> count</span><br><span class="line">      SORT <span class="keyword">BY</span> <span class="keyword">value</span>, count) sorted</span><br><span class="line"><span class="keyword">SELECT</span> TRANSFORM(<span class="keyword">value</span>, count)</span><br><span class="line"><span class="keyword">USING</span> <span class="string">&#x27;reducer&#x27;</span></span><br><span class="line"><span class="keyword">AS</span> whatever</span><br></pre></td></tr></table></figure>

<h4 id="1-7-5-Cluster-By-and-Distribute-By"><a href="#1-7-5-Cluster-By-and-Distribute-By" class="headerlink" title="1.7.5 Cluster By and Distribute By"></a>1.7.5 Cluster By and Distribute By</h4><p>Cluster By 和 Distribute By主要是和Transform&#x2F;Map-Reduce 脚本一起使用。如果需要为后续查询对查询的输出进行分区和排序，那么在SELECT语句中它有时是有用的。</p>
<p>Cluster By 是对 Distribute By 和 Sort By的一种简化方式。</p>
<p>Hive 在Distribute By 中使用列来把行分配给reducers。有相同Distribute By列 的行会分配到同一个reducer中。但是，Distribute By无法保证分配的列上的clustering 或 sorting 的属性。</p>
<p>例如，使用Distribute By x将下面的五行数据分配给两个reducer：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x1</span><br><span class="line">x2</span><br><span class="line">x4</span><br><span class="line">x3</span><br><span class="line">x1</span><br></pre></td></tr></table></figure>

<p>Reducer1得到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x1</span><br><span class="line">x2</span><br><span class="line">x1</span><br></pre></td></tr></table></figure>

<p>Reducer2得到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x4</span><br><span class="line">x3</span><br></pre></td></tr></table></figure>

<p>注意到拥有相同键值x1的两行被分配到了同一个reducer中，但是它们不能够保证聚集到了相邻的位置。</p>
<p>相反地，如果使用Cluster By x，两个reducer会对x的行做进一步的排序：</p>
<p>Reducer1得到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x1</span><br><span class="line">x1</span><br><span class="line">x2</span><br></pre></td></tr></table></figure>

<p>Reducer2得到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x3</span><br><span class="line">x4</span><br></pre></td></tr></table></figure>

<p>使用者可以指定 Distribute By 和 Sort By来代替Cluster By，所以分区列和分类列可以不同。通常的情况是分区列在分类列前面，即先分区再分类，但这不是必需的。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> col1, col2 <span class="keyword">FROM</span> t1 CLUSTER <span class="keyword">BY</span> col1</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> col1, col2 <span class="keyword">FROM</span> t1 DISTRIBUTE <span class="keyword">BY</span> col1</span><br><span class="line"> </span><br><span class="line"><span class="keyword">SELECT</span> col1, col2 <span class="keyword">FROM</span> t1 DISTRIBUTE <span class="keyword">BY</span> col1 SORT <span class="keyword">BY</span> col1 <span class="keyword">ASC</span>, col2 <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">  <span class="keyword">FROM</span> pv_users</span><br><span class="line">  MAP ( pv_users.userid, pv_users.date )</span><br><span class="line">  <span class="keyword">USING</span> <span class="string">&#x27;map_script&#x27;</span></span><br><span class="line">  <span class="keyword">AS</span> c1, c2, c3</span><br><span class="line">  DISTRIBUTE <span class="keyword">BY</span> c2</span><br><span class="line">  SORT <span class="keyword">BY</span> c2, c1) map_output</span><br><span class="line"><span class="keyword">INSERT</span> OVERWRITE <span class="keyword">TABLE</span> pv_users_reduced</span><br><span class="line">  REDUCE ( map_output.c1, map_output.c2, map_output.c3 )</span><br><span class="line">  <span class="keyword">USING</span> <span class="string">&#x27;reduce_script&#x27;</span></span><br><span class="line">  <span class="keyword">AS</span> <span class="type">date</span>, count;</span><br></pre></td></tr></table></figure>

<h3 id="1-8-TRANSFORM-和-Map-Reduce-脚本-（暂不研究）"><a href="#1-8-TRANSFORM-和-Map-Reduce-脚本-（暂不研究）" class="headerlink" title="1.8 TRANSFORM 和 Map-Reduce 脚本  （暂不研究）"></a>1.8 TRANSFORM 和 Map-Reduce 脚本  （暂不研究）</h3><h3 id="1-9-运算符和用户自定义函数-未完待续"><a href="#1-9-运算符和用户自定义函数-未完待续" class="headerlink" title="1.9 运算符和用户自定义函数  (未完待续)"></a>1.9 运算符和用户自定义函数  (未完待续)</h3><h4 id="内置运算符："><a href="#内置运算符：" class="headerlink" title="内置运算符："></a>内置运算符：</h4><ul>
<li>运算符优先级</li>
</ul>
<table>
<thead>
<tr>
<th>示例</th>
<th>运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>A[B] , A.identifier</td>
<td>中括号([]), 点(.)</td>
<td>元素选择</td>
</tr>
<tr>
<td>-A</td>
<td>一元运算符，正号(+),负号(-),取反码(~)</td>
<td>前置一元运算符</td>
</tr>
<tr>
<td>A IS [NOT] (NULL|TRUE|FALSE)</td>
<td>IS NULL,IS NOT NULL, …</td>
<td>后置一元运算符</td>
</tr>
<tr>
<td>A ^ B</td>
<td>按位亦或(^)</td>
<td>按位亦或</td>
</tr>
<tr>
<td>A * B</td>
<td>乘(*), 除(&#x2F;), 取余(%), 整除(DIV)</td>
<td>乘除运算</td>
</tr>
<tr>
<td>A + B</td>
<td>加(+), 减(-)</td>
<td>加减运算</td>
</tr>
<tr>
<td>A || B</td>
<td>字符串连接(||)</td>
<td>字符串连接</td>
</tr>
<tr>
<td>A &amp; B</td>
<td>按位与(&amp;)</td>
<td>按位与</td>
</tr>
<tr>
<td>A | B</td>
<td>按位或(|)</td>
<td>按位或</td>
</tr>
</tbody></table>
<ul>
<li>关系运算符</li>
</ul>
<table>
<thead>
<tr>
<th>运算符</th>
<th>操作类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>A &#x3D; B</td>
<td>所有基本类型</td>
<td>A等于B返回true，否则返回false</td>
</tr>
<tr>
<td>A &#x3D;&#x3D; B</td>
<td>所有基本类型</td>
<td>相等，等号的同义词</td>
</tr>
<tr>
<td>A &lt;&#x3D;&gt; B</td>
<td>所有基本类型</td>
<td>操作数非空时和 ‘&#x3D;’ 运算符返回相同的结果，当两个操作数都为空时返回true，当有一个操作数为空时返回false，(Hive 0.9.0 版本起用)</td>
</tr>
<tr>
<td>A &lt;&gt; B</td>
<td>所有基本类型</td>
<td>当A或B中有一个为NULL时返回NULL，当A不等于B时返回TRUE，否则返回FALSE。</td>
</tr>
<tr>
<td>A !&#x3D; B</td>
<td>所有基本类型</td>
<td>同”&lt;&gt;”运算符</td>
</tr>
<tr>
<td>A &lt; B</td>
<td>所有基本类型</td>
<td>当A或B中有一个为NULL时返回NULL，当A小于B时返回TRUE，否则返回FALSE。</td>
</tr>
<tr>
<td>A &lt;&#x3D; B</td>
<td>所有基本类型</td>
<td>当A或B中有一个为NULL时返回NULL，当A小于等于B时返回TRUE，否则返回FALSE。</td>
</tr>
<tr>
<td>A &gt; B</td>
<td>所有基本类型</td>
<td>当A或B中有一个为NULL时返回NULL，当A大于B时返回TRUE，否则返回FALSE。</td>
</tr>
<tr>
<td>A &gt;&#x3D; B</td>
<td>所有基本类型</td>
<td>当A或B中有一个为NULL时返回NULL，当A大于等于B时返回TRUE，否则返回FALSE。</td>
</tr>
<tr>
<td>A [NOT] BETWEEN B AND C</td>
<td>所有基本类型</td>
<td>当A，B，C中任意一个为NULL时返回NULL，当A大于等于B且小于等于C时返回TRUE，否则返回FALSE。可以使用NOT关键字得到相反结果。(Hive 0.9.0 起用)</td>
</tr>
<tr>
<td>A IS NULL</td>
<td>所有类型</td>
<td>A为NULL时返回TRUE，否则返回FALSE.</td>
</tr>
<tr>
<td>A IS NOT NULL</td>
<td>所有类型</td>
<td>A不为NULL时返回TRUE，否则返回FALSE.</td>
</tr>
<tr>
<td>A IS [NOT] (TRUE|FALSE)</td>
<td>布尔类型</td>
<td>只有满足判断条件时返回TRUE。(自Hive 3.0.0 起用）注意，NULL是未知的，当要判断NULL的布尔属性时，返回FALSE。</td>
</tr>
<tr>
<td>A [NOT] LIKE B</td>
<td>字符串</td>
<td>如果A或B为NULL，则为NULL，如果字符串A匹配SQL简单正则表达式B，则为TRUE，否则为FALSE。比较是逐个字符进行的。B中的下划线字符匹配A中的任何字符。而B中的%字符匹配A中的任意数量的字符(类似于posix正则表达式中的.*)。例如，’foobar’ LIKE ‘foo’的计算结果为FALSE，而’foobar’ LIKE ‘foo_ _ _’的计算结果为TRUE， ‘foobar’ LIKE ‘foo%’的计算结果也是TRUE。</td>
</tr>
<tr>
<td>A RLIKE B</td>
<td>字符串</td>
<td>如果A或B为NULL，则为NULL，如果A的任何子字符串(可能为空)匹配Java正则表达式B，则为TRUE，否则为FALSE。例如，’foobar’ RLIKE ‘foo’的计算结果为TRUE， ‘foobar’ RLIKE ‘^f.*r$’也是如此。</td>
</tr>
<tr>
<td>A REGEXP B</td>
<td>字符串</td>
<td>同RLIKE。</td>
</tr>
</tbody></table>
<h3 id="1-10-XPath函数（暂不研究）"><a href="#1-10-XPath函数（暂不研究）" class="headerlink" title="1.10 XPath函数（暂不研究）"></a>1.10 XPath函数（暂不研究）</h3><h3 id="1-11-连接-join"><a href="#1-11-连接-join" class="headerlink" title="1.11 连接(join)"></a>1.11 连接(join)</h3><p>Hive 支持如下的表连接语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">join_table:</span><br><span class="line">    table_reference [<span class="keyword">INNER</span>] <span class="keyword">JOIN</span> table_factor [join_condition]</span><br><span class="line">  <span class="operator">|</span> table_reference &#123;<span class="keyword">LEFT</span><span class="operator">|</span><span class="keyword">RIGHT</span><span class="operator">|</span><span class="keyword">FULL</span>&#125; [<span class="keyword">OUTER</span>] <span class="keyword">JOIN</span> table_reference join_condition</span><br><span class="line">  <span class="operator">|</span> table_reference <span class="keyword">LEFT</span> SEMI <span class="keyword">JOIN</span> table_reference join_condition</span><br><span class="line">  <span class="operator">|</span> table_reference <span class="keyword">CROSS</span> <span class="keyword">JOIN</span> table_reference [join_condition] (<span class="keyword">as</span> <span class="keyword">of</span> Hive <span class="number">0.10</span>)</span><br><span class="line"> </span><br><span class="line">table_reference:</span><br><span class="line">    table_factor</span><br><span class="line">  <span class="operator">|</span> join_table</span><br><span class="line"> </span><br><span class="line">table_factor:</span><br><span class="line">    tbl_name [alias]</span><br><span class="line">  <span class="operator">|</span> table_subquery alias</span><br><span class="line">  <span class="operator">|</span> ( table_references )</span><br><span class="line"> </span><br><span class="line">join_condition:</span><br><span class="line">    <span class="keyword">ON</span> expression</span><br></pre></td></tr></table></figure>

<ul>
<li>版本相关：</li>
</ul>
<blockquote>
<p>从Hive 0.13.0开始支持隐式连接表示。这允许FROM子句连接以逗号分隔的表列表，省略join关键字。例如:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> table1 t1, table2 t2, table3 t3</span><br><span class="line"><span class="keyword">WHERE</span> t1.id <span class="operator">=</span> t2.id <span class="keyword">AND</span> t2.id <span class="operator">=</span> t3.id <span class="keyword">AND</span> t1.zipcode <span class="operator">=</span> <span class="string">&#x27;02535&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>从Hive 0.13.0开始，连接条件中支持非限定列引用。Hive尝试根据连接的输入来解决这些问题。如果非限定列引用解析为多个表，Hive将其标记为不明确引用。例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> a (k1 string, v1 string);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> b (k2 string, v2 string);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> k1, v1, k2, v2</span><br><span class="line"><span class="keyword">FROM</span> a <span class="keyword">JOIN</span> b <span class="keyword">ON</span> k1 <span class="operator">=</span> k2; </span><br></pre></td></tr></table></figure>

<p>从Hive 2.2.0开始支持ON子句中的复杂表达式。在此之前，Hive不支持非相等条件的连接条件。特别地，连接条件的语法被限制如下:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">join_condition:</span><br><span class="line">    <span class="keyword">ON</span> equality_expression ( <span class="keyword">AND</span> equality_expression )<span class="operator">*</span></span><br><span class="line"></span><br><span class="line">equality_expression:</span><br><span class="line">    expression <span class="operator">=</span> expression</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="一些示例："><a href="#一些示例：" class="headerlink" title="一些示例："></a>一些示例：</h4><p>在编写连接查询时需要考虑的一些要点如下:</p>
<ul>
<li>允许复杂的连接表达式，如：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.<span class="operator">*</span> <span class="keyword">FROM</span> a <span class="keyword">JOIN</span> b <span class="keyword">ON</span> (a.id <span class="operator">=</span> b.id)</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.<span class="operator">*</span> <span class="keyword">FROM</span> a <span class="keyword">JOIN</span> b <span class="keyword">ON</span> (a.id <span class="operator">=</span> b.id <span class="keyword">AND</span> a.department <span class="operator">=</span> b.department)</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.<span class="operator">*</span> <span class="keyword">FROM</span> a <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> b <span class="keyword">ON</span> (a.id <span class="operator">&lt;&gt;</span> b.id)</span><br></pre></td></tr></table></figure>

<ul>
<li>多个表可以通过查询连接在一起，如：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.val, b.val, c.val <span class="keyword">FROM</span> a <span class="keyword">JOIN</span> b <span class="keyword">ON</span> (a.key <span class="operator">=</span> b.key1) <span class="keyword">JOIN</span> c <span class="keyword">ON</span> (c.key <span class="operator">=</span> b.key2)</span><br></pre></td></tr></table></figure>

<ul>
<li>如果在每个表的join子句中使用了相同的列，那么Hive会将多个表的连接转换为一个map&#x2F;reduce任务,如</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.val, b.val, c.val <span class="keyword">FROM</span> a <span class="keyword">JOIN</span> b <span class="keyword">ON</span> (a.key <span class="operator">=</span> b.key1) <span class="keyword">JOIN</span> c <span class="keyword">ON</span> (c.key <span class="operator">=</span> b.key1)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>被转换成了一个map&#x2F;reduce任务，因为连接时只涉及到了表b的key1列，另一种情况：</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.val, b.val, c.val <span class="keyword">FROM</span> a <span class="keyword">JOIN</span> b <span class="keyword">ON</span> (a.key <span class="operator">=</span> b.key1) <span class="keyword">JOIN</span> c <span class="keyword">ON</span> (c.key <span class="operator">=</span> b.key2)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>被转换成了两个map&#x2F;reduce任务，因为第一个连接使用了表b的key1列，第二个连接使用了表b的key2列，第一个map&#x2F;reduce任务将表a和b连接在了一起，第二个map&#x2F;reduce任务将第一个的连接结果与表c连接在了一起。</p>
</blockquote>
<ul>
<li>在连接的每个map&#x2F;reduce阶段，可以通过提示指定要流化的表 ：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="comment">/*+ STREAMTABLE(a) */</span> a.val, b.val, c.val <span class="keyword">FROM</span> a <span class="keyword">JOIN</span> b <span class="keyword">ON</span> (a.key <span class="operator">=</span> b.key1) <span class="keyword">JOIN</span> c <span class="keyword">ON</span> (c.key <span class="operator">=</span> b.key1)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>所有这三个表被连接到一个单独的map&#x2F;reduce作业中，表b和c的键的特定值被缓冲在reducer的内存中。然后，对于从a中检索到的每一行，使用缓冲的行计算连接。如果省略STREAMTABLE提示，Hive会将最右边的表在join时流化。</p>
</blockquote>
<ul>
<li><strong>左连接、右连接、全连接和外连接</strong>的存在是为了在ON子句匹配不到时提供更多的控制，例如，下面的查询</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.val, b.val <span class="keyword">FROM</span> a <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> b <span class="keyword">ON</span> (a.key<span class="operator">=</span>b.key)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>返回结果对应于a中的每一行，当a.key等于b.key时，返回行将包括a.val和b.val，不相等时，返回行的结果为a.val 和NULL。语句中”FROM a LEFT OUTER JOIN b”必须写在同一行内以便于理解连接过程——查询中a在b的左边，所以来自a的行都被保留；如果是RIGHT OUTER JOIN的话b的行将被全部保留；如果是FULL OUTER JOIN的话，来自a和b的行都会被全部保留。外连接OUTER JOIN的语法应该符合标准的SQL规范。</p>
</blockquote>
<ul>
<li>连接发生在WHERE子句之前。如果想要对连接结果做过滤，则应该在WHERE子句中进行条件约束，否则应该约束应该在join子句中(实际上是ON子句可以约束连接的输出)。涉及到这个问题的一个点是分区表:</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.val, b.val <span class="keyword">FROM</span> a <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> b <span class="keyword">ON</span> (a.key<span class="operator">=</span>b.key)</span><br><span class="line"><span class="keyword">WHERE</span> a.ds<span class="operator">=</span><span class="string">&#x27;2009-07-07&#x27;</span> <span class="keyword">AND</span> b.ds<span class="operator">=</span><span class="string">&#x27;2009-07-07&#x27;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如上述语句，a表和b表做左连接，产生一个含有a.val 和 b.val的列表，ds是分区列。因为是左连接，所以a是主表，连接过程中对应不到a.key 的b的连接部分将被置为NULL，包括分区列ds。而在WHERE子句中使用分区列对连接结果进行了过滤，此时由于a和b没有匹配到的行中b的部分为NULL(包括b.ds),所以这些没有成功匹配的行会被WHERE子句过滤掉，最终的结果不是左连接的结果，因为WHERE破坏了左连接的约束。如果想要在连接时增加过滤条件，应该按下面这样写：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.val, b.val <span class="keyword">FROM</span> a <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> b</span><br><span class="line"><span class="keyword">ON</span> (a.key<span class="operator">=</span>b.key <span class="keyword">AND</span> b.ds<span class="operator">=</span><span class="string">&#x27;2009-07-07&#x27;</span> <span class="keyword">AND</span> a.ds<span class="operator">=</span><span class="string">&#x27;2009-07-07&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>连接结果在连接过程中已经进行了过滤，不会出现查询完再过滤所产生的问题。同样的逻辑适用于右连接和全连接。</p>
</blockquote>
<ul>
<li>连接是不可交换的！连接是左关联的，无论是左连接还是右连接。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.val1, a.val2, b.val, c.val</span><br><span class="line"><span class="keyword">FROM</span> a</span><br><span class="line"><span class="keyword">JOIN</span> b <span class="keyword">ON</span> (a.key <span class="operator">=</span> b.key)</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> c <span class="keyword">ON</span> (a.key <span class="operator">=</span> c.key)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>首先a连接b(内连接)，按连接条件只保留全部匹配的行。连接后形成的表再连接c。如果一个用于连接条件的key在表a和表c中都有，但表b中没有，将产生意料之外的结果：由于b没有与a匹配的key，这些行在a和b连接时就被过滤掉了，所以ab连接结果中也没有a表中的这个key，当ab连接结果与c表左连接时，c中这个key的行也匹配不到，因为a和b的连接结果中没有这个key（连接时被过滤掉了）。类似地，如果现在是右连接，对于c的有这个key的行来说，匹配结果将是NULL，NULL，NULL，c.val.因为即使我们指定了a.key &#x3D; c.key作为连接条件，在第一次连接时由于没有匹配到，这个key已经被过滤掉了。为了得到更为直观的效果，应该改为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> c <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> a <span class="keyword">ON</span> (c.key <span class="operator">=</span> a.key) <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> b <span class="keyword">ON</span> (c.key <span class="operator">=</span> b.key)。</span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li>LEFT SEMI JOIN(左半连接)以一种有效的方式实现了不相关的 IN&#x2F;EXISTS子查询语法。在Hive 0.13版本中，子查询支持IN&#x2F;NOT IN&#x2F;EXISTS&#x2F;NOT EXISTS操作符，因此大多数join操作不再需要手动执行。使用LEFT SEMI JOIN的限制是，右边的表只能在连接条件(on -子句)中引用，而不能在WHERE子句或select 子句等中引用。例如：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.key, a.value</span><br><span class="line"><span class="keyword">FROM</span> a</span><br><span class="line"><span class="keyword">WHERE</span> a.key <span class="keyword">in</span></span><br><span class="line"> (<span class="keyword">SELECT</span> b.key</span><br><span class="line">  <span class="keyword">FROM</span> B);</span><br></pre></td></tr></table></figure>

<p>可以被写为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.key, a.val</span><br><span class="line"><span class="keyword">FROM</span> a <span class="keyword">LEFT</span> SEMI <span class="keyword">JOIN</span> b <span class="keyword">ON</span> (a.key <span class="operator">=</span> b.key)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>如果参与连接的表(除了一个以外)都很小，那么连接可以写成一个仅有map的连接，下面的查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="comment">/*+ MAPJOIN(b) */</span> a.key, a.value</span><br><span class="line"><span class="keyword">FROM</span> a <span class="keyword">JOIN</span> b <span class="keyword">ON</span> a.key <span class="operator">=</span> b.key</span><br></pre></td></tr></table></figure>

<p>不需要reducer。因为对于每一个A的映射，B都会整个儿地读一遍。这样做的限制就是无法实现 a FULL&#x2F;RIGHT OUTER JOIN b。</p>
</li>
</ul>
<p><strong>！！！！！！MAPJOIN知识待补充！！！！！！！！</strong></p>
<ul>
<li><p>如果连接表的连接列是时分桶列，并且一个表中的桶数是另一个表中的桶数的倍数，那么这些桶可以相互联接。假如表A有四个分桶，表B也有四个分桶，下面的连接：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="comment">/*+ MAPJOIN(b) */</span> a.key, a.value</span><br><span class="line"><span class="keyword">FROM</span> a <span class="keyword">JOIN</span> b <span class="keyword">ON</span> a.key <span class="operator">=</span> b.key</span><br></pre></td></tr></table></figure>

<p>只能通过映射器mapper来完成。只需获取需要的桶，而不必为了A的每个映射器来完全获取B。拿上面的查询来说，处理A的桶1的映射器将只获取b的桶1，这种行为不是默认的，而是由以下的参数来控制的：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> hive.optimize.bucketmapjoin <span class="operator">=</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果两个表的连接列被用来分类sort和分桶，并且它们有相同数量的桶，则可以执行排序-合并连接(sort-merge)。对应的桶将在映射器上互相连接，如果A和B都有四个桶：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="comment">/*+ MAPJOIN(b) */</span> a.key, a.value</span><br><span class="line"><span class="keyword">FROM</span> A a <span class="keyword">JOIN</span> B b <span class="keyword">ON</span> a.key <span class="operator">=</span> b.key</span><br></pre></td></tr></table></figure>

<p>上面的查询只能通过映射器来实现。A桶的映射器将会遍历B桶。这也不是默认行为，需要进行如下设置：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> hive.input.format<span class="operator">=</span>org.apache.hadoop.hive.ql.io.BucketizedHiveInputFormat;</span><br><span class="line"><span class="keyword">set</span> hive.optimize.bucketmapjoin <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">set</span> hive.optimize.bucketmapjoin.sortedmerge <span class="operator">=</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="MapJoin的限制"><a href="#MapJoin的限制" class="headerlink" title="MapJoin的限制"></a>MapJoin的限制</h4><ul>
<li><p>如果参与连接的表(除了一个以外)都很小，那么连接可以写成一个仅有map的连接，下面的查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="comment">/*+ MAPJOIN(b) */</span> a.key, a.value</span><br><span class="line"><span class="keyword">FROM</span> a <span class="keyword">JOIN</span> b <span class="keyword">ON</span> a.key <span class="operator">=</span> b.key</span><br></pre></td></tr></table></figure>

<p>不需要reducer。因为对于每一个A的映射，B都会被完整地读一遍。</p>
</li>
<li><p>以下是一些不受支持的行为：</p>
<ul>
<li>Union后接MapJoin</li>
<li>Lateral View后接MapJoin</li>
<li>Reduce Sink (Group By&#x2F;Join&#x2F;Sort By&#x2F;Cluster By&#x2F;Distribute By) 后接MapJoin</li>
<li>MapJoin后接Union</li>
<li>MapJoin后接Join</li>
<li>MapJoin后接MapJoin</li>
</ul>
</li>
<li><p>在一般情况下，配置变量<code>hive.auto.convert.join</code>如果为true，运行时joins操作将会自动转换为mapjoins操作，应以此种方式代替上面的mapjoins提示使用方法，mapjoins提示只能用于以下的查询方式：</p>
<ul>
<li>如果输入是分桶或者分类的，join应该转换为分桶的map-side join 或者分桶的 sort-merge join.</li>
</ul>
</li>
<li><p>考虑一种多个mapjoin在不同key上的可能情况：</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="comment">/*+MAPJOIN(smallTableTwo)*/</span> idOne, idTwo, <span class="keyword">value</span> <span class="keyword">FROM</span></span><br><span class="line">  ( <span class="keyword">select</span> <span class="comment">/*+MAPJOIN(smallTableOne)*/</span> idOne, idTwo, <span class="keyword">value</span> <span class="keyword">FROM</span></span><br><span class="line">    bigTable <span class="keyword">JOIN</span> smallTableOne <span class="keyword">on</span> (bigTable.idOne <span class="operator">=</span> smallTableOne.idOne)                                                  </span><br><span class="line">  ) firstjoin                                                            </span><br><span class="line">  <span class="keyword">JOIN</span>                                                                 </span><br><span class="line">  smallTableTwo <span class="keyword">ON</span> (firstjoin.idTwo <span class="operator">=</span> smallTableTwo.idTwo)   </span><br></pre></td></tr></table></figure>

<p><em><strong>下面三段来自机器翻译</strong></em> </p>
<p>不支持上述查询。如果没有mapjoin提示，上面的查询将作为2个只包含map的作业执行。如果用户事先知道输入足够小，可以放入内存中，那么可以使用以下可配置参数来确保查询在单个map-reduce作业中执行。</p>
<ul>
<li><p>Hive .auto.convert.join.noconditionaltask - Hive是否根据输入文件大小对普通连接转换为mapjoin进行优化。如果该参数是开启的，并且n-1个表&#x2F;分区的大小之和小于指定的大小，则连接将直接转换为mapjoin(没有条件任务)。</p>
</li>
<li><p>hive.auto.convert.join.noconditionaltask.size—如果hive.auto.convert.join.noconditionaltask是关闭的，则该参数不生效。但是，如果它是开启的，并且n-1个表&#x2F;分区的大小之和小于这个大小，那么这个连接将直接转换为映射连接(没有条件任务)。默认是10MB。</p>
</li>
</ul>
<h3 id="1-12-jion优化（暂不研究）"><a href="#1-12-jion优化（暂不研究）" class="headerlink" title="1.12 jion优化（暂不研究）"></a>1.12 jion优化（暂不研究）</h3><h4 id="1-12-1-Hive优化器的改进"><a href="#1-12-1-Hive优化器的改进" class="headerlink" title="1.12.1 Hive优化器的改进"></a>1.12.1 Hive优化器的改进</h4><p>版本信息：</p>
<blockquote>
<p>join优化自Hive 0.11.0开始引入。</p>
</blockquote>
<p>Hive自动识别变量的使用场景并优化它们，Hive 0.11版本起，优化器在一下情形中做出了改进：</p>
<blockquote>
</blockquote>
<h3 id="1-13-联合-Union"><a href="#1-13-联合-Union" class="headerlink" title="1.13 联合(Union)"></a>1.13 联合(Union)</h3><ul>
<li>Union语法</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">select_statement <span class="keyword">UNION</span> [<span class="keyword">ALL</span> <span class="operator">|</span> <span class="keyword">DISTINCT</span>] select_statement <span class="keyword">UNION</span> [<span class="keyword">ALL</span> <span class="operator">|</span> <span class="keyword">DISTINCT</span>] select_statement ...</span><br></pre></td></tr></table></figure>

<p>语法解析：</p>
<blockquote>
<p>Union用于将多个select语句的结果联合成一个结果集。</p>
<ul>
<li>1.2.0之前的Hive版本仅支持UNION ALL,不排除重复行。</li>
<li>在Hive 1.2.0及之后，UNION默认将重复行从结果集中移除。可选关键字DISTINCT和这种默认情形没有区别，因为它也是确认和移除重复行。如果带有可选关键字ALL，重复行不再移除，结果集中包含所有select语句的所有匹配行。</li>
</ul>
<p>可以将UNION ALL 和 UNION DISTINCT在同一个查询中混合使用。在混合的Union类型中，DISTINCT union 会把它左边的 ALL union都覆盖掉。</p>
</blockquote>
]]></content>
      <categories>
        <category>Hadoop</category>
        <category>Hive</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Hive</tag>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Hive语法精炼</title>
    <url>/Hadoop/Hive/Hive%E8%AF%AD%E6%B3%95%E7%B2%BE%E7%82%BC/</url>
    <content><![CDATA[<h1 id="Hive语法精炼"><a href="#Hive语法精炼" class="headerlink" title="Hive语法精炼"></a>Hive语法精炼</h1><p>以下语法精简可用，但不一定是最全的语法格式，某些可选项可能被忽略，随时补充。</p>
<ul>
<li><p>查看数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database [if <span class="keyword">not</span> <span class="keyword">exists</span>] database_name;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> database [if <span class="keyword">exists</span>] database_name;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Hadoop</category>
        <category>Hive</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Hive</tag>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Hive基本语法</title>
    <url>/Hadoop/Hive/Hive%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="Hive-基本语法"><a href="#Hive-基本语法" class="headerlink" title="Hive 基本语法"></a>Hive 基本语法</h1><h2 id="一、DDL"><a href="#一、DDL" class="headerlink" title="一、DDL"></a>一、DDL</h2><h3 id="1-数据库操作"><a href="#1-数据库操作" class="headerlink" title="1. 数据库操作"></a>1. 数据库操作</h3><h4 id="1-1-创建数据库"><a href="#1-1-创建数据库" class="headerlink" title="1.1 创建数据库"></a>1.1 创建数据库</h4><p>语法格式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [REMOTE] (DATABASE<span class="operator">|</span>SCHEMA) [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] database_name</span><br><span class="line">  [COMMENT database_comment]<span class="comment">-- 数据库注释信息</span></span><br><span class="line">  [LOCATION hdfs_path] <span class="comment">-- 内部表数据存储路径 在hive4.0版本一下内外部表都用此命令设置存储路径</span></span><br><span class="line">  [MANAGEDLOCATION hdfs_path] <span class="comment">-- 外部表存储路径 hive4.0版本后可用</span></span><br><span class="line">  [<span class="keyword">WITH</span> DBPROPERTIES (property_name<span class="operator">=</span>property_value, ...)]; <span class="comment">-- 指派自定义属性</span></span><br></pre></td></tr></table></figure>

<p><strong>自己指定的的位置的话,在hdfs上面生成的数据库路径文件夹是没有.db,使用默认路径生成的数据库路径文件夹有.db</strong></p>
<p>具体实例如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> shopping</span><br><span class="line">COMMENT `stores <span class="keyword">all</span> shopping basket data`</span><br><span class="line">LOCATION `<span class="operator">/</span><span class="keyword">user</span><span class="operator">/</span>retail<span class="operator">/</span>hive<span class="operator">/</span>SHOPPING.db`</span><br><span class="line"><span class="keyword">WITH</span> PROPERTIES (<span class="string">&#x27;purpose&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;testing&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="1-2-删除数据库"><a href="#1-2-删除数据库" class="headerlink" title="1.2 删除数据库"></a>1.2 删除数据库</h4><p>语法格式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> (DATABASE<span class="operator">|</span>SCHEMA) [IF <span class="keyword">EXISTS</span>] database_name [RESTRICT<span class="operator">|</span>CASCADE];</span><br></pre></td></tr></table></figure>

<blockquote>
<p>若选择RESTRICT，该表的删除是有限制条件的。该表不能被其他表的约束所引用（如CHECK，FOREIGN KEY等约束），不能有触发器，不能有视图，不能有函数和存储过程等。如果该表存在这些依赖的对象，此表不能删除。	</p>
<p>若选择CASCADE，该表的删除没有限制条件。在删除基本表的同时，相关的依赖对象将会被一起删除。<br>​</p>
<p>默认是RESTRICT</p>
</blockquote>
<h4 id="1-3-修改数据库"><a href="#1-3-修改数据库" class="headerlink" title="1.3 修改数据库"></a>1.3 修改数据库</h4><p>语法格式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> (DATABASE<span class="operator">|</span>SCHEMA) database_name <span class="keyword">SET</span> DBPROPERTIES (property_name<span class="operator">=</span>property_value, ...);   <span class="comment">-- (<span class="doctag">Note:</span> SCHEMA added in Hive 0.14.0) 修改元数据属性</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">ALTER</span> (DATABASE<span class="operator">|</span>SCHEMA) database_name <span class="keyword">SET</span> OWNER [<span class="keyword">USER</span><span class="operator">|</span>ROLE] user_or_role;   <span class="comment">-- (<span class="doctag">Note:</span> Hive 0.13.0 and later; SCHEMA added in Hive 0.14.0) 修改所有者</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">ALTER</span> (DATABASE<span class="operator">|</span>SCHEMA) database_name <span class="keyword">SET</span> LOCATION hdfs_path; <span class="comment">-- (<span class="doctag">Note:</span> Hive 2.2.1, 2.4.0 and later) 修改数据存储路径</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">ALTER</span> (DATABASE<span class="operator">|</span>SCHEMA) database_name <span class="keyword">SET</span> MANAGEDLOCATION hdfs_path; <span class="comment">-- (<span class="doctag">Note:</span> Hive 4.0.0 and later) </span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>DATABASE|SCHEMA (数据库|架构)，创建时二选一即可，这里它们是同义的。</p>
</blockquote>
<h4 id="1-4-选择数据库"><a href="#1-4-选择数据库" class="headerlink" title="1.4 选择数据库"></a>1.4 选择数据库</h4><p>语法格式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE database_name;</span><br><span class="line">USE <span class="keyword">DEFAULT</span>;</span><br></pre></td></tr></table></figure>



<h3 id="2-数据表操作"><a href="#2-数据表操作" class="headerlink" title="2. 数据表操作"></a>2. 数据表操作</h3><h4 id="2-1-创建表"><a href="#2-1-创建表" class="headerlink" title="2.1 创建表"></a>2.1 创建表</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [TEMPORARY] [<span class="keyword">EXTERNAL</span>] <span class="keyword">TABLE</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] [db_name.]table_name    <span class="comment">-- (<span class="doctag">Note:</span> TEMPORARY available in Hive 0.14.0 and later)</span></span><br><span class="line">  [(col_name data_type [column_constraint_specification] [COMMENT col_comment], ... [constraint_specification])]</span><br><span class="line">  [COMMENT table_comment]</span><br><span class="line">  [PARTITIONED <span class="keyword">BY</span> (col_name data_type [COMMENT col_comment], ...)]</span><br><span class="line">  [CLUSTERED <span class="keyword">BY</span> (col_name, col_name, ...) [SORTED <span class="keyword">BY</span> (col_name [<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>], ...)] </span><br><span class="line">   <span class="keyword">INTO</span> num_buckets BUCKETS]</span><br><span class="line">  [SKEWED <span class="keyword">BY</span> (col_name, col_name, ...) ]<span class="comment">-- (<span class="doctag">Note:</span> Available in Hive 0.10.0 and later)</span></span><br><span class="line">   <span class="keyword">ON</span> ((col_value, col_value, ...), (col_value, col_value, ...), ...) </span><br><span class="line">  [STORED <span class="keyword">AS</span> DIRECTORIES]</span><br><span class="line">  [</span><br><span class="line">   [<span class="type">ROW</span> FORMAT row_format] </span><br><span class="line">   [STORED <span class="keyword">AS</span> file_format]</span><br><span class="line">     <span class="operator">|</span> STORED <span class="keyword">BY</span> <span class="string">&#x27;storage.handler.class.name&#x27;</span> [<span class="keyword">WITH</span> SERDEPROPERTIES (...)]  <span class="comment">-- (<span class="doctag">Note:</span> Available in Hive 0.6.0 and later)</span></span><br><span class="line">  ]</span><br><span class="line">  [LOCATION hdfs_path]</span><br><span class="line">  [TBLPROPERTIES (property_name<span class="operator">=</span>property_value, ...)]   <span class="comment">-- (<span class="doctag">Note:</span> Available in Hive 0.6.0 and later)</span></span><br><span class="line">  [<span class="keyword">AS</span> select_statement];   <span class="comment">-- (<span class="doctag">Note:</span> Available in Hive 0.5.0 and later; not supported for external tables)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> [TEMPORARY] [<span class="keyword">EXTERNAL</span>] <span class="keyword">TABLE</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] [db_name.]table_name</span><br><span class="line">  <span class="keyword">LIKE</span> existing_table_or_view_name</span><br><span class="line">  [LOCATION hdfs_path];</span><br><span class="line"> </span><br><span class="line">data_type</span><br><span class="line">  : primitive_type</span><br><span class="line">  <span class="operator">|</span> array_type</span><br><span class="line">  <span class="operator">|</span> map_type</span><br><span class="line">  <span class="operator">|</span> struct_type</span><br><span class="line">  <span class="operator">|</span> union_type  <span class="comment">-- (<span class="doctag">Note:</span> Available in Hive 0.7.0 and later)</span></span><br><span class="line"> </span><br><span class="line">primitive_type</span><br><span class="line">  : TINYINT</span><br><span class="line">  <span class="operator">|</span> <span class="type">SMALLINT</span></span><br><span class="line">  <span class="operator">|</span> <span class="type">INT</span></span><br><span class="line">  <span class="operator">|</span> <span class="type">BIGINT</span></span><br><span class="line">  <span class="operator">|</span> <span class="type">BOOLEAN</span></span><br><span class="line">  <span class="operator">|</span> <span class="type">FLOAT</span></span><br><span class="line">  <span class="operator">|</span> <span class="keyword">DOUBLE</span></span><br><span class="line">  <span class="operator">|</span> <span class="type">DOUBLE PRECISION</span> <span class="comment">-- (<span class="doctag">Note:</span> Available in Hive 2.2.0 and later)</span></span><br><span class="line">  <span class="operator">|</span> STRING</span><br><span class="line">  <span class="operator">|</span> <span class="type">BINARY</span>      <span class="comment">-- (<span class="doctag">Note:</span> Available in Hive 0.8.0 and later)</span></span><br><span class="line">  <span class="operator">|</span> <span class="type">TIMESTAMP</span>   <span class="comment">-- (<span class="doctag">Note:</span> Available in Hive 0.8.0 and later)</span></span><br><span class="line">  <span class="operator">|</span> <span class="type">DECIMAL</span>     <span class="comment">-- (<span class="doctag">Note:</span> Available in Hive 0.11.0 and later)</span></span><br><span class="line">  <span class="operator">|</span> <span class="type">DECIMAL</span>(<span class="keyword">precision</span>, scale)  <span class="comment">-- (<span class="doctag">Note:</span> Available in Hive 0.13.0 and later)</span></span><br><span class="line">  <span class="operator">|</span> <span class="type">DATE</span>        <span class="comment">-- (<span class="doctag">Note:</span> Available in Hive 0.12.0 and later)</span></span><br><span class="line">  <span class="operator">|</span> <span class="type">VARCHAR</span>     <span class="comment">-- (<span class="doctag">Note:</span> Available in Hive 0.12.0 and later)</span></span><br><span class="line">  <span class="operator">|</span> <span class="type">CHAR</span>        <span class="comment">-- (<span class="doctag">Note:</span> Available in Hive 0.13.0 and later)</span></span><br><span class="line"> </span><br><span class="line">array_type</span><br><span class="line">  : <span class="keyword">ARRAY</span> <span class="operator">&lt;</span> data_type <span class="operator">&gt;</span></span><br><span class="line"> </span><br><span class="line">map_type</span><br><span class="line">  : MAP <span class="operator">&lt;</span> primitive_type, data_type <span class="operator">&gt;</span></span><br><span class="line"> </span><br><span class="line">struct_type</span><br><span class="line">  : STRUCT <span class="operator">&lt;</span> col_name : data_type [COMMENT col_comment], ...<span class="operator">&gt;</span></span><br><span class="line"> </span><br><span class="line">union_type</span><br><span class="line">   : UNIONTYPE <span class="operator">&lt;</span> data_type, data_type, ... <span class="operator">&gt;</span>  <span class="comment">-- (<span class="doctag">Note:</span> Available in Hive 0.7.0 and later)</span></span><br><span class="line"> </span><br><span class="line">row_format</span><br><span class="line">  : DELIMITED [FIELDS TERMINATED <span class="keyword">BY</span> <span class="type">char</span> [ESCAPED <span class="keyword">BY</span> <span class="type">char</span>]] [COLLECTION ITEMS TERMINATED <span class="keyword">BY</span> <span class="type">char</span>]</span><br><span class="line">        [MAP KEYS TERMINATED <span class="keyword">BY</span> <span class="type">char</span>] [LINES TERMINATED <span class="keyword">BY</span> <span class="type">char</span>]</span><br><span class="line">        [<span class="keyword">NULL</span> DEFINED <span class="keyword">AS</span> <span class="type">char</span>]   <span class="comment">-- (<span class="doctag">Note:</span> Available in Hive 0.13 and later)</span></span><br><span class="line">  <span class="operator">|</span> SERDE serde_name [<span class="keyword">WITH</span> SERDEPROPERTIES (property_name<span class="operator">=</span>property_value, property_name<span class="operator">=</span>property_value, ...)]</span><br><span class="line"> </span><br><span class="line">file_format:</span><br><span class="line">  : SEQUENCEFILE</span><br><span class="line">  <span class="operator">|</span> TEXTFILE    <span class="comment">-- (Default, depending on hive.default.fileformat configuration)</span></span><br><span class="line">  <span class="operator">|</span> RCFILE      <span class="comment">-- (<span class="doctag">Note:</span> Available in Hive 0.6.0 and later)</span></span><br><span class="line">  <span class="operator">|</span> ORC         <span class="comment">-- (<span class="doctag">Note:</span> Available in Hive 0.11.0 and later)</span></span><br><span class="line">  <span class="operator">|</span> PARQUET     <span class="comment">-- (<span class="doctag">Note:</span> Available in Hive 0.13.0 and later)</span></span><br><span class="line">  <span class="operator">|</span> AVRO        <span class="comment">-- (<span class="doctag">Note:</span> Available in Hive 0.14.0 and later)</span></span><br><span class="line">  <span class="operator">|</span> JSONFILE    <span class="comment">-- (<span class="doctag">Note:</span> Available in Hive 4.0.0 and later)</span></span><br><span class="line">  <span class="operator">|</span> INPUTFORMAT input_format_classname OUTPUTFORMAT output_format_classname</span><br><span class="line"> </span><br><span class="line">column_constraint_specification:</span><br><span class="line">  : [ <span class="keyword">PRIMARY</span> KEY<span class="operator">|</span><span class="keyword">UNIQUE</span><span class="operator">|</span><span class="keyword">NOT</span> <span class="keyword">NULL</span><span class="operator">|</span><span class="keyword">DEFAULT</span> [default_value]<span class="operator">|</span><span class="keyword">CHECK</span>  [check_expression] ENABLE<span class="operator">|</span>DISABLE NOVALIDATE RELY<span class="operator">/</span>NORELY ]</span><br><span class="line"> </span><br><span class="line">default_value:</span><br><span class="line">  : [ LITERAL<span class="operator">|</span><span class="built_in">CURRENT_USER</span>()<span class="operator">|</span><span class="built_in">CURRENT_DATE</span>()<span class="operator">|</span><span class="built_in">CURRENT_TIMESTAMP</span>()<span class="operator">|</span><span class="keyword">NULL</span> ] </span><br><span class="line"> </span><br><span class="line">constraint_specification:</span><br><span class="line">  : [, <span class="keyword">PRIMARY</span> KEY (col_name, ...) DISABLE NOVALIDATE RELY<span class="operator">/</span>NORELY ]</span><br><span class="line">    [, <span class="keyword">PRIMARY</span> KEY (col_name, ...) DISABLE NOVALIDATE RELY<span class="operator">/</span>NORELY ]</span><br><span class="line">    [, <span class="keyword">CONSTRAINT</span> constraint_name <span class="keyword">FOREIGN</span> KEY (col_name, ...) <span class="keyword">REFERENCES</span> table_name(col_name, ...) DISABLE NOVALIDATE </span><br><span class="line">    [, <span class="keyword">CONSTRAINT</span> constraint_name <span class="keyword">UNIQUE</span> (col_name, ...) DISABLE NOVALIDATE RELY<span class="operator">/</span>NORELY ]</span><br><span class="line">    [, <span class="keyword">CONSTRAINT</span> constraint_name <span class="keyword">CHECK</span> [check_expression] ENABLE<span class="operator">|</span>DISABLE NOVALIDATE RELY<span class="operator">/</span>NORELY ]</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>对几个关键点说明</strong><br>a) temporary 创建临时表，只在本次回话生效<br>b) external关键字，加上这个关键字建的表是外部表，不加这个关键字建的表就是内部表<br>    内部表和外部表的区别：<br>    (1）概念本质上<br>    内部表数据自己的管理的在进行表删除时数据和元数据一并删除。<br>    外部表只是对HDFS的一个目录的数据进行关联，外部表在进行删除时只删除元数据，原始数据是不会被删除的。<br>    (2）应用场景上<br>    外部表一般用于存储原始数据、公共数据，内部表一般用于存储某一个模块的中间结果数据。<br>    (3）存储目录上<br>    外部表：一般在进行建表时候需要手动指定表的数据目录为共享资源目录，用lication关键字指定。<br>    内部表：无严格的要求，一般使用的默认目录。<br>c) partitioned by 指定分区字段<br>    partitioned by（分区字段名 分区字段类型 COMMENT 字段描述信息）<br>    注意：分区字段一定不能存在于建表字段中。<br>d) [row format row_format] 指定分割符的<br>    fields terminated by 列分割符<br>    lines terminated by 行分割符<br>    map keys terminated by<br>e) [stored as AS file_format] 指定原始数据的存储格式<br>    textfile 文本格式 默认的方式<br>    cfile 行列格式， 在行的方向切分数据的存储的块 保证一行数据在一个数据块中，每列个块中存储的时候 进行划分存储的。<br>    SequenceFile 二进制存储格式</p>
</blockquote>
<h4 id="2-2-删除表"><a href="#2-2-删除表" class="headerlink" title="2.2 删除表"></a>2.2 删除表</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> [IF <span class="keyword">EXISTS</span>] table_name [PURGE];     <span class="comment">-- (<span class="doctag">Note:</span> PURGE available in Hive 0.14.0 and later)</span></span><br></pre></td></tr></table></figure>

<h4 id="2-3-截断表（删除表的所有行，即清空表）"><a href="#2-3-截断表（删除表的所有行，即清空表）" class="headerlink" title="2.3 截断表（删除表的所有行，即清空表）"></a>2.3 截断表（删除表的所有行，即清空表）</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> [<span class="keyword">TABLE</span>] table_name [<span class="keyword">PARTITION</span> partition_spec];</span><br><span class="line"> </span><br><span class="line">partition_spec:</span><br><span class="line">  : (partition_column <span class="operator">=</span> partition_col_value, partition_column <span class="operator">=</span> partition_col_value, ...)</span><br></pre></td></tr></table></figure>

<h4 id="2-4-修改表"><a href="#2-4-修改表" class="headerlink" title="2.4 修改表"></a>2.4 修改表</h4><h5 id="2-4-1-重命名"><a href="#2-4-1-重命名" class="headerlink" title="2.4.1 重命名"></a>2.4.1 重命名</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name RENAME <span class="keyword">TO</span> new_table_name;</span><br></pre></td></tr></table></figure>

<h5 id="2-4-2-修改表属性"><a href="#2-4-2-修改表属性" class="headerlink" title="2.4.2 修改表属性"></a>2.4.2 修改表属性</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">SET</span> TBLPROPERTIES table_properties;</span><br><span class="line"> </span><br><span class="line">table_properties:</span><br><span class="line">  : (property_name <span class="operator">=</span> property_value, property_name <span class="operator">=</span> property_value, ... )</span><br></pre></td></tr></table></figure>

<h5 id="2-4-3-修改表注释"><a href="#2-4-3-修改表注释" class="headerlink" title="2.4.3 修改表注释"></a>2.4.3 修改表注释</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">SET</span> TBLPROPERTIES (<span class="string">&#x27;comment&#x27;</span> <span class="operator">=</span> new_comment);</span><br></pre></td></tr></table></figure>

<h5 id="2-4-4-添加正则表达式过滤属性"><a href="#2-4-4-添加正则表达式过滤属性" class="headerlink" title="2.4.4 添加正则表达式过滤属性"></a>2.4.4 添加正则表达式过滤属性</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name [<span class="keyword">PARTITION</span> partition_spec] <span class="keyword">SET</span> SERDE serde_class_name [<span class="keyword">WITH</span> SERDEPROPERTIES serde_properties];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name [<span class="keyword">PARTITION</span> partition_spec] <span class="keyword">SET</span> SERDEPROPERTIES serde_properties;</span><br><span class="line"> </span><br><span class="line">serde_properties:</span><br><span class="line">  : (property_name <span class="operator">=</span> property_value, property_name <span class="operator">=</span> property_value, ... )</span><br></pre></td></tr></table></figure>

<h5 id="2-4-5-删除正则表达式过滤属性"><a href="#2-4-5-删除正则表达式过滤属性" class="headerlink" title="2.4.5 删除正则表达式过滤属性"></a>2.4.5 删除正则表达式过滤属性</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name [<span class="keyword">PARTITION</span> partition_spec] UNSET SERDEPROPERTIES (property_name, ... );</span><br></pre></td></tr></table></figure>



<h2 id="二、DML"><a href="#二、DML" class="headerlink" title="二、DML"></a>二、DML</h2><h3 id="1-将文件导入数据表"><a href="#1-将文件导入数据表" class="headerlink" title="1. 将文件导入数据表"></a>1. 将文件导入数据表</h3><p>语法格式:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">LOAD DATA [<span class="keyword">LOCAL</span>] INPATH <span class="string">&#x27;filepath&#x27;</span> [OVERWRITE] <span class="keyword">INTO</span> <span class="keyword">TABLE</span> tablename [<span class="keyword">PARTITION</span> (partcol1<span class="operator">=</span>val1, partcol2<span class="operator">=</span>val2 ...)]</span><br><span class="line"> </span><br><span class="line">LOAD DATA [<span class="keyword">LOCAL</span>] INPATH <span class="string">&#x27;filepath&#x27;</span> [OVERWRITE] <span class="keyword">INTO</span> <span class="keyword">TABLE</span> tablename [<span class="keyword">PARTITION</span> (partcol1<span class="operator">=</span>val1, partcol2<span class="operator">=</span>val2 ...)] [INPUTFORMAT <span class="string">&#x27;inputformat&#x27;</span> SERDE <span class="string">&#x27;serde&#x27;</span>] (<span class="number">3.0</span> <span class="keyword">or</span> later)</span><br></pre></td></tr></table></figure>

<p>语法解析：</p>
<ul>
<li><p>LOAD DATA ：数据导入关键字</p>
</li>
<li><p>关于LOCAL关键字</p>
</li>
</ul>
<blockquote>
<p>LOCAL 关键字：如果指定了 LOCAL， LOAD 命令会去查找本地文件系统中的 filepath。如果没有指定 LOCAL 关键字，则根据 inpath 中的 uri 查找文件。<br>注意：uri 是指 hdfs 上的路径，分简单模式和完整模式两种，例如：</p>
<ul>
<li>简单模式：&#x2F;user&#x2F;hive&#x2F;project&#x2F;data1</li>
<li>完整模式：hdfs:&#x2F;&#x2F;namenode_host:9000&#x2F;user&#x2F;hive&#x2F;project&#x2F;data1</li>
</ul>
</blockquote>
<ul>
<li>关于文件路径 filepath</li>
</ul>
<blockquote>
<p>在hive3.0之前，文件导入操作是通过单纯的复制&#x2F;移动的方式来将数据文件导入路径下的数据表中，其中，文件路径可以是以下几种形式：</p>
<ul>
<li><p>相对路径，如<code>project/data1</code></p>
</li>
<li><p>绝对路径，如<code>/user/hive/project/data1</code></p>
</li>
<li><p>带有模式和权限(可选)的完整URI，如<code>hdfs://namenode:9000/user/hive/project/data1</code></p>
</li>
</ul>
<p>文件路径可以具体到某个要导入的文件，也可以是某个目录(文件夹)，如果是目录，hive会将目录下的所有文件导入表中。</p>
</blockquote>
<ul>
<li>关于导入表的类型</li>
</ul>
<blockquote>
<p>接收导入数据的表可以是一个已有表或者分区表，如果表是分区表，则必须指定分区字段内所有属性(列)的值。也可以使用 </p>
<p>CREATE TABLE 在导入时创建导入表。</p>
</blockquote>
<ul>
<li>输入格式控制(Hive 3.0之后可用)</li>
</ul>
<blockquote>
<p>输入格式(inputformat)可以是hive 的任何输入格式，如text、ORC等。</p>
<p>serde可以是关联的配置单元serde。</p>
<p>inputformat和serde都区分大小写</p>
</blockquote>
<ul>
<li>其他加载操作</li>
</ul>
<blockquote>
<p>Hive 3.0及更高版本中，除了移动复制操作之外，还支持其他加载操作，因为Hive在内部在某些场合下会将加载重写为<strong>INSERT AS SELECT</strong>。<br>比如，如果表具有分区，而load命令没有指定分区，则将load转换为INSERT AS SELECT，并假定最后一组列为分区列。如果文件不符合预期的架构，它将引发错误。</p>
</blockquote>
<p>注意：</p>
<ul>
<li><p>文件路径下不能包含有子目录，即如果指定的文件路径是一个目录，该目录下不能包含子目录。</p>
</li>
<li><p>如果没有指定LOCAL关键字，则导入的文件必须与表在同一个文件系统下</p>
</li>
</ul>
<h3 id="2-通过查询语句将数据插入数据表（常用）"><a href="#2-通过查询语句将数据插入数据表（常用）" class="headerlink" title="2. 通过查询语句将数据插入数据表（常用）"></a>2. 通过查询语句将数据插入数据表（常用）</h3><h4 id="2-1-普通表和静态分区表的插入"><a href="#2-1-普通表和静态分区表的插入" class="headerlink" title="2.1 普通表和静态分区表的插入"></a>2.1 普通表和静态分区表的插入</h4><p>使用这种方式可以将查询结果插入数据表。</p>
<p>语法格式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Standard syntax:<span class="comment">-- 标准语法格式</span></span><br><span class="line"><span class="keyword">INSERT</span> OVERWRITE <span class="keyword">TABLE</span> tablename1 [<span class="keyword">PARTITION</span> (partcol1<span class="operator">=</span>val1, partcol2<span class="operator">=</span>val2 ...) [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>]] select_statement1 <span class="keyword">FROM</span> from_statement;<span class="comment">-- 覆盖插入</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">TABLE</span> tablename1 [<span class="keyword">PARTITION</span> (partcol1<span class="operator">=</span>val1, partcol2<span class="operator">=</span>val2 ...)] select_statement1 <span class="keyword">FROM</span> from_statement; <span class="comment">-- 增量插入</span></span><br><span class="line"> </span><br><span class="line">Hive extension (multiple inserts):<span class="comment">-- hive拓展，多表插入</span></span><br><span class="line"><span class="keyword">FROM</span> from_statement</span><br><span class="line"><span class="keyword">INSERT</span> OVERWRITE <span class="keyword">TABLE</span> tablename1 [<span class="keyword">PARTITION</span> (partcol1<span class="operator">=</span>val1, partcol2<span class="operator">=</span>val2 ...) [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>]] select_statement1</span><br><span class="line">[<span class="keyword">INSERT</span> OVERWRITE <span class="keyword">TABLE</span> tablename2 [<span class="keyword">PARTITION</span> ... [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>]] select_statement2]</span><br><span class="line">[<span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">TABLE</span> tablename2 [<span class="keyword">PARTITION</span> ...] select_statement2] ...;</span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> from_statement</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">TABLE</span> tablename1 [<span class="keyword">PARTITION</span> (partcol1<span class="operator">=</span>val1, partcol2<span class="operator">=</span>val2 ...)] select_statement1</span><br><span class="line">[<span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">TABLE</span> tablename2 [<span class="keyword">PARTITION</span> ...] select_statement2]</span><br><span class="line">[<span class="keyword">INSERT</span> OVERWRITE <span class="keyword">TABLE</span> tablename2 [<span class="keyword">PARTITION</span> ... [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>]] select_statement2] ...;</span><br><span class="line"> </span><br><span class="line">Hive extension (<span class="keyword">dynamic</span> <span class="keyword">partition</span> inserts): <span class="comment">-- hive拓展，动态分区插入</span></span><br><span class="line"><span class="keyword">INSERT</span> OVERWRITE <span class="keyword">TABLE</span> tablename <span class="keyword">PARTITION</span> (partcol1[<span class="operator">=</span>val1], partcol2[<span class="operator">=</span>val2] ...) select_statement <span class="keyword">FROM</span> from_statement;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">TABLE</span> tablename <span class="keyword">PARTITION</span> (partcol1[<span class="operator">=</span>val1], partcol2[<span class="operator">=</span>val2] ...) select_statement <span class="keyword">FROM</span> from_statement;</span><br></pre></td></tr></table></figure>

<p>语法解析：</p>
<ul>
<li>两种插入方式概述</li>
</ul>
<blockquote>
<p>INSERT OVERWRITE 方式插入数据会将表或者分区表中的信息清空覆盖，具体实现是先查找到要插入的数据，然后将表清空，最后插入数据</p>
<p>INSERT INTO 方式插入数据会在表或者分区表中添加增量信息，即不改变表中的原有数据，而是在后面添加。</p>
<p>在Hive 0.13.0之后，创建数据表时可以指定表属性TBLPROPERTIES(“immutable”&#x3D;”true”)，(immutable默认为false),这样表就是不可变的，如果一个不可变的表上有任何数据的话，INSERT INTO 方式插入数据不能在不可变的表上操作。但如果不可变的表是空的，则仍然可以通过INSERT INTO 方式插入数据。INSERT OVERWRITE 插入方式不受表的immutable属性限制。</p>
</blockquote>
<ul>
<li>IF NOT EXISTS 关键字</li>
</ul>
<blockquote>
<p>如果使用了该关键字，当数据插入时如果表不存在，会创建一个表；如果没有使用改关键字，当数据插入时如果表不存在，指令会执行失败。</p>
</blockquote>
<ul>
<li>分区表插入注意事项</li>
</ul>
<blockquote>
<p>可以向表或者分区表中插入数据，如果是分区表，插入时则必须指定所有分区字段的值，如果<code>hive.typecheck.on.insert</code>被设置为true,则hive会校验、转化、规范化这些值使它们符合列的类型。(Hive 0.12.0以后)</p>
</blockquote>
<ul>
<li>多表插入</li>
</ul>
<blockquote>
<p>多表插入的意思是可以在一个查询中指定多个INSERT语句，只需要扫描一遍源表。如果要使用覆盖的方法插入，OVERWRITE关键字是必须的，不是可选的。多表插入可最大限度地减少所需的数据扫描次数。Hive只需扫描输入数据一次（并对输入数据应用不同的查询运算符），即可将数据插入多个表中。</p>
<p><strong>多表插入时，如果目标表是普通表，则不能插入相同的表。</strong></p>
<p><strong>多表插入时，如果目标表是分区表，则插入的表不能是相同表的相同分区，可以是相同表的不通分区。</strong></p>
</blockquote>
<ul>
<li>输出格式</li>
</ul>
<blockquote>
<p>输出格式由表的元数据定义。</p>
</blockquote>
<blockquote>
<p>自Hive 0.14起，如果一个表的OutputFormat实现了AcidOutputFormat，并且系统配置为使用实现ACID的事务管理器，则该表的插入覆盖将被禁用。这是为了避免用户无意中覆盖事务历史记录。同样的功能也可以通过使用TRUNCATE TABLE（对于非分区表）或DROP PARTITION，然后INSERT INTO来实现。</p>
</blockquote>
<ul>
<li>其他</li>
</ul>
<blockquote>
<p>自Hive1.1.0开始，关键字TABLE 变成了可选的而不是必需的。</p>
</blockquote>
<blockquote>
<p>自Hive3.1.0起，不允许从数据源中使用UNION ALL对完整CRUD ACID表进行插入覆盖。</p>
</blockquote>
<h4 id="2-2-动态分区表的插入"><a href="#2-2-动态分区表的插入" class="headerlink" title="2.2 动态分区表的插入"></a>2.2 动态分区表的插入</h4><p>动态分区表插入时，动态分区列必须在select语句的最后进行指定，且指定顺序必须与partition中指定的先后顺序相同。从Hive3.0.0起，不需要指定动态分区列。</p>
<p>在Hive0.9.0之前，动态分区是默认不可用的，在Hive0.9.0之后，动态分区是默认可用的，以下是有关动态分区表的插入的一些属性配置：</p>
<table>
<thead>
<tr>
<th>配置属性</th>
<th>默认值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>hive.exec.dynamic.partition</td>
<td>true</td>
<td>当动态分区表插入时需要被设置为true</td>
</tr>
<tr>
<td>hive.exec.dynamic.partition.mode</td>
<td>strict</td>
<td>在严格模式下，使用者必须确定至少一个静态分区来防止所有分区被意外覆盖，而在非严格模式下，所有分区都可以是动态的。</td>
</tr>
<tr>
<td>hive.exec.max.dynamic.partitions.pernode</td>
<td>100</td>
<td>在一个mapper&#x2F;reducer节点中允许创建的最大动态分区数</td>
</tr>
<tr>
<td>hive.exec.max.dynamic.partitions</td>
<td>1000</td>
<td>允许创建的最大动态分区总数</td>
</tr>
<tr>
<td>hive.exec.max.created.files</td>
<td>100000</td>
<td>在一个MapReduce任务中所有mappers&#x2F;reducers可以创建的最大HDFS文件数量总数</td>
</tr>
<tr>
<td>hive.error.on.empty.partition</td>
<td>false</td>
<td>如果动态分区插入结果为空是否抛出异常</td>
</tr>
</tbody></table>
<h3 id="3-通过查询将数据写入文件系统"><a href="#3-通过查询将数据写入文件系统" class="headerlink" title="3. 通过查询将数据写入文件系统"></a>3. 通过查询将数据写入文件系统</h3><p>语法格式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Standard syntax: <span class="comment">-- 标准语法</span></span><br><span class="line"><span class="keyword">INSERT</span> OVERWRITE [<span class="keyword">LOCAL</span>] DIRECTORY directory1</span><br><span class="line">  [<span class="type">ROW</span> FORMAT row_format] [STORED <span class="keyword">AS</span> file_format] (Note: <span class="keyword">Only</span> available starting <span class="keyword">with</span> Hive <span class="number">0.11</span><span class="number">.0</span>)</span><br><span class="line">  <span class="keyword">SELECT</span> ... <span class="keyword">FROM</span> ...</span><br><span class="line"> </span><br><span class="line">Hive extension (multiple inserts): <span class="comment">-- hive拓展，多插入</span></span><br><span class="line"><span class="keyword">FROM</span> from_statement</span><br><span class="line"><span class="keyword">INSERT</span> OVERWRITE [<span class="keyword">LOCAL</span>] DIRECTORY directory1 select_statement1</span><br><span class="line">[<span class="keyword">INSERT</span> OVERWRITE [<span class="keyword">LOCAL</span>] DIRECTORY directory2 select_statement2] ...</span><br><span class="line"> </span><br><span class="line">  </span><br><span class="line">row_format</span><br><span class="line">  : DELIMITED [FIELDS TERMINATED <span class="keyword">BY</span> <span class="type">char</span> [ESCAPED <span class="keyword">BY</span> <span class="type">char</span>]] [COLLECTION ITEMS TERMINATED <span class="keyword">BY</span> <span class="type">char</span>]</span><br><span class="line">        [MAP KEYS TERMINATED <span class="keyword">BY</span> <span class="type">char</span>] [LINES TERMINATED <span class="keyword">BY</span> <span class="type">char</span>]</span><br><span class="line">        [<span class="keyword">NULL</span> DEFINED <span class="keyword">AS</span> <span class="type">char</span>] (Note: <span class="keyword">Only</span> available starting <span class="keyword">with</span> Hive <span class="number">0.13</span>)</span><br></pre></td></tr></table></figure>

<p>语法解析：</p>
<ul>
<li>INSERT OVERWRITE :插入语法关键字</li>
<li>LOCAL关键字</li>
</ul>
<blockquote>
<p>LOCAL 关键字：如果指定了 LOCAL， Hive会将数据写入到本次文件系统中。如果没有指定 LOCAL 关键字，则根据 DIRECTORY 中的 uri 查找文件。<br>注意：uri 是指 hdfs 上的路径，分简单模式和完整模式两种，例如：</p>
<ul>
<li>简单模式：&#x2F;user&#x2F;hive&#x2F;project&#x2F;data1</li>
<li>完整模式：hdfs:&#x2F;&#x2F;namenode_host:9000&#x2F;user&#x2F;hive&#x2F;project&#x2F;data1</li>
</ul>
</blockquote>
<ul>
<li>DIRECTORY 要写入的文件目录</li>
</ul>
<blockquote>
<p>目录可以是一个完整的URI，当标识和权限不确定时，Hive将会从hadoop配置变量fs.default.name中确定URI。</p>
</blockquote>
<ul>
<li>写入格式</li>
</ul>
<blockquote>
<p>数据在写入文件系统时会被序列化成text文本，列之间使用<code>^A</code>分隔符分隔，行之间使用换行分隔，如果任何列不是基本类型，那么这些列将会被序列化为JSON格式。</p>
</blockquote>
<ul>
<li>注意</li>
</ul>
<blockquote>
<p>INSERT OVERWRITE语句写入目录、本地目录，表（或分区表）可以写在一个查询中。</p>
<p>当有大量数据时，使用Hive将数据写入HDFS文件系统的目录中是最好的处理方式，因为Hive可以在一个MapReduce中将数据并行地写入HDFS目录中。</p>
<p>指定的目录如果存在，则写入操作会将目录中原来的数据覆盖，即会先将原有的数据删除，然后插入查询到的数据。</p>
<p>从Hive 0.11.0开始，可以指定使用的分隔符；在早期版本中，它始终是^A字符（\ 001）。但是，在Hive0.11.0至1.1.0中，仅支持自定义分隔符用于本地写入–此错误在版本1.2.0中得到修复。</p>
<p>在Hive 0.14中，插入到符合ACID的表中将在选择和插入期间停用矢量化。这将自动完成。插入数据的ACID表仍然可以使用矢量化进行查询。</p>
</blockquote>
<h3 id="4-使用SQL将数据插入表"><a href="#4-使用SQL将数据插入表" class="headerlink" title="4. 使用SQL将数据插入表"></a>4. 使用SQL将数据插入表</h3><p>使用INSERT……VALUES 通过SQL可以直接将数据插入表。</p>
<p>语法格式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Standard Syntax: <span class="comment">-- 标准语法</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">TABLE</span> tablename [<span class="keyword">PARTITION</span> (partcol1[<span class="operator">=</span>val1], partcol2[<span class="operator">=</span>val2] ...)] <span class="keyword">VALUES</span> values_row [, values_row ...]</span><br><span class="line">  </span><br><span class="line"><span class="keyword">Where</span> values_row <span class="keyword">is</span>:</span><br><span class="line">( <span class="keyword">value</span> [, <span class="keyword">value</span> ...] )</span><br><span class="line"><span class="keyword">where</span> a <span class="keyword">value</span> <span class="keyword">is</span> either <span class="keyword">null</span> <span class="keyword">or</span> <span class="keyword">any</span> valid <span class="keyword">SQL</span> literal<span class="comment">-- 值可以是null或有效的SQL语句</span></span><br></pre></td></tr></table></figure>

<p>语法解析：</p>
<ul>
<li><p>VALUES子句中列出的每一行都会插入到tablename表中。 </p>
</li>
<li><p>VALUES字句必须提供表中的所有列的值，不允许只提供某些列的值，为了模拟标注sql，使用者可以用null填充那些不需要赋值的列。</p>
</li>
<li><p>动态分区表的插入方式同<code>INSERT...SELECT </code>语法一样。</p>
</li>
<li><p>如果插入到的表支持ACID，并且正在使用支持ACID的事务管理器，则此操作将在成功完成后自动提交。 </p>
</li>
<li><p><strong>Hive不支持复杂类型(array, map, struct, union)文本，所以在INSERT……VALUES也不支持这些复杂类型，这意味着使用者不能通过INSERT……VALUES将数据插入复杂类型的列中。</strong></p>
</li>
</ul>
<h3 id="5-表更新（UPDATE）"><a href="#5-表更新（UPDATE）" class="headerlink" title="5. 表更新（UPDATE）"></a>5. 表更新（UPDATE）</h3><p>UPDATE语法在Hive0.14开始使用。</p>
<p><strong>UPDATE只能在支持ACID的表中使用。</strong></p>
<p>语法格式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Standard Syntax:</span><br><span class="line"><span class="keyword">UPDATE</span> tablename <span class="keyword">SET</span> <span class="keyword">column</span> <span class="operator">=</span> <span class="keyword">value</span> [, <span class="keyword">column</span> <span class="operator">=</span> <span class="keyword">value</span> ...] [<span class="keyword">WHERE</span> expression]</span><br></pre></td></tr></table></figure>

<p>语法解析：</p>
<ul>
<li>引用的列必须是要更新的表的列。</li>
<li>分配的值必须是Hive select子句中支持的表达式。因此，支持算术运算符、UDF、强制转换、文字等。不支持子查询。</li>
<li>分区列和分桶列不能被更新。</li>
<li>在Hive0.14 中，操作成功后更改会自动提交。</li>
</ul>
<p>注意：</p>
<ul>
<li>更新操作会关闭矢量化，这是自动执行的，不需要使用者下发指令。没更新过的表不会收影响，更新后的表也仍然可以使用矢量化查询。</li>
<li>在0.14 版本,更新时建议配置 <code>hive.optimize.sort.dynamic.partition = fasle</code>,因为会更高效。</li>
</ul>
<h2 id="6-表删除（DELETE）"><a href="#6-表删除（DELETE）" class="headerlink" title="6. 表删除（DELETE）"></a>6. 表删除（DELETE）</h2><p>DELETE语法在Hive0.14开始使用。</p>
<p><strong>DELETE只能在支持ACID的表中使用。</strong></p>
<p>语法格式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Standard Syntax:</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tablename [<span class="keyword">WHERE</span> expression]</span><br></pre></td></tr></table></figure>

<p>注意:</p>
<ul>
<li><p>在Hive0.14 中，操作成功后更改会自动提交。</p>
</li>
<li><p>删除操作会关闭矢量化，这是自动执行的，不需要使用者下发指令。没删除过的表不会收影响，删除操作完成后的表也仍然可以使用矢量化查询。</p>
</li>
<li><p>在0.14 版本,删除时建议配置 <code>hive.optimize.sort.dynamic.partition = fasle</code>,因为会更高效。</p>
</li>
</ul>
<h3 id="7-MERGE"><a href="#7-MERGE" class="headerlink" title="7. MERGE"></a>7. MERGE</h3><p>Merge简介：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MERGE语句是SQL语句的一种。在SQL Server、Oracle数据库中可用，MySQL、PostgreSQL中不可用。MERGE是Oracle9i新增的语法，用来合并UPDATE和INSERT语句。通过MERGE语句，根据一张表（原数据表，source table）或子查询的连接条件对另外一张（目标表，target table）表进行查询，连接条件匹配上的进行UPDATE，无法匹配的执行INSERT。这个语法仅需要一次全表扫描就完成了全部工作，执行效率要高于INSERT+UPDATE。</span><br></pre></td></tr></table></figure>

<p>版本信息：</p>
<ul>
<li>MERGE在Hive 2.2中开始使用。</li>
<li><strong>MERGE只能在支持ACID的表中使用。</strong></li>
</ul>
<p>语法格式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Standard Syntax:</span><br><span class="line"><span class="keyword">MERGE</span> <span class="keyword">INTO</span> <span class="operator">&lt;</span>target <span class="keyword">table</span><span class="operator">&gt;</span> <span class="keyword">AS</span> T <span class="keyword">USING</span> <span class="operator">&lt;</span>source expression<span class="operator">/</span><span class="keyword">table</span><span class="operator">&gt;</span> <span class="keyword">AS</span> S</span><br><span class="line"><span class="keyword">ON</span> <span class="operator">&lt;</span><span class="type">boolean</span> expression1<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">WHEN</span> MATCHED [<span class="keyword">AND</span> <span class="operator">&lt;</span><span class="type">boolean</span> expression2<span class="operator">&gt;</span>] <span class="keyword">THEN</span> <span class="keyword">UPDATE</span> <span class="keyword">SET</span> <span class="operator">&lt;</span><span class="keyword">set</span> clause list<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">WHEN</span> MATCHED [<span class="keyword">AND</span> <span class="operator">&lt;</span><span class="type">boolean</span> expression3<span class="operator">&gt;</span>] <span class="keyword">THEN</span> <span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="keyword">NOT</span> MATCHED [<span class="keyword">AND</span> <span class="operator">&lt;</span><span class="type">boolean</span> expression4<span class="operator">&gt;</span>] <span class="keyword">THEN</span> <span class="keyword">INSERT</span> <span class="keyword">VALUES</span><span class="operator">&lt;</span><span class="keyword">value</span> list<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>

<p>语法解析：</p>
<ul>
<li><p>Merge允许基于与源表的联接结果对目标表执行操作。</p>
</li>
<li><p>自Hive2.2起，merge操作成功后会自动提交事务。</p>
</li>
</ul>
<p>注意：</p>
<ul>
<li>WHEN条件子句中，INSERT&#x2F;UPDATE&#x2F;DELETE中的每个语句最多只有一个，例如不能同时有两个insert子句。</li>
<li>WHEN NOT MATCHED必须放在多个WHEN子句的最后。</li>
<li>如果同时存在UPDATE和DELETE子句，则放在前面的哪一个字句中必须包含<code>AND &lt;boolean expression&gt;</code></li>
</ul>
<p>t条件。</p>
<ul>
<li>Merge操作会关闭矢量化，这是自动执行的，不需要使用者下发指令。没Merge过的表不会收影响，Merge操作完成后的表也仍然可以使用矢量化查询。</li>
</ul>
<h3 id="8-集群间数据迁移-IMPORT-x2F-EXPORT（这部分知识待补充）"><a href="#8-集群间数据迁移-IMPORT-x2F-EXPORT（这部分知识待补充）" class="headerlink" title="8. 集群间数据迁移 IMPORT&#x2F;EXPORT（这部分知识待补充）"></a>8. 集群间数据迁移 IMPORT&#x2F;EXPORT（这部分知识待补充）</h3><p>版本信息：</p>
<p>IMPORT&#x2F;EXPORT命令在Hive 0.8.0版本添加。</p>
]]></content>
      <categories>
        <category>Hadoop</category>
        <category>Hive</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Hive</tag>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Hive文件格式</title>
    <url>/Hadoop/Hive/Hive%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="Hive-文件格式"><a href="#Hive-文件格式" class="headerlink" title="Hive 文件格式"></a>Hive 文件格式</h1><h2 id="一、-ORC-Files"><a href="#一、-ORC-Files" class="headerlink" title="一、 ORC Files"></a>一、 ORC Files</h2><h3 id="1-ORC文件格式概述"><a href="#1-ORC文件格式概述" class="headerlink" title="1. ORC文件格式概述"></a>1. ORC文件格式概述</h3><p>ORC(<em>Optimized Row Columnar</em>)文件格式提供了一种非常高效的方式来存储hive数据。它旨在克服其他Hive文件格式的限制。使用ORC文件可以提升Hive在读、写、处理数据时的性能。</p>
<p>以RCFile 格式做比较，ORC文件格式有许多有优点，例如：</p>
<blockquote>
<ul>
<li><p>单个文件作为每个任务的输出，这减少了NameNode的负载 .</p>
</li>
<li><p>Hive类型支持datetime,decimal,以及一些复杂类型（struct, list, map, and union）.</p>
</li>
<li><p>文件中存储了轻量级的索引：</p>
<ul>
<li>跳过那些没有通过谓词筛选的行组</li>
<li>查询给定行</li>
</ul>
</li>
<li><p>基于数据类型的块模式压缩 </p>
</li>
<li><p>Integer类型的列用行程长度编码(Run Length Encoding)</p>
</li>
<li><p>String类型的列用字典编码(Dictionary Encoding)；</p>
</li>
<li><p>使用单独的RecordReader并发读取同一文件 </p>
</li>
<li><p>无需扫描标记即可拆分文件 </p>
</li>
<li><p>绑定读写所需的内存量 </p>
</li>
<li><p>使用协议缓冲区存储元数据，允许添加和删除字段</p>
</li>
</ul>
</blockquote>
<h3 id="2-ORC文件结构"><a href="#2-ORC文件结构" class="headerlink" title="2. ORC文件结构"></a>2. ORC文件结构</h3><p>ORC文件包含一组称为条纹(<strong>stripes</strong>)的行数据，以及FileFooter中的辅助信息。在文件末尾，postscript保存压缩参数和压缩页脚的大小。</p>
<p>默认的 stripes 大小为250MB，大的stripes使得Hive能够对HDFS进行高效的读取。</p>
<p>FileFooter包含文件中的stripes列表、每个stripes的行数以及每列的数据类型。它还包含了列级聚合count、min、max和sum。 </p>
<p>下图说明了ORC文件结构： </p>
<p><img src="/Hadoop/Hive/Hive%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/.%5CHive%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%5Cimage-20220530141339875.png" alt="image-20220530141339875"></p>
<h3 id="3-Stripe结构："><a href="#3-Stripe结构：" class="headerlink" title="3. Stripe结构："></a>3. Stripe结构：</h3><p>从上图可以看出，ORC文件中的每个stripe都包括索引数据(Index Data)、行数据(Row Data)以及Stripe Footer。</p>
<p><code>Stripe Footer</code>包含了流数据位置的目录，<code>Row Data</code>则用于表的扫描。</p>
<p><code>Index data</code>中包含了每一列中的最大和最小值，以及每列所在的行（还可以包括位字段或布隆过滤器），行索引里面提供了偏移量，它可以跳到正确的压缩块位置以及解压缩块的字节位置。请注意，ORC索引仅用于选择 <code>Stripe</code> 和行组，而不用于查询。</p>
<p>Stripe中具有相对频繁的行索引、能够跳过行来进行快速读取，尽管Stripe很大。默认情况下最大可以跳过10000行。</p>
<p>通过谓词筛选器跳过大量行集，你可以使用表的第二主键来进行分类从而减少大量的执行时间。例如，你的表的主分区是交易日期，那么你可以在 state、zip code以及last name 上进行排序。然后在一个 state 中查找记录将跳过所有其他 state 的记录。</p>
<h3 id="4-使用语法"><a href="#4-使用语法" class="headerlink" title="4. 使用语法"></a>4. 使用语法</h3><p>文件类型是在表级（或分区级）上确定的，通过HiveQL,你可以将文件形式定义为ORC,例如：</p>
<ul>
<li><code>CREATE TABLE ... STORED AS ORC</code></li>
<li><code>ALTER TABLE ... [PARTITION partition_spec] SET FILEFORMAT ORC</code></li>
<li><code>SET hive.default.fileformat=ORC</code></li>
</ul>
<p><strong>高级设置：</strong></p>
<p>下面的参数都被放在 <code>TBLPROPERTIES </code>中:</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Default</th>
<th>Notes</th>
</tr>
</thead>
<tbody><tr>
<td>orc.bloom.filter.columns</td>
<td>“”</td>
<td>comma separated list of column names for which bloom filter should be created<br>应为其创建bloom筛选器的列名的逗号分隔列表</td>
</tr>
<tr>
<td>orc.bloom.filter.fpp</td>
<td>0.05</td>
<td>false positive probability for bloom filter (must &gt;0.0 and &lt;1.0)<br>布隆过滤器的误报概率，大小在0和1之间</td>
</tr>
<tr>
<td>orc.compress</td>
<td>ZLIB</td>
<td>high level compression (one of NONE, ZLIB, SNAPPY)<br>高级压缩，为表指定压缩算法，默认为ZLIB</td>
</tr>
<tr>
<td>orc.compress.size</td>
<td>262,144</td>
<td>number of bytes in each compression chunk<br>每个压缩区块包含的字节数</td>
</tr>
<tr>
<td>orc.create.index</td>
<td>true</td>
<td>whether to create row indexes<br>是否要创建行索引</td>
</tr>
<tr>
<td>orc.row.index.stride</td>
<td>10,000</td>
<td>number of rows between index entries (must be &gt;&#x3D; 1000)<br>索引项之间的行数，必须大于1000</td>
</tr>
<tr>
<td>orc.stripe.size</td>
<td>67,108,864</td>
<td>number of bytes in each stripe<br>每个stripe包含的字节数</td>
</tr>
</tbody></table>
<p>例如，创建一个不带压缩方式的ORC存储的表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Addresses (</span><br><span class="line">  name string,</span><br><span class="line">  street string,</span><br><span class="line">  city string,</span><br><span class="line">  state string,</span><br><span class="line">  zip <span class="type">int</span></span><br><span class="line">) stored <span class="keyword">as</span> orc tblproperties (&quot;orc.compress&quot;<span class="operator">=</span>&quot;NONE&quot;);</span><br></pre></td></tr></table></figure>

<h3 id="5-序列化-Serialization-和压缩-Compression"><a href="#5-序列化-Serialization-和压缩-Compression" class="headerlink" title="5. 序列化(Serialization )和压缩(Compression)"></a>5. 序列化(Serialization )和压缩(Compression)</h3><h4 id="5-1-序列化"><a href="#5-1-序列化" class="headerlink" title="5.1 序列化"></a>5.1 序列化</h4><p>ORC 文件中的序列化取决于列数据是否为Integer或者String类型的。</p>
<ul>
<li>Integer列的序列化：</li>
</ul>
<blockquote>
<p>Integer 列在两个流中序列化：</p>
<ol>
<li>当前位流：值是否非空？</li>
<li>数据流：Integers流</li>
</ol>
<p>整形数据的序列化方式采用了数字常见分布的优点：</p>
<ul>
<li>整数编码才用可变宽度编码，这使得小整形数字占用更少的字节</li>
<li>重复值采用行程编码（Run-Length Encoding，RLE）</li>
<li>在-128到127范围内的常数使用的是行程编码</li>
</ul>
</blockquote>
<p>知识拓展：</p>
<p>可变宽度编码（<em>variable-width encoding</em>）<strong>待补充</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">可变宽度编码基于Google的协议缓冲区，并使用高位表示该字节是否不是编码数据的最后一位和低位7位来编码。为了对附属进行编码，0, -1, 1, -2, 和 2 被映射为 0, 1, 2, 3, 4, 和 5 respectively.</span><br><span class="line"></span><br><span class="line">每个集合中的数是按以下方式编码的：</span><br><span class="line"><span class="emphasis">*如果第一个字节b0是负数：</span></span><br><span class="line"><span class="emphasis">	*</span> b0后是可变长度整数</span><br><span class="line"><span class="emphasis">*如果第一个字节b0是正数：</span></span><br><span class="line"><span class="emphasis">	</span></span><br><span class="line"><span class="emphasis"></span></span><br></pre></td></tr></table></figure>



<p>行程编码（<em>Run-Length Encoding</em>，RLE）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">行程编码（RLE）是一种无损数据压缩形式，其中数据的runs（即，在许多连续数据元素中出现相同数据值的序列）被存储为单个数据值和计数，而不是原来的runs。这对包含许多此类runs的数据最有用。例如，考虑简单的图形图像，如图标，线条图。它对于没有很多runs的文件没有用，因为它可能会大大增加文件大小。</span><br><span class="line">例如，考虑在纯白色背景上包含纯黑色文本的屏幕。空白区域中会有很多长白色像素，文本中会有很多短黑色像素。假设的扫描线，B代表黑色像素，W代表白色，可能如下所示：</span><br><span class="line"></span><br><span class="line">WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW</span><br><span class="line"></span><br><span class="line">通过应用于上述假设扫描线的行程编码（RLE）数据压缩算法，可以如下呈现：</span><br><span class="line"></span><br><span class="line">12W1B12W3B24W1B14W</span><br><span class="line"></span><br><span class="line">这可以解释为12个W,1个B，12个W，3个B，24个W，1个B，14个W的序列。</span><br></pre></td></tr></table></figure>

<ul>
<li>String列的序列化</li>
</ul>
<blockquote>
<p>字符串列的序列化使用字典来形成唯一的列值。对字典进行排序以加快谓词过滤并提高压缩比。</p>
<p>String 列在四个流中序列化：</p>
<ol>
<li>当前位流：值是否非空？</li>
<li>字典数据：字符串的字节数</li>
<li>字典长度：每个条目的长度</li>
<li>行数据：行中的数据</li>
</ol>
<p>字典长度和行数据都是Integer中的行程编码。</p>
</blockquote>
<h4 id="5-2-压缩"><a href="#5-2-压缩" class="headerlink" title="5.2 压缩"></a>5.2 压缩</h4><p>流使用编解码器进行压缩，编解码器被指定为该表中所有流的表属性。为了优化内存的使用，压缩是在每个块生成的时候以增量的方式进行的。可以直接跳过压缩块，而无需先解压再扫描。流中的位置使用块的开始位置和块中的偏移来表示。</p>
<p>编码解码器可以是Snappy，Zlib，或者none。</p>
]]></content>
      <categories>
        <category>Hadoop</category>
        <category>Hive</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Hive</tag>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>数据仓库开发架构层次</title>
    <url>/Hadoop/Hive/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E5%BC%80%E5%8F%91%E6%9E%B6%E6%9E%84%E5%B1%82%E6%AC%A1/</url>
    <content><![CDATA[<h1 id="数据仓库开发架构层次"><a href="#数据仓库开发架构层次" class="headerlink" title="数据仓库开发架构层次"></a>数据仓库开发架构层次</h1><h2 id="一、STG原始数据层（数据落地）"><a href="#一、STG原始数据层（数据落地）" class="headerlink" title="一、STG原始数据层（数据落地）"></a>一、STG原始数据层（数据落地）</h2><p>这层的工作主要是原始数据在数据仓库的落地，数据结构和原始数据保持一致，不做逻辑处理。</p>
<h2 id="二、ODS数据操作层（数据清洗）"><a href="#二、ODS数据操作层（数据清洗）" class="headerlink" title="二、ODS数据操作层（数据清洗）"></a>二、ODS数据操作层（数据清洗）</h2><p>用于原始数据在数据平台的落地。数据从数据结构、数据之间的逻辑关系上都与STG原始数据层基本保持一致。源数据进入这一层时，要进行业务字段提取、去掉不用的字段、脏数据处理等，也就是进行数据清洗。</p>
<p><strong>在实际开发中，不一定会同时创建STG层和ODS层，因为两个层差异不大，更多的是直接创建ODS层。</strong></p>
<h2 id="三、DWD数据明细层（合成明细表）"><a href="#三、DWD数据明细层（合成明细表）" class="headerlink" title="三、DWD数据明细层（合成明细表）"></a>三、DWD数据明细层（合成明细表）</h2><p>用于源系统数据在数据平台中的永久存储。它用以支撑DWS层和ADS层无法覆盖的需求，比如数据明细方面的需求。这一层主要解决数据质量问题以及数据的完整性度问题。一般会生成整个开发流程中最为明细的数据表。</p>
<h2 id="四、DWS数据服务层（数据轻度聚合）"><a href="#四、DWS数据服务层（数据轻度聚合）" class="headerlink" title="四、DWS数据服务层（数据轻度聚合）"></a>四、DWS数据服务层（数据轻度聚合）</h2><p>数据汇总层，该层会在DWD层的数据基础上。对数据做轻度的聚合操作，生成一系列的中间表，提升公共指标的复用性，减少重复加工。按照业务划分，如流量、产品、用户等，生成字段比较多的宽表，用于提供后续的业务查询，OLAP分析，数据分发等。</p>
<h2 id="五、ADS应用数据层（业务指标聚合）"><a href="#五、ADS应用数据层（业务指标聚合）" class="headerlink" title="五、ADS应用数据层（业务指标聚合）"></a>五、ADS应用数据层（业务指标聚合）</h2><p>该层存放数据产品个性化的统计指标数据，一般以某个业务应用为出发点进行建设，ADS层只关心自己需要的数据，不会全盘考虑企业整体的数据架构和应用。面向实际的业务数据需求，以DWD或者DWS层的数据为基础，组成各种统计报表。</p>
<h2 id="六、DIM维度层（"><a href="#六、DIM维度层（" class="headerlink" title="六、DIM维度层（"></a>六、DIM维度层（</h2><p>主要存储公共的属性数据，比如产品类别、地理位置、时间详情等信息。</p>
]]></content>
      <categories>
        <category>Hadoop</category>
        <category>Hive</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>ETL</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库函数</title>
    <url>/Hadoop/Hive/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="数据库函数"><a href="#数据库函数" class="headerlink" title="数据库函数"></a>数据库函数</h1><p>[TOC]</p>
<h2 id="空值处理"><a href="#空值处理" class="headerlink" title="空值处理"></a>空值处理</h2><h3 id="COALESCE-hive"><a href="#COALESCE-hive" class="headerlink" title="COALESCE	(hive)"></a>COALESCE	(hive)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">	coalesce(expr1,expr2,...)</span><br><span class="line">用途：</span><br><span class="line">	返回列表中第一个非null的值，如果列表中的所有值都是null则返回null</span><br><span class="line">参数说明：</span><br><span class="line">	*expri是要测试的值。所有这些值类型必须相同或为null，否则会引发异常。</span><br><span class="line">返回值：</span><br><span class="line">	返回值类型和参数类型相同。</span><br><span class="line">备注：</span><br><span class="line">	参数至少有一个，否则引发异常。</span><br></pre></td></tr></table></figure>



<h3 id="NVL-hive"><a href="#NVL-hive" class="headerlink" title="NVL	(hive)"></a>NVL	(hive)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">	nvl(expr1,expr2)</span><br><span class="line">用途：</span><br><span class="line">	替换空值，如果第一个参数expr1的值为<span class="keyword">NULL</span>，则返回第二个参数的值。</span><br><span class="line">备注：</span><br><span class="line">	最多只能传递两个参数。</span><br></pre></td></tr></table></figure>



<h2 id="格式处理"><a href="#格式处理" class="headerlink" title="格式处理"></a>格式处理</h2><h3 id="TRANSLATE-hive"><a href="#TRANSLATE-hive" class="headerlink" title="TRANSLATE	(hive)"></a>TRANSLATE	(hive)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">	TRANSLATE(input_string, from__characters, to_characters);</span><br><span class="line">用途：</span><br><span class="line">	替换字符串中的字符，第一个字符串是源字符串，第二个字符串是字符串中要替换掉的字符串的表达式，最后一个字符串是要替换为的字符串的表达式。</span><br><span class="line">返回值：</span><br><span class="line">	返回被替换完毕的字符串。</span><br><span class="line">注意：</span><br><span class="line">	如果任何参数为null，函数返回值为null</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- from 和 to 长度一样，如translate(&quot;abcdef-abcdef&quot;,&quot;abcdef&quot;,&quot;123456&quot;);替换不是说把&quot;abcdef&quot;替换成&quot;123456&quot;，而是把a替换成1，把b替换成2，把c替换成3，把d替换成4，e替换成5，f替换成6.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">translate</span>(<span class="string">&#x27;abcdef-abcdef&#x27;</span>, <span class="string">&#x27;abcd&#x27;</span>, <span class="string">&#x27;1234&#x27;</span>),<span class="comment">--1234ef-1234ef</span></span><br><span class="line">       <span class="built_in">translate</span>(<span class="string">&#x27;abcdef-abcdef&#x27;</span>, <span class="string">&#x27;ab&#x27;</span>, <span class="string">&#x27;12&#x27;</span>),    <span class="comment">--12cdef-12cdef</span></span><br><span class="line">       <span class="built_in">translate</span>(<span class="string">&#x27;abcdef-abcdef&#x27;</span>, <span class="string">&#x27;ad&#x27;</span>, <span class="string">&#x27;14&#x27;</span>),    <span class="comment">--1bc4ef-1bc4ef</span></span><br><span class="line">       <span class="built_in">translate</span>(<span class="string">&#x27;abcdef-abcdef&#x27;</span>, <span class="string">&#x27;da&#x27;</span>, <span class="string">&#x27;41&#x27;</span>);<span class="comment">--1bc4ef-1bc4ef</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- from 字符串长度&gt;to的字符串长度 ，例如translate(&#x27;abcdef-abcdef&#x27;,&#x27;adbc&#x27;,&#x27;123&#x27;)    意思是把 a替换为1，b替换为2，c替换为3，d替换为空，即删除掉。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">translate</span>(<span class="string">&#x27;abcdef-abcdef&#x27;</span>, <span class="string">&#x27;abcd&#x27;</span>, <span class="string">&#x27;123&#x27;</span>), <span class="comment">--123ef-123ef</span></span><br><span class="line">       <span class="built_in">translate</span>(<span class="string">&#x27;abcdef-abcdef&#x27;</span>, <span class="string">&#x27;adbc&#x27;</span>, <span class="string">&#x27;123&#x27;</span>); <span class="comment">--132ef-132ef</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如果 from里有重复字符 比如abca，1231，重复的字符a对应to的替换不会起作用</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">TRANSLATE</span> (<span class="string">&#x27;abcdaabbaaabbb&#x27;</span>,<span class="string">&#x27;aa&#x27;</span>,<span class="string">&#x27;12&#x27;</span>)<span class="comment">--1bcd11bb111bbb </span></span><br></pre></td></tr></table></figure>



<h3 id="REGEXP-hive"><a href="#REGEXP-hive" class="headerlink" title="REGEXP (hive)"></a>REGEXP (hive)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">	A REGEXP B</span><br><span class="line">用途：</span><br><span class="line">	判断字符串A是否符合正则表达式B，返回结果为boolean(true、false)或者null。</span><br></pre></td></tr></table></figure>



<h3 id="REGEXP-REPLACE-hive"><a href="#REGEXP-REPLACE-hive" class="headerlink" title="REGEXP_REPLACE	(hive)"></a>REGEXP_REPLACE	(hive)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">	REGEXP_REPLACE(string A, string B, string C);</span><br><span class="line">用途：</span><br><span class="line">	将字符串A中的部分字符做替换。</span><br><span class="line">用法：</span><br><span class="line">	将字符串A中满足Java正则表达式B的部分替换为字符串C。</span><br></pre></td></tr></table></figure>



<h3 id="REGEXP-EXTRACT-hive"><a href="#REGEXP-EXTRACT-hive" class="headerlink" title="REGEXP_EXTRACT (hive)"></a>REGEXP_EXTRACT (hive)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">	REGEXP_EXTRACT(STRING subject, STRING pattern, INT index)</span><br><span class="line">用途：</span><br><span class="line">	将字符串进行正则拆分</span><br><span class="line">用法：</span><br><span class="line">	将字符串subject按照pattern正则表达式的规则进行拆分，返回index指定部分的字符，index从1开始计。</span><br><span class="line">	* index = 0时，将字符串与整个pattern正则表达式进行匹配，返回匹配结果</span><br><span class="line">	* index = 1时，将字符串与pattern中第一个括号里的表达式进行匹配，返回结果。</span><br><span class="line">	index &gt;=1时以此类推</span><br><span class="line">示例：</span><br><span class="line">	select regexp_extract(&#x27;AA123bbcccc&#x27; ,&#x27;A&#123;2&#125;([1-9]&#123;3&#125;)([a-z]&#123;6&#125;)&#x27;,0);</span><br><span class="line">	结果：AA123bbcccc</span><br><span class="line">	select regexp_extract(&#x27;AA123bbcccc&#x27; ,&#x27;A&#123;2&#125;([1-9]&#123;3&#125;)([a-z]&#123;6&#125;)&#x27;,2);</span><br><span class="line">	结果：bbcccc</span><br></pre></td></tr></table></figure>



<h3 id="TRIM-hive"><a href="#TRIM-hive" class="headerlink" title="TRIM	(hive)"></a>TRIM	(hive)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">	TRIM(string)</span><br><span class="line">用途：</span><br><span class="line">	去掉字段首尾的空格</span><br></pre></td></tr></table></figure>



<h3 id="LTRIM-hive"><a href="#LTRIM-hive" class="headerlink" title="LTRIM	(hive)"></a>LTRIM	(hive)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">	LTRIM(string)</span><br><span class="line">用途：</span><br><span class="line">	去掉字段的前置空格</span><br></pre></td></tr></table></figure>



<h3 id="RTRIM-hive"><a href="#RTRIM-hive" class="headerlink" title="RTRIM	(hive)"></a>RTRIM	(hive)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">	RTRIM(string)</span><br><span class="line">用途：</span><br><span class="line">	去掉字段的后置空格</span><br></pre></td></tr></table></figure>



<h3 id="EXPLODE-hive"><a href="#EXPLODE-hive" class="headerlink" title="EXPLODE	(hive)"></a>EXPLODE	(hive)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">	EXPLODE(col)</span><br><span class="line">用途：</span><br><span class="line">	将某列炸裂为多行。</span><br><span class="line">例如：</span><br><span class="line">	某列字段col<span class="operator">=</span> [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>],将该列炸裂开explode(col) <span class="operator">=</span> </span><br><span class="line">	a</span><br><span class="line">	b</span><br><span class="line">	c</span><br><span class="line">注意：</span><br><span class="line">	列字段值必须是<span class="keyword">array</span> 或 map类型的字段，如果不是，可以将其转化为<span class="keyword">array</span> 或 map类型后再使用炸裂函数。</span><br><span class="line">	通常，如果字段值是一串有相同分隔符的字符串，可以使用split函数将其转换为<span class="keyword">array</span>类型。</span><br><span class="line">	如果想把某列按另一列字段值炸裂开来，即炸裂是与另一列相关的，则需要使用到<span class="keyword">Lateral</span> <span class="keyword">view</span>函数。</span><br><span class="line">常用组合：</span><br><span class="line">	常与split、<span class="keyword">Lateral</span> <span class="keyword">view</span>函数一起使用。</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="LATERAL-VIEW-hive"><a href="#LATERAL-VIEW-hive" class="headerlink" title="LATERAL VIEW	(hive)"></a>LATERAL VIEW	(hive)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">	<span class="keyword">LATERAL</span> <span class="keyword">VIEW</span> udtf(expression) tableAlias <span class="keyword">AS</span> columnAlias</span><br><span class="line">用途：</span><br><span class="line">	用于和split, explode等UDTF一起使用，它能够将一列数据拆成多行数据，在此基础上可以对拆分后的数据进行聚合。</span><br></pre></td></tr></table></figure>



<h3 id="SPLIT-hive"><a href="#SPLIT-hive" class="headerlink" title="SPLIT	(hive)"></a>SPLIT	(hive)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">	SPLIT(string ,pat)</span><br><span class="line">返回值：</span><br><span class="line">	<span class="keyword">array</span> 数组</span><br><span class="line">用途：</span><br><span class="line">	按照指定分隔符将字符串string使用pat进行分隔</span><br><span class="line">注意：</span><br><span class="line">	第二个参数可以是正则表达式，如果分隔符是正则表达式中的特殊符号，则需要进行转义，有些特殊字符只需\，而有些需要\\。如果整个语句本身是一个字符串的话，转义字符前还需加上\\，即可能有三个或四个\进行转义。</span><br></pre></td></tr></table></figure>



<h2 id="常用逻辑"><a href="#常用逻辑" class="headerlink" title="常用逻辑"></a>常用逻辑</h2><h3 id="IF-hive"><a href="#IF-hive" class="headerlink" title="IF	(hive)"></a>IF	(hive)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">	IF( expr1 , expr2 , expr3 )</span><br><span class="line">用途：</span><br><span class="line">	条件判断，如果expr1的值为true，返回值为expr2，如果为false，返回值为exper3。</span><br></pre></td></tr></table></figure>



<h3 id="CASE…WHEN…THEN…END-hive"><a href="#CASE…WHEN…THEN…END-hive" class="headerlink" title="CASE…WHEN…THEN…END	(hive)"></a>CASE…WHEN…THEN…END	(hive)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">用途：</span><br><span class="line">	根据不同条件返回不同的值</span><br><span class="line">用法<span class="number">1</span> <span class="keyword">case</span> 后不跟匹配列：</span><br><span class="line">	<span class="keyword">case</span> </span><br><span class="line">	<span class="keyword">when</span> tb1.os <span class="operator">=</span> <span class="string">&#x27;android&#x27;</span> <span class="keyword">then</span> <span class="string">&#x27;android&#x27;</span></span><br><span class="line">	<span class="keyword">when</span> tb1.os <span class="operator">=</span> <span class="string">&#x27;ios&#x27;</span> <span class="keyword">then</span> <span class="string">&#x27;iPhone&#x27;</span></span><br><span class="line">	<span class="keyword">else</span> <span class="string">&#x27;PC&#x27;</span></span><br><span class="line">	<span class="keyword">end</span> <span class="keyword">as</span> os,</span><br><span class="line">	</span><br><span class="line">用法<span class="number">2</span> <span class="keyword">case</span> 后跟匹配列</span><br><span class="line">	<span class="keyword">case</span> tb1.os</span><br><span class="line">	<span class="keyword">when</span> <span class="string">&#x27;android&#x27;</span> <span class="keyword">then</span> <span class="string">&#x27;android&#x27;</span></span><br><span class="line">	<span class="keyword">when</span> <span class="string">&#x27;ios&#x27;</span> <span class="keyword">then</span> <span class="string">&#x27;iPhone&#x27;</span></span><br><span class="line">	<span class="keyword">else</span> <span class="string">&#x27;PC&#x27;</span></span><br><span class="line">	<span class="keyword">end</span> <span class="keyword">as</span> os,</span><br><span class="line">两种用法都可以实现同样的效果</span><br></pre></td></tr></table></figure>



<h2 id="排序去重"><a href="#排序去重" class="headerlink" title="排序去重"></a>排序去重</h2><h3 id="ROW-NUMBER-hive"><a href="#ROW-NUMBER-hive" class="headerlink" title="ROW_NUMBER	(hive)"></a>ROW_NUMBER	(hive)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">	row_number()</span><br><span class="line">用途：</span><br><span class="line">	按查出的记录数前后排序，序号不重复。即第1条记录序号为1，第2条记录序号2，第3条记录序号为3（不考虑3条记录的排序字段是否重复）。</span><br><span class="line">常用组合：</span><br><span class="line">	需搭配窗口函数ROW()使用</span><br><span class="line">	ROW_NUMBER() OVER(PARTITION BY COLUMN1 ORDER BY COLUMN2)</span><br><span class="line">	意思是先根据COLUMN1进行结果集分分组，结果集内部按照COLUMN2排序。</span><br><span class="line">	在使用 row_number() over()函数的时候，over()里面的分组以及排序的执行晚于 where、group by、order by 的执行。</span><br><span class="line">总结：</span><br><span class="line">	会按照顺序给出排序，如对10,10,9,8进行排序，输出结果为1,2,3,4</span><br></pre></td></tr></table></figure>



<h3 id="RANK-hive"><a href="#RANK-hive" class="headerlink" title="RANK	(hive)"></a>RANK	(hive)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">	<span class="built_in">RANK</span>()</span><br><span class="line">常用组合：</span><br><span class="line">	需搭配窗口函数<span class="type">ROW</span>()使用</span><br><span class="line">总结：</span><br><span class="line">	排序相同是排名会重复，总数不会变，如对<span class="number">10</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">8</span>进行排序，输出结果为<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span></span><br></pre></td></tr></table></figure>



<h3 id="DENSE-RANK-hive"><a href="#DENSE-RANK-hive" class="headerlink" title="DENSE_RANK	(hive)"></a>DENSE_RANK	(hive)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">	<span class="built_in">DENSE_RANK</span>()</span><br><span class="line">常用组合：</span><br><span class="line">	需搭配窗口函数<span class="type">ROW</span>()使用</span><br><span class="line">总结：</span><br><span class="line">	排序相同时排名会重复，总数会减少，如对<span class="number">10</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">8</span>进行排序，输出结果为<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br></pre></td></tr></table></figure>



<h3 id="FIELD-hive-mysql"><a href="#FIELD-hive-mysql" class="headerlink" title="FIELD 	(hive,mysql)"></a>FIELD 	(hive,mysql)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">		FIELD(col,value_1,value_2,...)</span><br><span class="line">用途：</span><br><span class="line">	用于排序时给出指定的排序顺序。</span><br><span class="line">用法：</span><br><span class="line">	第一个参数col为排序的列，后面的参数<span class="keyword">value</span>可以给出排序顺序，查询结果将按照给定的值排序来进行排序。</span><br><span class="line">常用组合：</span><br><span class="line">	sort <span class="keyword">by</span> field(col,value_1,value_2,...), <span class="keyword">order</span> <span class="keyword">by</span> field(col,value_1,value_2,...)</span><br><span class="line">实例：</span><br><span class="line">	<span class="keyword">select</span> name,age</span><br><span class="line">	<span class="keyword">from</span> student </span><br><span class="line">	<span class="keyword">order</span> <span class="keyword">by</span> field(age,<span class="number">12</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">14</span>)</span><br><span class="line">	输出结果将按给定的值顺序来排序</span><br></pre></td></tr></table></figure>



<h2 id="时间函数"><a href="#时间函数" class="headerlink" title="时间函数"></a>时间函数</h2><h3 id="DATEDIFF-hive"><a href="#DATEDIFF-hive" class="headerlink" title="DATEDIFF	(hive)"></a>DATEDIFF	(hive)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">		DATEDIFF(endDate,startDate)</span><br><span class="line">用途：</span><br><span class="line">	返回endDate和startDate相差的天数，返回值是整数。</span><br><span class="line">注意：</span><br><span class="line">	参数类型最好保持一致</span><br><span class="line">	该函数是hive中的形式，与mysql中的同名函数datediff用法不同。</span><br></pre></td></tr></table></figure>



<h3 id="DATE-ADD（hive）"><a href="#DATE-ADD（hive）" class="headerlink" title="DATE_ADD（hive）"></a>DATE_ADD（hive）</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">	DATE_ADD(<span class="type">date</span>, <span class="type">int</span>)</span><br><span class="line">用途：</span><br><span class="line">	返回某日期增加<span class="type">int</span>天(当<span class="type">int</span>为正数)或者减少<span class="type">int</span>天(当<span class="type">int</span>为负数)后得到的日期</span><br><span class="line">注意：</span><br><span class="line">	<span class="type">date</span>的形式必须是标准形式，即<span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>或 <span class="string">&#x27;yyyy-MM-dd&#x27;</span></span><br><span class="line">	第二个参数可以是正数也可以是负数。</span><br></pre></td></tr></table></figure>



<h3 id="DATE-SUB-hive"><a href="#DATE-SUB-hive" class="headerlink" title="DATE_SUB	(hive)"></a>DATE_SUB	(hive)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">效果与date_add函数相反。</span><br></pre></td></tr></table></figure>



<h3 id="DATE-FORMAT-hive"><a href="#DATE-FORMAT-hive" class="headerlink" title="DATE_FORMAT	(hive)"></a>DATE_FORMAT	(hive)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">	DATE_FORMAT(<span class="type">date</span>,format);</span><br><span class="line">用途：</span><br><span class="line">	格式化日期或日期字符串</span><br><span class="line">用法：</span><br><span class="line">	第一个参数可以为日期或日期字符串，第二个参数为日期格式，函数将返回格式化后的日期字符串。</span><br><span class="line">注意：</span><br><span class="line">	如果日期的月或日是不符合常理的数字，且大于常规值，则返回结果是计算后的结果，例如date_format(<span class="string">&#x27;2022-16-1&#x27;</span>,<span class="string">&#x27;yyyy-MM-dd&#x27;</span>)的返回值为<span class="string">&#x27;2023-04-01&#x27;</span></span><br></pre></td></tr></table></figure>



<h3 id="UNIX-TIMESTAMP-hive"><a href="#UNIX-TIMESTAMP-hive" class="headerlink" title="UNIX_TIMESTAMP	(hive)"></a>UNIX_TIMESTAMP	(hive)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">	UNIX_TIMESTAMP(dateString,[format])</span><br><span class="line">用途：</span><br><span class="line">	返回参数dateString对应的时间戳，时间戳为<span class="number">10</span>位，单位为秒</span><br><span class="line">用法：</span><br><span class="line">	如果dateString满足<span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>的形式，可以直接使用UNIX_TIMESTAMP(dateString)得到其时间戳，如果不满足该形式，则可以在函数内使用格式参数，如UNIX_TIMESTAMP(<span class="string">&#x27;20220719&#x27;</span>,<span class="string">&#x27;yyyyMMdd&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h3 id="FROM-UNIXTIME-hive"><a href="#FROM-UNIXTIME-hive" class="headerlink" title="FROM_UNIXTIME	(hive)"></a>FROM_UNIXTIME	(hive)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">	FROM_UNIXTIME(unix_timestamp,format)</span><br><span class="line">用途：</span><br><span class="line">	将时间戳unix_timestamp按照时间格式format进行转换</span><br></pre></td></tr></table></figure>



<h3 id="获取日期中的年月日时分秒周数等-hiveQL"><a href="#获取日期中的年月日时分秒周数等-hiveQL" class="headerlink" title="获取日期中的年月日时分秒周数等	(hiveQL)"></a>获取日期中的年月日时分秒周数等	(hiveQL)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">	<span class="keyword">year</span>(<span class="type">date</span><span class="operator">/</span><span class="type">timestamp</span>)<span class="comment">----------返回日期中的年</span></span><br><span class="line">	<span class="keyword">month</span>(<span class="type">date</span><span class="operator">/</span><span class="type">timestamp</span>)<span class="comment">----------返回日期中的月</span></span><br><span class="line">	<span class="keyword">day</span>(<span class="type">date</span><span class="operator">/</span><span class="type">timestamp</span>)<span class="comment">----------返回日期中的日</span></span><br><span class="line">	<span class="keyword">hour</span>(<span class="type">date</span><span class="operator">/</span><span class="type">timestamp</span>)<span class="comment">----------返回日期中的小时</span></span><br><span class="line">	<span class="keyword">minute</span>(<span class="type">date</span><span class="operator">/</span><span class="type">timestamp</span>)<span class="comment">----------返回日期中的分钟</span></span><br><span class="line">	<span class="keyword">second</span>(<span class="type">date</span><span class="operator">/</span><span class="type">timestamp</span>)<span class="comment">----------返回日期中的秒</span></span><br><span class="line">	weekofyear(<span class="type">date</span><span class="operator">/</span><span class="type">timestamp</span>)<span class="comment">----------返回日期是当年的哪一周</span></span><br></pre></td></tr></table></figure>



<h3 id="获取日期中的年月日时分秒周数等-PostgreSql-Mysql-Oracle"><a href="#获取日期中的年月日时分秒周数等-PostgreSql-Mysql-Oracle" class="headerlink" title="获取日期中的年月日时分秒周数等	(PostgreSql,Mysql,Oracle)"></a>获取日期中的年月日时分秒周数等	(PostgreSql,Mysql,Oracle)</h3><h3 id="EXTRACT"><a href="#EXTRACT" class="headerlink" title="EXTRACT"></a>EXTRACT</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">	<span class="built_in">extract</span>(<span class="keyword">year</span><span class="operator">|</span><span class="keyword">month</span><span class="operator">|</span><span class="keyword">day</span><span class="operator">|</span><span class="keyword">hour</span><span class="operator">|</span><span class="keyword">minute</span><span class="operator">|</span><span class="keyword">second</span><span class="operator">|</span>week <span class="keyword">from</span> [类型声明] <span class="type">date</span><span class="operator">/</span><span class="type">interval</span>类型值)</span><br><span class="line">如：</span><br><span class="line">	<span class="built_in">extract</span>(week <span class="keyword">from</span> <span class="type">timestamp</span> <span class="string">&#x27;2022-08-01&#x27;</span>) <span class="comment">----获取8月1日处于2022年的第几周</span></span><br></pre></td></tr></table></figure>



<h3 id="TRUNC"><a href="#TRUNC" class="headerlink" title="TRUNC"></a>TRUNC</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">	TRUNC(<span class="type">date</span>, format)</span><br><span class="line">	TRUNC(number,[decimals])</span><br><span class="line">用途：</span><br><span class="line">	TRUNC函数返回以指定元素格式截去一部分的日期值，或者直接对数字格式的数据进行截断</span><br><span class="line">用法：</span><br><span class="line">	第一个参数若为数字number，number为待截取处理的数值，decimals指明需保留小数点后面的位数，为可选项，忽略此项时会截去所有小数部分，第二个参数可以为负数，表示为小数点左边指定位数后面的部分截去，即均以<span class="number">0</span>记。与取整类似，比如参数为<span class="number">1</span>即取整到十分位，如果是<span class="number">-1</span>，则是取整到十位，以此类推；如果所设置的参数为负数，且负数的位数大于整数的字节数的话，则返回为<span class="number">0</span>。如：TRUNC(<span class="number">89.985</span>,<span class="number">-3</span>)<span class="operator">=</span><span class="number">0</span>。</span><br><span class="line">	第一个参数若为日期值<span class="type">date</span>，形式需为标准形式，第二个参数format为截断粒度，如trunc(<span class="string">&#x27;2020-05-02&#x27;</span>, <span class="string">&#x27;YY&#x27;</span>) <span class="operator">=</span> <span class="string">&#x27;2020-01-01&#x27;</span>, format值参考如下：</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>Unit</th>
<th>Valid format parameters</th>
</tr>
</thead>
<tbody><tr>
<td>Year</td>
<td>SYYYY, YYYY, YEAR, SYEAR, YYY, YY, Y</td>
</tr>
<tr>
<td>ISO Year</td>
<td>IYYY, IY, I</td>
</tr>
<tr>
<td>Quarter</td>
<td>Q</td>
</tr>
<tr>
<td>Month</td>
<td>MONTH, MON, MM, RM</td>
</tr>
<tr>
<td>Week</td>
<td>WW</td>
</tr>
<tr>
<td>IW</td>
<td>IW</td>
</tr>
<tr>
<td>W</td>
<td>W</td>
</tr>
<tr>
<td>Day</td>
<td>DDD, DD, J</td>
</tr>
<tr>
<td>Start day of the week</td>
<td>DAY, DY, D</td>
</tr>
<tr>
<td>Hour</td>
<td>HH, HH12, HH24</td>
</tr>
<tr>
<td>Minute</td>
<td>MI</td>
</tr>
</tbody></table>
<h3 id="ADD-MONTHS-hive"><a href="#ADD-MONTHS-hive" class="headerlink" title="ADD_MONTHS	(hive)"></a>ADD_MONTHS	(hive)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">	ADD_MONTHS(<span class="type">date</span>, number)</span><br><span class="line">用途：</span><br><span class="line">	计算日期增减几个月后的日期</span><br><span class="line">用法:</span><br><span class="line">	第一个参数<span class="type">date</span>为日期，需为标准形式，第二个参数为增量值，可以为负数，计算结果为日期增减增量值个月份后的结果。</span><br></pre></td></tr></table></figure>



<h3 id="NEXT-DAY-hive"><a href="#NEXT-DAY-hive" class="headerlink" title="NEXT_DAY	(hive)"></a>NEXT_DAY	(hive)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">	NEXT_DAY(<span class="type">date</span>, weekday)</span><br><span class="line">用途：</span><br><span class="line">	可以取到当前日期的下一个周一的日期，方便进行其他操作。</span><br><span class="line">用法：</span><br><span class="line">	第一个参数<span class="type">date</span>为日期，形式需为标准形式，且粒度至少到日；第二个参数weekday是指定周几，该参数可以使用全拼，也可以使用全拼的前两位或前三位作为缩写，建议使用全拼比较直观。</span><br><span class="line">	weekday取值：Monday，Tuesday、Wednesday、Thursday、Friday、Saturday、Sunday.</span><br><span class="line">示例：</span><br><span class="line">	取日期下一周的周一</span><br><span class="line">	<span class="keyword">select</span> NEXT_DAY(<span class="string">&#x27;2022-10-26&#x27;</span>, <span class="string">&#x27;MONDAY&#x27;</span>)</span><br><span class="line">	<span class="keyword">select</span> NEXT_DAY(<span class="string">&#x27;2022-10-26&#x27;</span>, <span class="string">&#x27;MO&#x27;</span>)</span><br><span class="line">	<span class="keyword">select</span> NEXT_DAY(<span class="string">&#x27;2022-10-26&#x27;</span>, <span class="string">&#x27;MO&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><h3 id="CONCAT-hive"><a href="#CONCAT-hive" class="headerlink" title="CONCAT	(hive)"></a>CONCAT	(hive)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">	CONCAT(STRING_1,STRING_2,.....)</span><br><span class="line">用途：</span><br><span class="line">	字符串拼接</span><br><span class="line">用法：</span><br><span class="line">	按顺序将传入的字符串参数拼接成一个字符串。</span><br></pre></td></tr></table></figure>



<h3 id="CONCAT-WS-hive"><a href="#CONCAT-WS-hive" class="headerlink" title="CONCAT_WS	(hive)"></a>CONCAT_WS	(hive)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">	CONCAT_WS(separator, str1, str2, ...)</span><br><span class="line">用途：</span><br><span class="line">	字符串拼接时指定分隔符</span><br><span class="line">注意：</span><br><span class="line">	如果分隔符是 <span class="keyword">NULL</span>，返回值也将为 <span class="keyword">NULL</span>。这个函数会跳过分隔符参数后的任何 <span class="keyword">NULL</span> 和空字符串。分隔符将被加到被连接的字符串之间;</span><br><span class="line">其他说明：</span><br><span class="line">	该函数返回值类型为字符串类型</span><br></pre></td></tr></table></figure>



<h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><h3 id="COLLECT-SET-hive"><a href="#COLLECT-SET-hive" class="headerlink" title="COLLECT_SET	(hive)"></a>COLLECT_SET	(hive)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">	COLLECT_SET(expression)</span><br><span class="line">用途：</span><br><span class="line">	执行列转行操作，可以按照某些列分组，然后将剩余的一列的多行的值放在一个数组里转成一行。如果有多列想要转成一行，可以将这些列使用其他函数(例如concat、concat_ws、map等函数)拼接成一列，然后使用该函数转成一行，再想办法将拼接的列分开即可。</span><br><span class="line">	注意该函数会根据列值进行去重汇总，产生array类型字段。该函数为聚合函数，不在聚合范围内的列需要进行group by操作</span><br><span class="line">	即可以将列数据转为一行</span><br><span class="line">	如果不希望对聚合字段去重，可以使用下面的COLLECT_LIST() 函数</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 现有数据,存放在表student中</span><br><span class="line">age		name</span><br><span class="line">13		小明</span><br><span class="line">13		小红</span><br><span class="line">14		小伟</span><br><span class="line">-- 按照年龄分组，将名字聚合成一行</span><br><span class="line">SELECT </span><br><span class="line">	age </span><br><span class="line">	,COLLECT_SET(name) as names</span><br><span class="line">FROM </span><br><span class="line">	student</span><br><span class="line">GROUP BY </span><br><span class="line">	age</span><br><span class="line">-- 将取得如下结果</span><br><span class="line">age		names</span><br><span class="line">13		[小明，小红]</span><br><span class="line">14		[小伟]</span><br></pre></td></tr></table></figure>



<h3 id="COLLECT-LIST"><a href="#COLLECT-LIST" class="headerlink" title="COLLECT_LIST()"></a>COLLECT_LIST()</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">	COLLECT_LIST(expression)</span><br><span class="line">用途：</span><br><span class="line">	执行列转行操作，可以按照某些列分组，然后将剩余的一列的多行的值放在一个数组里转成一行。如果有多列想要转成一行，可以将这些列使用其他函数(例如concat、concat_ws、map等函数)拼接成一列，然后使用该函数转成一行，再想办法将拼接的列分开即可。</span><br><span class="line">	函数不会根据列值进行去重汇总，保留所有列值，产生array类型字段。该函数为聚合函数，不在聚合范围内的列需要进行group by操作</span><br><span class="line">	即可以将列数据转为一行</span><br><span class="line">	如果希望聚合时对聚合列去重，可以使用上面的COLLECT_SET() 函数</span><br></pre></td></tr></table></figure>





<h2 id="窗口函数"><a href="#窗口函数" class="headerlink" title="窗口函数"></a>窗口函数</h2><h3 id="OVER-hive"><a href="#OVER-hive" class="headerlink" title="OVER	(hive)"></a>OVER	(hive)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">	<span class="keyword">OVER</span>()</span><br><span class="line">用途：</span><br><span class="line">	指定分析函数工作的窗口大小，一般放在函数后面</span><br><span class="line">用法：</span><br><span class="line">	<span class="keyword">over</span>函数是对每一条数据都进行开窗，当<span class="keyword">over</span>括号中没有传入参数时，窗口大小默认为数据集大小。当使用distribute <span class="keyword">by</span> <span class="operator">/</span> sort <span class="keyword">by</span> <span class="operator">/</span> <span class="keyword">order</span> <span class="keyword">by</span>等关键字进行限制时，窗口大小相应地发生变化</span><br><span class="line">	</span><br><span class="line">相关参数(传入<span class="keyword">over</span>后的括号内使用)：</span><br><span class="line">	<span class="keyword">CURRENT</span> <span class="type">ROW</span>: 当前行</span><br><span class="line">	n PRECEDING: 往前n行数据</span><br><span class="line">	n FOLLOWING: 往后n行数据</span><br><span class="line">	UNBOUNDED: 起点</span><br><span class="line">	UNBOUNDED PRECEDING：表示从前面的起点</span><br><span class="line">	UNBOUNDED FOLLOWING：表示到后面的终点</span><br><span class="line">常配合使用的函数：</span><br><span class="line">	窗口函数可以对函数工作范围进行开窗，经常配合使用<span class="keyword">over</span>()的函数有以下几个:</span><br><span class="line">	<span class="built_in">row_number</span>():为结果集的每一行分配一个连续的整数，从<span class="number">1</span>开始</span><br><span class="line">	<span class="built_in">lag</span>(col,n,<span class="keyword">default</span>): 往前第n行数据，第一个参数指定列，第三个参数是当前面第n行该列不存在时的默认值</span><br><span class="line">	<span class="built_in">lead</span>(col,n,<span class="keyword">default</span>)：往后第n行数据，第一个参数指定列，第三个参数是当后面第n行该列不存在时的默认值</span><br></pre></td></tr></table></figure>



<h3 id="LAG"><a href="#LAG" class="headerlink" title="LAG"></a>LAG</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">	LAG(col, n, DEFAULT)</span><br><span class="line">用途：</span><br><span class="line">	用于获取当前行之前的行的值，可以用于计算当前行与之前行之间的值的差异或百分比变化等。</span><br><span class="line">用法：</span><br><span class="line">	结合OVER()函数开窗使用，在LAG函数中，第一个参数为列名；第二个参数为偏移量，即往前多少行；最后一个参数为默认值，就是如果往前n行没有值的话，就取这个默认值，如果不指定默认值，则默认值为NULL</span><br><span class="line">示例：</span><br><span class="line">SELECT * FROM TALBE;</span><br><span class="line">	name	time</span><br><span class="line">&gt; 	name1	2023-09-01 </span><br><span class="line">	name1 	2023-09-03</span><br><span class="line">	name1 	2023-09-02</span><br><span class="line">	name2 	2023-09-02</span><br><span class="line">	name2 	2023-09-01</span><br><span class="line">	name2 	2023-09-04</span><br><span class="line">SELECT </span><br><span class="line">	name</span><br><span class="line">	,time</span><br><span class="line">	,LAG(time, 1, &#x27;1970-01-01&#x27;) OVER(PARTITION BY name ORDER BY time) as last_1_time</span><br><span class="line">	,LAG(time, 2) OVER(PARTITION BY name ORDER BY time) as last_2_time</span><br><span class="line">FROM </span><br><span class="line">	TABLE</span><br><span class="line">	name	time		last_1_time		last_2_time</span><br><span class="line">&gt;	name1 	2023-09-01	1970-01-01		NULL</span><br><span class="line">	name1 	2023-09-02	2023-09-01		NULL</span><br><span class="line">	name1 	2023-09-03	2023-09-02		2023-09-01</span><br><span class="line">	name2	2023-09-01	1970-01-01		NULL</span><br><span class="line">	name2	2023-09-02	2023-09-01		NULL</span><br><span class="line">	name2	2023-09-04	2023-09-02		2023-09-01</span><br></pre></td></tr></table></figure>



<h3 id="LEAD"><a href="#LEAD" class="headerlink" title="LEAD"></a>LEAD</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">	LEAD(col, n, DEFAULT)</span><br><span class="line">用途：</span><br><span class="line">	用于获取当前行之后的行的值，可以用于计算当前行与之后行之间的值的差异或百分比变化等。</span><br><span class="line">用法：</span><br><span class="line">	结合OVER()函数开窗使用，在LAG函数中，第一个参数为列名；第二个参数为偏移量，即往后多少行；最后一个参数为默认值，就是如果往后n行没有值的话，就取这个默认值，如果不指定默认值，则默认值为NULL</span><br><span class="line">示例：</span><br><span class="line">SELECT * FROM TALBE;</span><br><span class="line">	name 	time</span><br><span class="line">&gt; 	name1	2023-09-01 </span><br><span class="line">	name1 	2023-09-03</span><br><span class="line">	name1 	2023-09-02</span><br><span class="line">	name2 	2023-09-02</span><br><span class="line">	name2 	2023-09-01</span><br><span class="line">	name2 	2023-09-04</span><br><span class="line">SELECT </span><br><span class="line">	name</span><br><span class="line">	,time</span><br><span class="line">	,LEAD(time, 1, &#x27;1970-01-01&#x27;) OVER(PARTITION BY name ORDER BY time) as after_1_time</span><br><span class="line">	,LEAD(time, 2) OVER(PARTITION BY name ORDER BY time) as after_2_time</span><br><span class="line">FROM </span><br><span class="line">	TABLE</span><br><span class="line">	</span><br><span class="line">	name	time		after_1_time	after_2_time</span><br><span class="line">&gt;	name1 	2023-09-01	2023-09-02		2023-09-03</span><br><span class="line">	name1 	2023-09-02	2023-09-03		NULL</span><br><span class="line">	name1 	2023-09-03	1970-01-01		NULL</span><br><span class="line">	name2	2023-09-01	2023-09-02		2023-09-04</span><br><span class="line">	name2	2023-09-02	2023-09-04		NULL</span><br><span class="line">	name2	2023-09-04	1970-01-01		NULL</span><br></pre></td></tr></table></figure>



<h2 id="数据类型处理"><a href="#数据类型处理" class="headerlink" title="数据类型处理"></a>数据类型处理</h2><h3 id="CAST"><a href="#CAST" class="headerlink" title="CAST"></a>CAST</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">	CAST(expression AS data_type)</span><br><span class="line">用途：</span><br><span class="line">	将字段类型转换成指定数据类型，显式类型转换</span><br><span class="line">用法：</span><br><span class="line">	expression:任何有效的字段或者表达式</span><br><span class="line">	data_type:要转换的数据类型</span><br><span class="line">特殊说明：</span><br><span class="line">	1.如果将浮点型的数据转换成int类型的，内部操作是通过round()或者floor()函数来实现的，而不是通过cast实现</span><br><span class="line">	2.对于BINARY类型的数据，只能将BINARY类型的数据转换成STRING类型。如果你确信BINARY类型数据是一个数字类型(a number)，这时候你可以利用嵌套的cast操作，比如a是一个BINARY，且它是一个数字类型，那么你可以用下面的查询：</span><br><span class="line">	SELECT (cast(cast(a as string) as double )) from src;</span><br><span class="line">	3.对于Date类型的数据，只能在Date、Timestamp以及String之间进行转换	</span><br></pre></td></tr></table></figure>



<h2 id="集合函数"><a href="#集合函数" class="headerlink" title="集合函数"></a>集合函数</h2><h3 id="SIZE"><a href="#SIZE" class="headerlink" title="SIZE"></a>SIZE</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">	SIZE(collection)</span><br><span class="line">用途：</span><br><span class="line">	判断集合大小</span><br><span class="line">用法：</span><br><span class="line">	collection：一个集合类型的字段，或者最终返回类型为集合类型的表达式</span><br><span class="line">特殊说明：</span><br><span class="line">	该函数返回值类型为INT,表示集合的大小</span><br></pre></td></tr></table></figure>





<h3 id="MAP"><a href="#MAP" class="headerlink" title="MAP"></a>MAP</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">	MAP(col1, col2)</span><br><span class="line">用途：</span><br><span class="line">	使用两列构造一个map列</span><br><span class="line">用法：</span><br><span class="line">	col1: 当做key的列</span><br><span class="line">	col2: 当做value的列</span><br><span class="line">其他说明：</span><br><span class="line">	可以使用[]运算符获取map中的值</span><br></pre></td></tr></table></figure>



<h3 id="MAP-KEYS"><a href="#MAP-KEYS" class="headerlink" title="MAP_KEYS"></a>MAP_KEYS</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">	MAP_KEYS(map_expression)</span><br><span class="line">用途：</span><br><span class="line">	获取map中的所有key</span><br><span class="line">用法：</span><br><span class="line">	map_expression: map类型的列，或者最终返回类型为map类型的表达式</span><br><span class="line">其他说明：</span><br><span class="line">	该函数返回一个由map中的所有key组成的数组</span><br></pre></td></tr></table></figure>



<h3 id="MAP-VALUES"><a href="#MAP-VALUES" class="headerlink" title="MAP_VALUES"></a>MAP_VALUES</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">	MAP_VALUES(map_expression)</span><br><span class="line">用途：</span><br><span class="line">	获取map中的所有value</span><br><span class="line">用法：</span><br><span class="line">	map_expression: map类型的列，或者最终返回类型为map类型的表达式</span><br><span class="line">其他说明：</span><br><span class="line">	该函数返回一个由map中的所有value组成的数组</span><br></pre></td></tr></table></figure>



<h3 id="STR-TO-MAP"><a href="#STR-TO-MAP" class="headerlink" title="STR_TO_MAP"></a>STR_TO_MAP</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">	STR_TO_MAP(string, 键值对之间的分隔符， 键值之间的分隔符)</span><br><span class="line">用途：</span><br><span class="line">	将字符串转换为map</span><br><span class="line">其他说明：</span><br><span class="line">	指定的两个分隔符，string本身应该携带这两种分隔符，否则无法进行分割</span><br></pre></td></tr></table></figure>



<h3 id="ARRAY"><a href="#ARRAY" class="headerlink" title="ARRAY"></a>ARRAY</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">	ARRAY(col1, col2, col3, ……)</span><br><span class="line">用途：</span><br><span class="line">	根据多列或者多个值构造一个数组</span><br><span class="line">用法：</span><br><span class="line">	指定要作为数组元素的列，即可按照每一列的值来构造数组</span><br></pre></td></tr></table></figure>





<h3 id="ARRAY-CONTAINS"><a href="#ARRAY-CONTAINS" class="headerlink" title="ARRAY_CONTAINS"></a>ARRAY_CONTAINS</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">	ARRAY_CONTAINS(array_expression, value)</span><br><span class="line">用途：</span><br><span class="line">	判断数组中是否包含指定的元素</span><br><span class="line">用法：</span><br><span class="line">	array_expression: array类型的字段，或者最终返回类型为array类型的表达式</span><br><span class="line">	value: 指定值。需要判断指定值是否在数组元素中</span><br><span class="line">其他说明：</span><br><span class="line">	该函数会返回一个布尔类型值true或false，表明指定值是否在数组元素中</span><br></pre></td></tr></table></figure>



<h3 id="SORT-ARRAY"><a href="#SORT-ARRAY" class="headerlink" title="SORT_ARRAY"></a>SORT_ARRAY</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">	SORT_ARRAY(array_expresson)</span><br><span class="line">用途：</span><br><span class="line">	对数组元素进行排序</span><br><span class="line">用法：</span><br><span class="line">	array_expression: 需要进行排序的array类型的字段，或者最终返回类型为array类型的表达式</span><br><span class="line">其他说明：</span><br><span class="line">	该函数会对数组元素，按照自然顺序作升序排列，没有提供降序排列方式。如果需要降序排列，可以添加辅助列进行处理。</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Hadoop</category>
        <category>Hive</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Hive</tag>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>数据开发思路</title>
    <url>/Hadoop/Hive/%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E6%80%9D%E8%B7%AF/</url>
    <content><![CDATA[<h2 id="数据开发思路"><a href="#数据开发思路" class="headerlink" title="数据开发思路"></a>数据开发思路</h2><h3 id="需求（作图分析）"><a href="#需求（作图分析）" class="headerlink" title="需求（作图分析）"></a>需求（作图分析）</h3><ul>
<li>开发内容涉及到哪几个模块的功能，针对每个模块进行分析：<ul>
<li>该模块功能在哪里实现？Hive、gp、报表工具？</li>
<li>该模块间是否与其他模块有关联？如果存在关联？因为此关联每个模块需要注意哪些问题？</li>
<li>需要哪些上层表的支持，针对每张上层表进行分析：<ul>
<li>使用该表的目的是什么？该表本身的逻辑是什么？是否需要连接其他表？如何连接？功能实现需要使用哪些字段？数据集成时分布分区又需要哪些字段？分区需要那些字段？由于该表的性质，是否需要新增标识字段（比如网器工单表可以增加网器标识字段）？针对该表以及需要连接的表的字段进行分析：<ul>
<li>字段是否有空值？空值如何处理？字段的格式和含义是什么？连接键是否为空？字段取值是否有需求之外的值（脏数据）</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><ul>
<li>注意代码格式规范</li>
<li>注意语法正确性：<ul>
<li>标点符号使用英文标点</li>
<li>子句中有多个字段时，中间的字段不要丢失逗号，最后的字段不要加逗号</li>
<li>打字不宜过快，保证字段名表名的正确性</li>
<li></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Hadoop</category>
        <category>Hive</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>开发经验</tag>
        <tag>ETL</tag>
      </tags>
  </entry>
  <entry>
    <title>数据开发要点</title>
    <url>/Hadoop/Hive/%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E8%A6%81%E7%82%B9/</url>
    <content><![CDATA[<h1 id="数据开发要点"><a href="#数据开发要点" class="headerlink" title="数据开发要点"></a>数据开发要点</h1><ul>
<li><p>多表连接时，首行连接语句中指明分区，动态分区则指明变量(如：pdate&#x3D;’${a}’),指明分区后，主体的select语句中不必再写分区字段。</p>
</li>
<li><p>多表连接时，需要特别注意主表的连接字段是否为NULL或空字符串，需要的时候可以进行过滤，以下是一种过滤方式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">coalesce</span>(join_field,<span class="string">&#x27;&#x27;</span>)<span class="operator">!=</span><span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>分区表的多表连接，因为一般要指定两个表的分区字段相同，所以两个表的select语句中都要包含分区字段。</p>
</li>
<li><p>建表语句末尾加分号。</p>
</li>
<li><p>注意变量命名，特别是在使用了函数处理之后，在多表联查时很容易出现问题，查每个表时，要保证字段名字正确，使用函数处理的字段在处理结束后要使用<code>as</code>关键字命名，例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> hdw_opnwp.purify_water_unnet_device_bind_details_model <span class="keyword">partition</span>(pdate <span class="operator">=</span> <span class="string">&#x27;$&#123;a&#125;&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">t1.bind_unbind_ind</span><br><span class="line">,<span class="built_in">coalesce</span>(t1.net_unnet_flag,t2.net_unnet_flag)</span><br><span class="line">,t1.l_bind_user_num <span class="keyword">as</span> user_num</span><br><span class="line">,t1.l_bind_machine_seq_num <span class="keyword">as</span> machine_seq_num</span><br><span class="line">,if(<span class="built_in">coalesce</span>(t1.l_bind_device_model_num,<span class="string">&#x27;&#x27;</span>)<span class="operator">=</span><span class="string">&#x27;&#x27;</span>,if(length(t1.l_bind_machine_seq_num)<span class="operator">=</span><span class="number">20</span>,substr(t1.l_bind_machine_seq_num,<span class="number">1</span>,<span class="number">9</span>),if(length(t1.l_bind_machine_seq_num)<span class="operator">=</span><span class="number">22</span>,substr(t1.l_bind_machine_seq_num,<span class="number">1</span>,<span class="number">11</span>),<span class="keyword">NULL</span>)),t1.l_bind_device_model_num) <span class="keyword">as</span> device_model_num<span class="comment">--如果设备型号为空，从机编中补全设备型号</span></span><br><span class="line">,t1.l_bind_bind_tm</span><br><span class="line">,t1.l_bind_unbind_tm</span><br><span class="line">,t2.industry_cd</span><br><span class="line">,t2.industry_desc</span><br><span class="line">,t2.device_model_desc</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> bind_unbind_ind</span><br><span class="line">    ,net_unnet_flag</span><br><span class="line">    ,l_bind_user_num</span><br><span class="line">    ,l_bind_machine_seq_num</span><br><span class="line">    ,l_bind_device_model_num</span><br><span class="line">    ,l_bind_bind_tm</span><br><span class="line">    ,l_bind_unbind_tm</span><br><span class="line">    ,pdate</span><br><span class="line">    <span class="keyword">from</span> hdw_opnwp.purify_water_unnet_device_bind_details</span><br><span class="line">    <span class="keyword">where</span> pdate <span class="operator">=</span> <span class="string">&#x27;$&#123;a&#125;&#x27;</span></span><br><span class="line">) t1</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span>(</span><br><span class="line">    <span class="keyword">select</span> if(device_model_num <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>, <span class="keyword">NULL</span>, device_model_num) <span class="keyword">as</span> device_model_num</span><br><span class="line">    ,industry_cd</span><br><span class="line">    ,if(industry_desc <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>, <span class="keyword">NULL</span>, industry_desc) <span class="keyword">as</span> industry_desc <span class="comment">----如果这里没有重新命名，上面连接会出错，提示非法字段</span></span><br><span class="line">    ,if(net_unnet_flag <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>, <span class="keyword">NULL</span>, net_unnet_flag) <span class="keyword">as</span> net_unnet_flag<span class="comment">----如果这里没有重新命名，上面连接会出错，提示非法字段</span></span><br><span class="line">    ,if(device_model_desc <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>, <span class="keyword">NULL</span>, device_model_desc) <span class="keyword">as</span> device_model_desc<span class="comment">----如果这里没有重新命名，上面连接会出错，提示非法字段</span></span><br><span class="line">    ,pdate</span><br><span class="line">    <span class="keyword">from</span> hdw_dwb.t02_dim_dev_prod</span><br><span class="line">    <span class="keyword">where</span> pdate <span class="operator">=</span> <span class="string">&#x27;$&#123;a&#125;&#x27;</span></span><br><span class="line">    <span class="keyword">and</span> industry_cd <span class="operator">=</span> <span class="string">&#x27;V1441&#x27;</span></span><br><span class="line">) t2</span><br><span class="line"><span class="keyword">on</span> t1.l_bind_device_model_num <span class="operator">=</span> t2.device_model_num<span class="comment">--条件中使用的字段名需要注意</span></span><br><span class="line"><span class="keyword">where</span> t1.pdate <span class="operator">=</span> t2.pdate </span><br></pre></td></tr></table></figure>
</li>
<li><p>建表时，注释内也不要出现英文分号“ ; ”，因为分号代表建表语句的结束，会引发错误。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Hadoop</category>
        <category>Hive</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>开发经验</tag>
        <tag>ETL</tag>
      </tags>
  </entry>
  <entry>
    <title>数据开发语法细节--实战经验</title>
    <url>/Hadoop/Hive/%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E8%AF%AD%E6%B3%95%E7%BB%86%E8%8A%82%E2%80%94%E2%80%94%E5%AE%9E%E6%88%98%E7%BB%8F%E9%AA%8C/</url>
    <content><![CDATA[<h1 id="数据开发语法细节——实战经验"><a href="#数据开发语法细节——实战经验" class="headerlink" title="数据开发语法细节——实战经验"></a>数据开发语法细节——实战经验</h1><h2 id="SQL执行顺序问题"><a href="#SQL执行顺序问题" class="headerlink" title="SQL执行顺序问题"></a>SQL执行顺序问题</h2><ul>
<li><p>hiveSQL</p>
<blockquote>
<p><strong>from .. where .. join .. on .. select .. group by .. select .. having .. distinct .. order by .. limit .. union&#x2F;union all</strong></p>
<p>Hive 是默认开启 map 端的 group by 分组的，所以<strong>在 map 端是 select 先执行，在 reduce 端是 group by 先执行</strong></p>
</blockquote>
</li>
</ul>
<h2 id="别名问题"><a href="#别名问题" class="headerlink" title="别名问题"></a>别名问题</h2><p>别名问题本质上也是SQL的执行顺序的问题，每个语句在书写时是否应该使用别名应该从SQL执行顺序的角度出发，当语句中需要用到有别名的字段时，遵循以下原则：</p>
<p>​        <strong>如果当前语句优先于字段添加别名这一动作先执行，则当前语句使用该字段不应该使用别名，因为执行到该语句时字段还没有别名。如果当前语句执行前字段添加别名这一动作已经执行完成，则当前语句可以使用该字段的别名。</strong></p>
<h2 id="连接中的问题"><a href="#连接中的问题" class="headerlink" title="连接中的问题"></a>连接中的问题</h2><p>连接可以是多表连接，也可以是子查询的连接</p>
<ul>
<li><p>字段名问题</p>
<blockquote>
<p>连接中的一个注意点是如果连接的两个表或子查询有相同的字段，则需要通过起别名的方式使其区分开来</p>
<p><strong>但是在等值连接中（隐式内连接），不需要考虑字段名相同的问题，只要连接的两表或子查询的名字能区分开来即可。</strong></p>
</blockquote>
</li>
<li><p>on 、where 概念区分</p>
<blockquote>
<p>连接中的on是两表的连接条件，符合条件的两条数据会连接形成一条数据</p>
<p>连接的每个表中都可以带有一个where子句，这两个where子句限定了各自的数据范围</p>
<p>整个连接后还可以加一个where子句，这个where子句可以对连接后形成的临时表进行再次过滤。</p>
</blockquote>
</li>
<li><p>多表连接问题</p>
<blockquote>
<p>设有3张表t1, t2, t3, 字段为id，注意多表连接只有一个主表，如果以t1作为主表，则连接条件应为 <code>t1.id = t2.id and t1.id = t3.id </code></p>
</blockquote>
</li>
</ul>
<h2 id="条件格式问题"><a href="#条件格式问题" class="headerlink" title="条件格式问题"></a>条件格式问题</h2><ul>
<li><p>where&#x2F;on条件语句中的and 、or的关系</p>
<blockquote>
<p>很多情况下仅使用and无法形成条件，可以使用or配合完成，但多数情况下，or和and并不是并行的关系，而是or是and的子条件，即 or 需要写在and后的括号中，如果将or 写成与and并行，在条件比较多时，很容易出现错误。</p>
</blockquote>
</li>
</ul>
<h2 id="数据类型问题"><a href="#数据类型问题" class="headerlink" title="数据类型问题"></a>数据类型问题</h2><ul>
<li><p>STRING类型存储INT类型数据的问题</p>
<blockquote>
<p>一般情况可以使用string类型存储数字型的数据，并在需要的时候转换为int类型。然而使用string类型存储的数字，在聚合时数据格式可能会出现问题，比如使用sum聚合后得到的结果可能会变成浮点数，即多了小数位，导致无法直接转换为int。这时需要先转换为INT类型再做聚合。</p>
</blockquote>
</li>
<li><p>使用STRING类型存储整数进行运算的问题</p>
<blockquote>
<p>使用string类型存储的整型数据，在直接计算时不会出错，例如 select ‘5’ + ‘5’ ,结果为10，或者select ‘5’ + 5 ,结果也为10.但如果是在其他字符串处理函数中使用，则可能出现问题。</p>
<p><strong>例如：SELECT CONCAT(‘2022’ - 1, ‘-11-09’), 期望的结果应该是’2021-11-09’, 但得到的结果实际上是’2021.0-11-09’.此时运算的结果会是一个浮点数。出现此bug的原因尚不清楚。</strong></p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>Hadoop</category>
        <category>Hive</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>开发经验</tag>
        <tag>ETL</tag>
      </tags>
  </entry>
  <entry>
    <title>1.Java程序设计环境</title>
    <url>/Java/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/1.Java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h1 id="1-Java程序设计环境"><a href="#1-Java程序设计环境" class="headerlink" title="1. Java程序设计环境"></a>1. Java程序设计环境</h1><h2 id="一些术语"><a href="#一些术语" class="headerlink" title="一些术语"></a>一些术语</h2><ul>
<li>JDK：Java Development Kit（Java开发工具包）</li>
<li>JRE: Java Runtime Environment （Java运行时环境）</li>
<li>Java SE：Java Standard Edition（Java标准版，用于桌面或简单服务器应用的Java平台）</li>
<li>Java EE:   Java Enterprise Edition（Java企业版，用于复杂服务器应用的Java平台）</li>
<li>Java ME:  Java Micro Edition （Java 微型版，用于小型设备的Java平台）</li>
</ul>
<h2 id="使用命令行工具对Java代码进行编译"><a href="#使用命令行工具对Java代码进行编译" class="headerlink" title="使用命令行工具对Java代码进行编译"></a>使用命令行工具对Java代码进行编译</h2><ol>
<li>首先必须安装JDK，并且配置好环境变量</li>
<li>Java 代码存放在以   .java结尾的文档中</li>
<li>使用命令  <code>javac ClassName.java</code> ,  javac程序是一个Java编译器，它将.java文件编译成字节码文件.class, 所以编译后将得到ClassName.class字节码文件。</li>
<li>使用命令<code>java ClassName</code>, java 程序启动Java虚拟机，虚拟机执行编译器编译到类文件中的字节码。</li>
</ol>
<p><strong>注意点：</strong></p>
<ul>
<li>注意JDK版本，以及环境变量的配置</li>
<li><strong>Java区分大小写，类名第一个字母需要大写</strong></li>
<li>javac 编译器需要一个文件名（ClassName.java),  而Java程序运行时只需要指定类名（ClassName), 不需要带扩展名.java或.class。</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java核心技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java核心技术</tag>
        <tag>JavaEE</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK的卸载与安装</title>
    <url>/Java/JDK/JDK%E7%9A%84%E5%8D%B8%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="JDK的卸载与安装"><a href="#JDK的卸载与安装" class="headerlink" title="JDK的卸载与安装"></a>JDK的卸载与安装</h1><h2 id="1-JDK安装"><a href="#1-JDK安装" class="headerlink" title="1.JDK安装"></a>1.JDK安装</h2><blockquote>
<ul>
<li>百度搜索  JDK+版本号  ，根据系统版本，在oracle官网上下载对应版本的JDK（需要登录oracle账号）</li>
<li>双击安装jdk，注意配置好安装路径，路径在配置环境变量时要使用  </li>
<li>配置系统环境变量，在系统环境变量中新建名为“JAVA_HOME”的环境变量，变量值为JDK的安装路径</li>
<li>配置path环境变量，在系统环境变量中的path变量中新建两个变量，分别为<br>%JAVA_HOME%\bin<br>%JAVA_HOME%\jre\bin</li>
<li>注意在高版本的JDK中，可能不存在jre目录，需要查询进一步的解决方法</li>
<li>命令提示符中运行 java -version 命令，查询到版本信息，说明jdk安装成功</li>
</ul>
</blockquote>
<h2 id="2-JDK卸载"><a href="#2-JDK卸载" class="headerlink" title="2.JDK卸载"></a>2.JDK卸载</h2><blockquote>
<ul>
<li>查找并卸载JDK安装目录，可通过系统环境变量中的JavaHome环境变量中查找安装目录，然后将其删除</li>
<li>删除环境变量，将系统环境变量中与JavaHome有关的环境变量删除</li>
<li>命令提示符中运行 java -version 命令，查询不到版本信息，说明jdk卸载成功</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
        <category>JDK</category>
      </categories>
      <tags>
        <tag>JDK</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java注解</title>
    <url>/Java/Java%E6%B3%A8%E8%A7%A3/Java%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="Java注解"><a href="#Java注解" class="headerlink" title="Java注解"></a>Java注解</h1><h2 id="1、-Autowired-（Spring注解）"><a href="#1、-Autowired-（Spring注解）" class="headerlink" title="1、@Autowired （Spring注解）"></a>1、@Autowired （Spring注解）</h2><p>@Autowired注解用于对象的自动装配，默认先通过类型进行装配，类型装配不成功时再通过名字进行装配，如果都不成功，可以使用@Qualifier(value&#x3D;“ ”）注解来指定名字协助装配，否则报错。</p>
<h2 id="2-Resource-（Java注解）"><a href="#2-Resource-（Java注解）" class="headerlink" title="2. @Resource  （Java注解）"></a>2. @Resource  （Java注解）</h2><p>@Resource注解用于对象的自动装配，默认先通过名字进行装配，当名字装配不成功时再通过类型进行装配，如果都不成功，可以使用其name属性指定对象名字进行装配，格式如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource(name=&quot;&quot;)</span></span><br></pre></td></tr></table></figure>

<h2 id="3-Nullable"><a href="#3-Nullable" class="headerlink" title="3.  @Nullable"></a>3.  @Nullable</h2><p>使用该注解标记的字段可以为null。</p>
<h2 id="4-Component"><a href="#4-Component" class="headerlink" title="4. @Component"></a>4. @Component</h2><p>把普通的实体类pojo配置到spring容器中，相当于配置文件中的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>该注解泛指各种组件，就是当某个类不属于各种归类的时候（不属于controller、service等的时候），就可以使用@Component来标注这个类。</p>
<p><strong>注意：</strong>使用该注解时，需要先在配置文件中使用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">”包路径”</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>指定了要扫描的包后，这个包下的类的@Component注解才会生效。</p>
<h2 id="5-Value"><a href="#5-Value" class="headerlink" title="5. @Value"></a>5. @Value</h2><p>上面的@Component注解只能配置类，当需要配置类的属性时，需要用到@Value注解，此注解可以声明在类的属性或者属性的set方法上，括号中跟值，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;值&quot;)</span></span><br></pre></td></tr></table></figure>

<p>相当于在配置文件中进行了属性配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;值&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-Repository（-Component衍生注解）"><a href="#6-Repository（-Component衍生注解）" class="headerlink" title="6. @Repository（@Component衍生注解）"></a>6. @Repository（@Component衍生注解）</h2><p>@Component的衍生注解，作用于@Component相同，<strong>用于装配Dao层下的类。</strong></p>
<h2 id="7-Service（-Component衍生注解）"><a href="#7-Service（-Component衍生注解）" class="headerlink" title="7. @Service（@Component衍生注解）"></a>7. @Service（@Component衍生注解）</h2><p>@Component的衍生注解，作用于@Component相同，<strong>用于装配Service层下的类。</strong></p>
<h2 id="8-Controller（-Component衍生注解）"><a href="#8-Controller（-Component衍生注解）" class="headerlink" title="8. @Controller（@Component衍生注解）"></a>8. @Controller（@Component衍生注解）</h2><p>@Component的衍生注解，作用于@Component相同，<strong>用于装配Controller层下的类。</strong></p>
<h2 id="9-Scope"><a href="#9-Scope" class="headerlink" title="9. @Scope"></a>9. @Scope</h2><p>置于类上，用于配置类的作用域，如单例模式、原型模式等。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span> <span class="comment">//单例模式</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span> <span class="comment">//原型模式</span></span><br></pre></td></tr></table></figure>

<h2 id="10-Configration"><a href="#10-Configration" class="headerlink" title="10. @Configration"></a>10. @Configration</h2><p>写在类前，声明一个类是Java 配置类，声明后，该java类的作用与xml配置文件相同。</p>
<h2 id="11-ComponentScan"><a href="#11-ComponentScan" class="headerlink" title="11. @ComponentScan"></a>11. @ComponentScan</h2><p>配合@Configration注解为java配置类设置扫描路径，相当于xml配置文件中的&lt;context:component-scan base-package&#x3D;”包路径”&gt;语句，用法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(&quot;扫描路径&quot;)</span></span><br></pre></td></tr></table></figure>

<h2 id="12-Import"><a href="#12-Import" class="headerlink" title="12. @Import"></a>12. @Import</h2><p>配合<br>@Configration注解将多个java配置类集合到一起，相当于xml配置文件中的import语句。</p>
<h2 id="13-Bean"><a href="#13-Bean" class="headerlink" title="13. @Bean"></a>13. @Bean</h2><p>用于方法前，注册一个bean，相当于配置文件中的bean标签，方法的名字就相当于bean标签中的id属性，方法的返回值就相当于bean标签中的class属性</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java注解</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java注解</tag>
      </tags>
  </entry>
  <entry>
    <title>2.Java的基本程序设计结构</title>
    <url>/Java/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/2.Java%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h1 id="2-Java的基本程序设计结构"><a href="#2-Java的基本程序设计结构" class="headerlink" title="2. Java的基本程序设计结构"></a>2. Java的基本程序设计结构</h1><h2 id="一些基本知识"><a href="#一些基本知识" class="headerlink" title="一些基本知识"></a>一些基本知识</h2><ul>
<li>Java区分大小写</li>
<li>Java应用程序中的全部内容都必须放置在类中</li>
<li>Java命名规范<ul>
<li>名字必须以字母开头，后面可以跟字母和数字的任意组合，无长度限制，但是不能使用Java保留字做类名</li>
<li>Java的类名和变量名使用驼峰命名法（CamelCase），类名的首字母需要大写</li>
</ul>
</li>
<li>使用 <code>Java ClassName</code> 运行已编译的程序时，Java 虚拟机总是从指定类中的main方法开始执行，因此为了代码能够执行，<strong>在类的源文件中必须包含一个main方法。main方法必须被声明为public。</strong></li>
</ul>
<h2 id="Java注释"><a href="#Java注释" class="headerlink" title="Java注释"></a>Java注释</h2><ol>
<li><p>单行注释：在要注释的一行代码起始位置使用 <code>//</code></p>
</li>
<li><p>多行注释：再要注释的一段代码的始末位置分别使用  <code>/*</code> 和 <code>*/</code></p>
</li>
<li><p>Javadoc注释：可以用来自动生成文档</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *	一段Java说明文档	</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Java数据类型"><a href="#Java数据类型" class="headerlink" title="Java数据类型"></a>Java数据类型</h2><p><strong>Java是一种强类型语言，这意味着必须为每一个变量声明一种类型。</strong></p>
<p><strong>Java一共有8种基本类型，包括4种整形、2种浮点型、1种字符型char(用于标识Unicode编码的代码单元)和1种用于表示真值的boolean类型。</strong></p>
<h3 id="1-整型"><a href="#1-整型" class="headerlink" title="1. 整型"></a>1. 整型</h3><p>java整形：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>存储需求</th>
<th>取值范围</th>
</tr>
</thead>
<tbody><tr>
<td>int</td>
<td>4字节</td>
<td>-2147483648 ~ 2147483647</td>
</tr>
<tr>
<td>short</td>
<td>2字节</td>
<td>-32768 ~ 32767</td>
</tr>
<tr>
<td>long</td>
<td>8字节</td>
<td>-9 223 372 036 854 775 808 ~ 9 223 372 036 854 775 807</td>
</tr>
<tr>
<td>byte</td>
<td>1字节</td>
<td>-128 ~ 127</td>
</tr>
</tbody></table>
<ul>
<li>长整形数值有一个后缀L 或 l，例如：2000000L</li>
<li>十六进制数字有一个前缀 0X 或 0x，例如： 0xCAFE</li>
<li>八进制数字有一个前缀0，例如：010 对应十进制中的8</li>
<li>从Java7开始，加上前缀 0B 或 0b 就可以写二进制数</li>
<li>从Java7开始，为了方便阅读，可以为数字字面量加下划线，Java编译器会去除这些下划线。例如：可以用1_000_000 表示一百万</li>
<li>Java没有任何无符号（unsigned）形式的int,long,short或byte类型</li>
</ul>
<h3 id="2-浮点类型"><a href="#2-浮点类型" class="headerlink" title="2. 浮点类型"></a>2. 浮点类型</h3><p>java浮点类型：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>存储需求</th>
<th>取值范围</th>
</tr>
</thead>
<tbody><tr>
<td>float</td>
<td>4字节</td>
<td>大约 ± 3.402 823 47E+38F （有效位数为 6 ~ 7位）</td>
</tr>
<tr>
<td>double</td>
<td>8字节</td>
<td>大约 ± 1.797 693 134 862 315 70E+308 （有效位数为15位）</td>
</tr>
</tbody></table>
<ul>
<li><p>float类型的数值有一个后缀F 或 f</p>
</li>
<li><p>没有后缀F的浮点数值总是默认为double类型， 当然也可以在浮点数值后面增加后缀D 或 d</p>
</li>
<li><p>在十进制表示法中，可以使用E或e表示指数。而在十六进制表示法中，则使用p表示指数，例如，0.125 &#x3D; 2﹣³ 可以表示成0x1.0p-3。注意，尾数采用十六进制，指数采用十进制，指数的基数是2，而不是10.</p>
</li>
<li><p>表示溢出和出错有三个特殊的浮点数值：</p>
<ul>
<li>正无穷大   (可以用Double.POSITIVE_INFINITY表示)</li>
<li>负无穷大   (可以用Double.NEGATIVE_INFINITY表示)</li>
<li>NaN   （不是一个数字，Not a Number)   (可以用Double.NaN表示)</li>
</ul>
</li>
<li><p>可以使用Double.isNaN(x) 方法判断一个数x是否为NaN</p>
</li>
</ul>
<h3 id="3-char类型和Unicode"><a href="#3-char类型和Unicode" class="headerlink" title="3. char类型和Unicode"></a>3. char类型和Unicode</h3><p>char类型使用较少并且不建议在实际代码开发中使用</p>
<ul>
<li>注意注释中的\u转义序列，可能会造成错误。</li>
</ul>
<h3 id="4-boolean类型"><a href="#4-boolean类型" class="headerlink" title="4. boolean类型"></a>4. boolean类型</h3><p>boolean类型只有两个值：true 和 false，用来判定逻辑条件。</p>
<h2 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h2><h3 id="1-声明变量"><a href="#1-声明变量" class="headerlink" title="1. 声明变量"></a>1. 声明变量</h3><ul>
<li><h4 id="声明变量的方法："><a href="#声明变量的方法：" class="headerlink" title="声明变量的方法："></a>声明变量的方法：</h4><p><code>变量类型 变量名;</code>, 例如 int a; 声明了一个整形变量a</p>
</li>
<li><h4 id="变量名命名规则："><a href="#变量名命名规则：" class="headerlink" title="变量名命名规则："></a>变量名命名规则：</h4><ul>
<li>变量名必须是一个由字母开头并由字母或数字构成的序列。</li>
<li>与其他程序设计语言相比，Java中的 “字母” 或 “数字”的范围更大。字母包括 ‘A’<del>‘Z’、’a’</del>‘z’、’_’、’$’或在某种语言中表示字母的任何Unicode字符；同样，数字包括’0’~’9’或在某种语言中表示字母的任何Unicode字符。变量名中的所有字符都是有意义的，并且大小写敏感，变量名长度基本上没有限制。<br>如果想要知道哪些Unicode字符属于Java中的“字母”，可以使用Character类中的isJavaIdentifierStart 和 isJjavaIdentifierPart方法来检查。<br>尽管$是一个合法Java字符，但尽量不要在自己的代码中使用这个字符，它只用在Java编译器或其他工具生成的名字中。</li>
<li>不能使用Java保留字作为变量名</li>
</ul>
</li>
<li><p>可以在一行中声明多个变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i,j;</span><br></pre></td></tr></table></figure>

<p>从程序可读性角度上不提倡这样的声明。</p>
</li>
</ul>
<h3 id="2-变量初始化"><a href="#2-变量初始化" class="headerlink" title="2. 变量初始化"></a>2. 变量初始化</h3><p>在声明一个变量之后，必须用复制语句对该变量进行显式的初始化，千万不要使用未初始化的变量的值，否则会报错。</p>
<p>变量初始化方式：</p>
<ul>
<li><p>先声明再初始化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a;</span><br><span class="line">a = <span class="number">5</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>声明的同时进行初始化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>从Java10开始</strong>，对于局部变量，如果可以从变量的初始值推断出它的类型，就不再需要声明类型，只需要使用关键字var而无须指定类型：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">12</span>; <span class="comment">// a is an int</span></span><br><span class="line"><span class="type">var</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>; <span class="comment">// b is a String</span></span><br></pre></td></tr></table></figure>

<p>C 和 C++区分变量的声明和定义，而Java对此并不作区分。</p>
<h3 id="3-常量"><a href="#3-常量" class="headerlink" title="3. 常量"></a>3. 常量</h3><p>在Java中，使用<code>final</code>关键字指示常量。常量只能被赋值一次，习惯上，常量名使用全大写。</p>
<p>在Java中，经常希望某个常量可以在一个类的多个方法中使用，通常将这些常量成为<strong>类常量</strong>，可以使用关键字<code>static final</code>设置一个类常量。</p>
<p>如果一个类的常量声明为public，那么其他类的方法也可以使用这个常量。</p>
<h3 id="4-枚举类型"><a href="#4-枚举类型" class="headerlink" title="4. 枚举类型"></a>4. 枚举类型</h3><p>自定义枚举类型：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Size</span> &#123;SMALL, MEDIUM, LARGE, EXTRA_LARGE&#125;;</span><br></pre></td></tr></table></figure>

<p>然后可以声明这种类型的变量:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Size</span> <span class="variable">s</span> <span class="operator">=</span> Size.MEDIUM;</span><br></pre></td></tr></table></figure>

<p>枚举类型的变量只能存储枚举类型中给定的某个枚举值，或者null，null表示这个变量没有设置任何值。</p>
<h3 id="5-运算符"><a href="#5-运算符" class="headerlink" title="5. 运算符"></a>5. 运算符</h3><ul>
<li><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4></li>
</ul>
<p>​	加（+）、减（-）、乘（*）、除（&#x2F;）、求余（%）<br>​	当参与除法运算的两个操作数都是整数时，表示整数除法，否则表示浮点数除法。<br>​	整数被0除会产生一个异常，而浮点数被0除会得到无穷大或NaN结果。</p>
<ul>
<li><h4 id="数学函数与常量"><a href="#数学函数与常量" class="headerlink" title="数学函数与常量"></a>数学函数与常量</h4><p>在Math类中，包含了许多数学函数，例如：</p>
<ul>
<li>求平方根：Math.sqrt()</li>
<li>幂运算：Math.pow(x, a)</li>
<li>三角函数：Math.sin、Math.cos、Math.tan、Math.atan、Math.atan2</li>
<li>指数函数及其反函数——自然对数以及以10为底的对数：Math.exp、Math.log、Math.log10</li>
<li>常量π 以及 常量e：Math.PI、Math.E</li>
</ul>
<p>导入Math类时按以下方式导入，可以在使用数学函数时不指定类名前缀：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.*</span><br></pre></td></tr></table></figure>


</li>
<li><h4 id="数值类型之间的转换-隐式类型转换"><a href="#数值类型之间的转换-隐式类型转换" class="headerlink" title="数值类型之间的转换(隐式类型转换)"></a>数值类型之间的转换(隐式类型转换)</h4><p><img src="/Java/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/2.Java%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%93%E6%9E%84/image-20230918164655559.png" alt="image-20230918164655559"><br>如图，实线箭头表示无信息丢失的转换，虚线箭头表示有精度损失的转换。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">123456789</span>;</span><br><span class="line"><span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> n; <span class="comment">// f = 1.23456792E8  该大整数包含的位数比float能够表示的位数多</span></span><br></pre></td></tr></table></figure>

<p>二元运算符中包含的隐式转换：</p>
<blockquote>
<p>两个操作数中有一个double类型，另一个就会自动转换为double类型；<br>否则，如果其中一个运算符是float类型，另一个会自动转换为float类型；<br>否则，如果其中一个运算符是long类型，另一个会自动转换为long类型；<br>否则，两个操作数都被转换为int类型。</p>
</blockquote>
</li>
<li><h4 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h4><p>有时需要强制类型转换，例如将int转换为double，这种转换可能会造成信息损失，强制类型转换的语法格式是在圆括号内给出想要转换的数据类型，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1.833</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> (<span class="type">int</span>) x; <span class="comment">// y = 1</span></span><br></pre></td></tr></table></figure>

<p>这样，数值y通过强制类型转换将x的小数部分截断而得到整形数值。<br>如果相对浮点类型进行舍入运算，得到最接近的整数，可以使用Math.round()方法，需要注意的是，Math.round()方法返回结果为long类型，所以如果要用该方法转换整数，还是需要使用强制类型转换：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1.833</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> (<span class="type">int</span>)Math.round(x); <span class="comment">// y = 2</span></span><br></pre></td></tr></table></figure>

<p>强制类型转换时如果超出了目标的标识范围，则结果会截断成一个完全不同的值。</p>
<p>不要在boolean类型与任何类型之间进行强制类型转换，必要时可以使用三元运算符：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">a</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a ? <span class="number">1</span> : <span class="number">0</span>;</span><br></pre></td></tr></table></figure>


</li>
<li><h4 id="结合赋值和运算符"><a href="#结合赋值和运算符" class="headerlink" title="结合赋值和运算符"></a>结合赋值和运算符</h4><p>同C++，有+&#x3D; 、-&#x3D;、&#x2F;&#x3D;、*&#x3D;、%&#x3D;等等一系列结合运算符，使用例如：</p>
<p>x +&#x3D; 4; 等价于 x &#x3D; x + 4;</p>
</li>
<li><h4 id="自增自减运算符"><a href="#自增自减运算符" class="headerlink" title="自增自减运算符"></a>自增自减运算符</h4><p>同C++，自增运算：++、自减运算：–，表示数值加一或减一，其中</p>
<p>运算符放在操作数前面，表示先加一再参与运算；运算符放在操作数后面，表示先参与运算再加一，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">2</span> * ++m; <span class="comment">// a = 16, m = 8</span></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span> * n++; <span class="comment">// a = 14, n = 8</span></span><br></pre></td></tr></table></figure>


</li>
<li><h4 id="关系和boolean运算符"><a href="#关系和boolean运算符" class="headerlink" title="关系和boolean运算符"></a>关系和boolean运算符</h4><p>数值比较：相等（&#x3D;&#x3D;）、不等（!&#x3D;）、&lt;、 &gt;、&lt;&#x3D;、&gt;&#x3D;</p>
<p>逻辑运算：与（&amp;&amp;）、或（||）、非（!），<strong>逻辑运算按照“短路”方式求值</strong>，例如：a &amp;&amp; b, 如果表达式a为false，则直接返回false，不会去计算表达式b。</p>
<p>三元运算符：contition ? expression1 : expression2    contition为true时，返回expression1，否则返回expression2</p>
</li>
<li><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><p>位运算符包括：<br><code>&amp;</code>(“and”)、<br><code>|</code>(“or”)、<br><code>^</code>(“xor”)、<br><code>~</code>(“not”)、<br><code>&gt;&gt;</code>(算术右移，用符号位填充高位)、<br><code>&lt;&lt;</code>(算术左移，用0填充低位，高位舍弃)、<br><code>&gt;&gt;&gt;</code>(逻辑右移，用0填充高位)</p>
<p><strong>不存在  &lt;&lt;&lt; 运算符</strong></p>
<p>处理整形类型时，可以直接对组成整数的各个位完成操作，这意味着可以使用掩码技术得到整数中的各个位。</p>
<p>应用在布尔类型上时，&amp; 和 | 运算符也会得到一个布尔类型值，不过同&amp;&amp; 和 || 等逻辑运算符不同的是，**&amp; 和 | 位运算符不采用“短路”的方式来求值，也就是说得到运算结果前两个操作数都需要计算。**</p>
</li>
<li><h4 id="括号与运算符级别"><a href="#括号与运算符级别" class="headerlink" title="括号与运算符级别"></a>括号与运算符级别</h4><table>
<thead>
<tr>
<th>优先级</th>
<th>运算符</th>
<th>描述</th>
<th>结合顺序</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>()</td>
<td>圆括号</td>
<td>从左到右</td>
</tr>
<tr>
<td>2</td>
<td>++ –</td>
<td>后缀自增自减</td>
<td>从左到右</td>
</tr>
<tr>
<td>3</td>
<td>++ – + - ~ !</td>
<td>前缀自增自减、正负号、位取反、逻辑非</td>
<td>从右到左</td>
</tr>
<tr>
<td>4</td>
<td>* &#x2F; %</td>
<td>乘、除、取模</td>
<td>从左到右</td>
</tr>
<tr>
<td>5</td>
<td>+ -</td>
<td>加、减</td>
<td>从左到右</td>
</tr>
<tr>
<td>6</td>
<td>&lt;&lt; &gt;&gt; &gt;&gt;&gt;</td>
<td>左移、右移、无符号右移</td>
<td>从左到右</td>
</tr>
<tr>
<td>7</td>
<td>&lt; &lt;&#x3D; &gt; &gt;&#x3D; instanceof</td>
<td>小于、小于等于、大于、大于等于、instanceof</td>
<td>从左到右</td>
</tr>
<tr>
<td>8</td>
<td>&#x3D;&#x3D; !&#x3D;</td>
<td>等于、不等于</td>
<td>从左到右</td>
</tr>
<tr>
<td>9</td>
<td>&amp;</td>
<td>按位与</td>
<td>从左到右</td>
</tr>
<tr>
<td>10</td>
<td>^</td>
<td>按位异或</td>
<td>从左到右</td>
</tr>
<tr>
<td>11</td>
<td>|</td>
<td>按位或</td>
<td>从左到右</td>
</tr>
<tr>
<td>12</td>
<td>&amp;&amp;</td>
<td>逻辑与</td>
<td>从左到右</td>
</tr>
<tr>
<td>13</td>
<td>||</td>
<td>逻辑或</td>
<td>从左到右</td>
</tr>
<tr>
<td>14</td>
<td>?:</td>
<td>三元运算符</td>
<td>从右到左</td>
</tr>
<tr>
<td>15</td>
<td>&#x3D; +&#x3D; -&#x3D; *&#x3D; &#x2F;&#x3D; %&#x3D; &amp;&#x3D; ^&#x3D; |&#x3D; &lt;&lt;&#x3D; &gt;&gt;&#x3D; &gt;&gt;&gt;&#x3D;</td>
<td>赋值、复合赋值</td>
<td>从右到左</td>
</tr>
</tbody></table>
</li>
</ul>
<p>圆括号可以改变运算符的优先级。</p>
<h3 id="6-字符串"><a href="#6-字符串" class="headerlink" title="6. 字符串"></a>6. 字符串</h3><ul>
<li><h4 id="子串"><a href="#子串" class="headerlink" title="子串"></a>子串</h4><p>Java的字符串与C和C++类似，代码单元和代码点都是从0开始计数。可以使用substring()方法获取子串，方法内可以传递两个参数，表示要截取字符串的开始位置和结束位置，且截取区间为左闭右开区间，也就是不包括结束位置的那一个字符，也可以只传递一个开始位置，此时结束位置默认到整个字符串结束：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">subs</span> <span class="operator">=</span> s.substring(<span class="number">0</span>, <span class="number">2</span>); <span class="comment">// subs = &quot;He&quot;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">subss</span> <span class="operator">=</span> s.substring(<span class="number">2</span>); <span class="comment">// subss = &quot;llo&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h4><p>可以使用 <code>+</code>拼接两个字符串。</p>
<p>当一个非字符串的值与一个字符串进行拼接时，该非字符串会转换成字符串。</p>
</li>
<li><h4 id="不可见字符串"><a href="#不可见字符串" class="headerlink" title="不可见字符串"></a>不可见字符串</h4><p>Java的String类没有提供直接修改字符串中某个字符的方法。如果希望修改字符串，只能对字符串变量重新进行赋值。</p>
<p>这种不可变字符串有一个有点：<strong>编译器可以让字符串共享，可以想象各种字符串存放在公共的存储池中，字符串变量指向存储池中相应的位置，如果赋值一个字符串变量，原始字符串与复制的字符串共享相同的字符，也就是内存地址相同。</strong></p>
<blockquote>
<p>与C或C++不同的是，Java的字符串不是字符数组，其类似于C或C++ 中的char*指针</p>
</blockquote>
</li>
<li><h4 id="判断字符串是否相等"><a href="#判断字符串是否相等" class="headerlink" title="判断字符串是否相等"></a>判断字符串是否相等</h4><p>可以使用<code>equals()</code>方法判断两个字符串是否相等，例如：s.equals(t), 如果字符串s 与 字符串t相等，返回true，否则返回false。如过要判断两个字符串是否相等，而且不区分大小写，可以使用<code>equalsIgnoreCase()</code>方法。</p>
<p><strong>注意，不要使用 <code>==</code> 判断两个字符串是否相等！这个运算符只能判断两个字符串是否在同一个内存位置上，如果在同一个内存位置上当然相等，但是完全有可能两个相同的字符串存储在不同的位置上！</strong></p>
</li>
<li><h4 id="空字符串与null字符串"><a href="#空字符串与null字符串" class="headerlink" title="空字符串与null字符串"></a>空字符串与null字符串</h4><p>空字符串””是长度为零的字符串。可以用一下方式检查一个字符串是否为空：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (str.length() == <span class="number">0</span>)</span><br><span class="line">    或者</span><br><span class="line"><span class="keyword">if</span> (str.equals(<span class="string">&quot;&quot;</span>))</span><br></pre></td></tr></table></figure>

<p>要检查一个字符串是否为null，可以使用以下方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (str == <span class="literal">null</span>)</span><br></pre></td></tr></table></figure>

<p>如果要检查一个字符串既不是null也不是空字符串，可以使用以下方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (str != <span class="literal">null</span> &amp;&amp; str.length() != <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="码点和代码单元"><a href="#码点和代码单元" class="headerlink" title="码点和代码单元"></a>码点和代码单元</h4><p><strong>java字符串由char值序列组成。</strong>char类型是一个采用UTF-16编码表示Unicode码点的代码单元，常用的Unicode字符使用一个代码单元就可以表示，而一些后增加的辅助字符（大于U+FFFF）则需要两个代码单元来表示，当字符串中存在辅助字符时，如果使用char类型只能获取到辅助字符两个代码单元中的一个，所以<strong>非必要不要使用char类型</strong>。</p>
</li>
<li><h4 id="StringAPI"><a href="#StringAPI" class="headerlink" title="StringAPI"></a>StringAPI</h4><p>String类提供了非常多的用于操作字符串的方法，可以阅读联机API文档获取详细信息。</p>
</li>
<li><h4 id="联机API文档"><a href="#联机API文档" class="headerlink" title="联机API文档"></a>联机API文档</h4><p><a href="https://docs.oracle.com/javase/9/docs/api/">https://docs.oracle.com/javase/9/docs/api/</a></p>
</li>
<li><h4 id="构建字符串"><a href="#构建字符串" class="headerlink" title="构建字符串"></a>构建字符串</h4><p>有时需要用较短的字符串来构建字符串，如果使用字符串拼接，效率会比较低，每次拼接字符串时，都会构建一个新的String对象，既耗时又浪费空间。使用StringBuilder 或者 StringBuffer类就可以避免这个问题的发生。</p>
<p>以StringBuilder为例，展示如何使用一些较短的字符串来构建一个字符串。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.创建一个字符串构造器</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"><span class="comment">// 2.每当要添加一部分内容时，就调用append方法</span></span><br><span class="line">builder.append(part1);</span><br><span class="line">builder.append(part2);</span><br><span class="line"><span class="comment">// 3.字符串构建完成时调用toString方法，得到一个字符串对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">completedString</span> <span class="operator">=</span> builder.toString();</span><br></pre></td></tr></table></figure>

<p>StringBuilder 与 StringBuffer的区别：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Java中的StringBuffer和StringBuilder都是可变字符串，它们的主要区别在于线程安全性和性能。</span><br><span class="line"></span><br><span class="line">StringBuffer是线程安全的，因为它的所有公共方法都是同步的，这意味着多个线程可以同时访问一个StringBuffer对象而不会导致数据不一致的问题。但是，由于同步会带来额外的开销，因此StringBuffer的性能可能会比StringBuilder差一些。</span><br><span class="line"></span><br><span class="line">StringBuilder是非线程安全的，因为它的方法没有同步，这意味着在多线程环境下使用StringBuilder可能会导致数据不一致的问题。但是，由于没有同步的开销，StringBuilder的性能通常比StringBuffer更好。</span><br><span class="line"></span><br><span class="line">因此，如果需要在多线程环境下使用可变字符串，应该使用StringBuffer，否则建议使用StringBuilder以获得更好的性能。</span><br></pre></td></tr></table></figure>

<p>StringBuilder 常用API:</p>
<ol>
<li>append(String str)：将指定的字符串追加到此字符序列。</li>
<li>insert(int offset, String str)：将指定的字符串插入此字符序列中的指定位置。</li>
<li>delete(int start, int end)：删除此字符序列中指定位置的字符。</li>
<li>replace(int start, int end, String str)：使用指定的字符串替换此字符序列中从start到end-1的字符。</li>
<li>reverse()：将此字符序列用其反转形式取代。</li>
<li>length()：返回此字符序列的长度。</li>
<li>toString()：返回此字符序列的字符串表示形式。</li>
</ol>
</li>
</ul>
<h3 id="7-输入与输出"><a href="#7-输入与输出" class="headerlink" title="7. 输入与输出"></a>7. 输入与输出</h3><ul>
<li><h4 id="读取输入"><a href="#读取输入" class="headerlink" title="读取输入"></a>读取输入</h4><p>读取输入依赖于Scanner类，需要创建一个与标准输入流System.in关联的Scanner对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br></pre></td></tr></table></figure>

<p>然后就可以使用Scanner类的各种方法读取输入了，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> in.nextLine(); <span class="comment">//读取一行输入，回车结束</span></span><br><span class="line"><span class="type">String</span> <span class="variable">firstName</span> <span class="operator">=</span> in.next(); <span class="comment">//读取一个单词（以空白符作为分隔符）</span></span><br><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> in.nextInt(); <span class="comment">// 读取一个整数</span></span><br><span class="line"><span class="type">double</span> <span class="variable">number</span> <span class="operator">=</span> in.nextDouble(); <span class="comment">//读取一个浮点数</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="标准输出流（控制台窗口）"><a href="#标准输出流（控制台窗口）" class="headerlink" title="标准输出流（控制台窗口）"></a>标准输出流（控制台窗口）</h4><p>将输出打印到标准输出流（控制台窗口），只需要调用标准输出流System.out的下列方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.print(text); <span class="comment">// 将内容text打印到控制台窗口</span></span><br><span class="line">System.out.println(text); <span class="comment">// 将内容text打印到控制台窗口,然后另起一行</span></span><br><span class="line">System.out.printf(); <span class="comment">// 格式化输出内容</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h4><p>Java5沿用了C语言函数库中的方法<code>printf()</code>, 用来格式化输出内容。下面是一个例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.printf(<span class="string">&quot;Hello, %s. Next year, you&#x27;ll be %d&quot;</span>, name, age);</span><br></pre></td></tr></table></figure>

<p>其中，%为<strong>格式说明符</strong>，格式说明符尾部的<strong>转换符</strong>提示了要格式化的数值的类型，每一个以%字符开始的格式说明符都用相应的参数替换，以下是所有的转换符：</p>
<table>
<thead>
<tr>
<th>转换符</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>%d</td>
<td>十进制整数</td>
<td>printf(“%d”, 42); &#x2F;&#x2F; 输出 42</td>
</tr>
<tr>
<td>%o</td>
<td>八进制整数</td>
<td>printf(“%o”, 42); &#x2F;&#x2F; 输出 52</td>
</tr>
<tr>
<td>%x, %X</td>
<td>十六进制整数</td>
<td>printf(“%x”, 42); &#x2F;&#x2F; 输出 2a</td>
</tr>
<tr>
<td>%f</td>
<td>十进制浮点数</td>
<td>printf(“%f”, 3.14159); &#x2F;&#x2F; 输出 3.141590</td>
</tr>
<tr>
<td>%e, %E</td>
<td>科学计数法表示的浮点数</td>
<td>printf(“%e”, 3.14159); &#x2F;&#x2F; 输出 3.141590e+00</td>
</tr>
<tr>
<td>%g, %G</td>
<td>根据值的大小自动选择%f或%e</td>
<td>printf(“%g”, 3.14159); &#x2F;&#x2F; 输出 3.14159</td>
</tr>
<tr>
<td>%c</td>
<td>字符</td>
<td>printf(“%c”, ‘A’); &#x2F;&#x2F; 输出 A</td>
</tr>
<tr>
<td>%s</td>
<td>字符串</td>
<td>printf(“%s”, “Hello, World!”); &#x2F;&#x2F; 输出 Hello, World!</td>
</tr>
<tr>
<td>%b</td>
<td>布尔值</td>
<td>printf(“%b”, true); &#x2F;&#x2F; 输出 true</td>
</tr>
<tr>
<td>%n</td>
<td>换行符（与平台有关）</td>
<td>printf(“Hello,%nWorld!”); &#x2F;&#x2F; 输出 Hello, World!</td>
</tr>
<tr>
<td>%h</td>
<td>散列码</td>
<td></td>
</tr>
</tbody></table>
<p>还可以指定控制格式化输出外观的各种标志，例如逗号标志可以增加分组分隔符:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;%,.2f&quot;</span>, <span class="number">10000.0</span> / <span class="number">3.0</span>); <span class="comment">// 输出 3,333.33</span></span><br></pre></td></tr></table></figure>

<p>以下是用于printf 的标志：</p>
<table>
<thead>
<tr>
<th>标志</th>
<th>目的</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>打印正数和负数的符号</td>
<td>+3333.33</td>
</tr>
<tr>
<td>空格</td>
<td>在正数之前添加空格</td>
<td>| 3333.33|</td>
</tr>
<tr>
<td>0</td>
<td>数字签名补 0</td>
<td>3333.33</td>
</tr>
<tr>
<td>-</td>
<td>左补齐</td>
<td>|3333.33 |</td>
</tr>
<tr>
<td>(</td>
<td>将负数括在括号内</td>
<td>( 3,333,33)</td>
</tr>
<tr>
<td>,</td>
<td>添加分组分割符</td>
<td>3,333,33</td>
</tr>
<tr>
<td>#(对于 f 格式)</td>
<td>包含小数点</td>
<td>3,333.</td>
</tr>
<tr>
<td>#(对于 x 或 0 格式)</td>
<td>添加前缀 0x 或 0</td>
<td>0xcafe</td>
</tr>
<tr>
<td>$</td>
<td>给定被格式化的参数索引。例如 %1d,%1x 将以十进制和十六进制格式打印第一个参数</td>
<td>159 9F</td>
</tr>
<tr>
<td>&lt;</td>
<td>格式化前面说明的数值。例如 % d%&lt;x 以十进制和十六进制打印同一个数值</td>
<td>159 9F</td>
</tr>
</tbody></table>
<p>还可以使用静态的String.format 方法创建一个格式化的字符串，而不打印输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> String.format(<span class="string">&quot;Hello, %s. Next year, you&#x27;ll be %d&quot;</span>, name, age);</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="文件的输入与输出"><a href="#文件的输入与输出" class="headerlink" title="文件的输入与输出"></a>文件的输入与输出</h4><p>在java中，读取文件的方式有很多种，下面介绍使用Scanner类读取文件的一种方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造一个Scanner对象，在构造方法中声明Path文件路径参数，以及编码格式</span></span><br><span class="line">	<span class="comment">//Java8 使用Paths.get获取文件路径</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(Paths.get(<span class="string">&quot;e:\\test.txt&quot;</span>), StandardCharsets.UTF_8.toString());</span><br><span class="line">	<span class="comment">//Java11之后，使用Path.of()方法获取文件路径</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(Path.of(<span class="string">&quot;e:\\test.txt&quot;</span>), StandardCharsets.UTF_8.toString());</span><br><span class="line"><span class="comment">// 然后可以使用前面介绍的Scanner方法读取文件中的内容，例如</span></span><br><span class="line">System.out.println(in.nextLine()); <span class="comment">// 读取并输出文件中一行的内容</span></span><br></pre></td></tr></table></figure>

<p>使用PrintWriter类写入文件的一种方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	构建一个PrintWriter构造器，并在构造方法中传入文件路径以及编码方式参数，这里的文件路径可以直接使用字符串，注意，如果使用全路径，要使用两个\\进行转义，如果使用相对路径，则文件需要放在解释器当前所在目录。如果文件名不存在，java就会在路径下创建该文件。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="string">&quot;test.txt&quot;</span>, StandardCharsets.UTF_8.toString());</span><br><span class="line">out.write(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">out.close();  <span class="comment">// 最后必须调用close方法，将缓存中的内容刷新保存在文件中</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="8-控制流程"><a href="#8-控制流程" class="headerlink" title="8. 控制流程"></a>8. 控制流程</h3><ul>
<li><p>块作用域</p>
<p>含义：块是指由若干条Java语句组成的语句，并用一对大括号括起来。块确定了变量的作用域，一个块可以嵌套在另一个块中，但是不能在嵌套的两个块中声明同名的变量。</p>
</li>
<li><p>条件语句</p>
<p>经典的if-else不再赘述</p>
</li>
<li><p>循环</p>
<p>经典的while、do-while不再赘述</p>
</li>
<li><p>确定循环</p>
<p>for循环采用计数器进行循环控制，因此可以做到确定次数的循环。</p>
<p>for语句的第一部分通常是对计数器进行初始化；第二部分给出循环的结束条件；第三部分对计数器进行更新。</p>
<p>建议for语句的3个部分对同一个计数器变量进行初始化、检测和更新，避免循环晦涩难懂。</p>
<p>灵活使用for循环（通常不建议使用）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不设置结束条件:</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; ; i++) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不设置结束条件和更新语句:</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; ;) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 什么都不设置:</span></span><br><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，对于多重嵌套的循环，如果使用了break语句，只会结束break所在的那一层循环。例如一个双层循环，如果内层循环中有break语句，则执行到break时只会中断该内层循环，外层循环不受影响。</p>
</li>
<li><p>多条件选择：switch语句</p>
<p>Java 的 switch语句同 c++，示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(choice)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">       ...</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">       ...</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">       ...</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">       ...</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，switch语句的结束条件为碰到break；或者执行到整个switch语句的结束处。<strong>多数情况下，我们希望条件匹配到某个case，然后只执行该case下的逻辑，所以需要在每个case语句的末尾加上break语句。</strong></p>
</li>
<li><p>中断控制流程的语句</p>
<ul>
<li><p>break：中断并退出当前循环。</p>
</li>
<li><p>带标签的break：退出多重循环，标签必须在希望跳出的最外层循环之前，并且必须紧跟一个冒号：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">escape_mark: <span class="comment">//break标签</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">        System.out.println(i + <span class="string">&quot;, &quot;</span> + j);</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">5</span> &amp;&amp; j == <span class="number">5</span>)</span><br><span class="line">            <span class="keyword">break</span> escape_mark; <span class="comment">//跳出两层循环</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>标签也可用到if语句和块语句中，但只能跳出语句块，不能跳入语句块</p>
<ul>
<li>continue: 跳过当前循环体的剩余部分，立刻跳到循环首部。</li>
</ul>
</li>
</ul>
<h3 id="9-大数"><a href="#9-大数" class="headerlink" title="9. 大数"></a>9. 大数</h3><p>如果基本的整数和浮点数的精度无法满足要求，可以使用 java.math 包中的两个类：BigInteger 和 BigDecimal 。这两个类本别可以实现任意精度的整数运算 和 任意精度的浮点数运算。</p>
<h3 id="10-数组"><a href="#10-数组" class="headerlink" title="10. 数组"></a>10. 数组</h3><ul>
<li><p>数组的声明：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] a;</span><br><span class="line">或</span><br><span class="line"><span class="type">int</span> a[];</span><br></pre></td></tr></table></figure>
</li>
<li><p>数组的创建：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用new</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100</span>]; <span class="comment">// 创建了一个长度为100的数组a</span></span><br></pre></td></tr></table></figure>

<p>注意，数组的长度在创建后就无法改变，如果需要经常改变数组的大小，应该使用另一种数据结构——数组列表（array list）。</p>
</li>
<li><p>数组的初始化</p>
<p>默认初始化值：创建一个数字数组时，所有元素都默认初始化为0；创建一个boolean数组时，所有元素都默认初始化为false；创建一个对象数组时，所有元素都默认初始化为null。</p>
<p>可以先创建一个数组，然后使用循环语句对每个元素赋值。</p>
<p>创建数组同时初始化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure>

<p>声明一个匿名数组：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">int</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure>

<p>可以使用这种匿名数组的方式重新初始化一个已有数组，而不需要创建新的数组：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>访问数组元素</p>
<p>数组元素下标从0开始。</p>
</li>
<li><p>for each循环<br>for each是一种功能很强的循环结构，可以用来依次遍历数组或集合中的每个元素，而不必考虑指定其下标，语法格式为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(variable: collection) statement <span class="comment">//循环集合collection中的每个元素variable</span></span><br><span class="line"><span class="comment">// for each循环遍历数组中的每个元素，而不是下标值</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>数组的拷贝<br>Java中，允许使用赋值运算符<code>=</code>将一个数组变量拷贝到另一个数组变量,此时两个变量将引用同一个数组，这是不安全的，当修改其中一个数组的值时，另一个也会受到影响：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">luckyNumbers</span> <span class="operator">=</span> smallPrimes;</span><br><span class="line">luckyNumbers[<span class="number">5</span>] = <span class="number">12</span>; <span class="comment">// now smallPrimes[5] is also 12</span></span><br></pre></td></tr></table></figure>

<p>如果希望将一个数组的所有值拷贝到另一个数组中，可以使用<code>Arrays.copyOf()</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">copyedLuckyNumbers</span> <span class="operator">=</span> Arrays.copyOf(luckyNumbers, luckyNumbers.length);</span><br></pre></td></tr></table></figure>

<p>第二个参数是新数组的长度，这个方法通常用来增加数组的大小：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">luckyNumbers = Arrays.copyOf(luckyNumbers, <span class="number">2</span>*luckyNumbers.length);</span><br></pre></td></tr></table></figure>

<p>如果数组元素是数值型，那么额外的元素将被赋予默认值0，如果是布尔型则赋予默认值false。如果数组的长度小于原始数组的长度，则只拷贝前面的值。</p>
</li>
<li><p>命令行参数<br>每个Java程序都有一个带String arg[]参数的main方法，这个参数表名main方法接收一个字符串数组，这也就是命令行上指定的参数。<br>以下面的程序为例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Message</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (args.length == <span class="number">0</span> || arg[<span class="number">0</span>].equals(<span class="string">&quot;-h&quot;</span>))&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;Hello,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (arg[<span class="number">0</span>].equals(<span class="string">&quot;-g&quot;</span>)) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;Goodbye,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 输出剩下的参数</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot; &quot;</span> + args[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以下面形式调用该程序：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java Message -g cruel world</span><br><span class="line"><span class="comment">// 输出：Goodbye, curel world!</span></span><br></pre></td></tr></table></figure>

<p>args数组将包含以下内容：</p>
<blockquote>
<p>args[0]: “-g”<br>args[1]: “cruel”<br>args[2]: “world”</p>
</blockquote>
<p>注意程序名Message并没有存储在args数组中。</p>
</li>
<li><p>数组排序<br>如果要对数值型数组进行排序，可以使用<code>Arrays.sort()</code>方法。该方法使用了优化的快速排序(QuickSort)方法。Arrays类中还提供了其他排序方法，可以查询使用。</p>
</li>
<li><p>多维数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明一个二维组：</span></span><br><span class="line"><span class="type">double</span> [][] balances;</span><br><span class="line"><span class="comment">// 初始化二维数组</span></span><br><span class="line">banlances = <span class="keyword">new</span> <span class="title class_">double</span>[wieth][length];</span><br><span class="line"><span class="comment">// 知道数组元素就可以直接对数组初始化</span></span><br><span class="line"><span class="type">int</span> [][]banlances = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,</span><br><span class="line">                     &#123;<span class="number">3</span>,<span class="number">4</span>&#125;&#125;;</span><br><span class="line"><span class="comment">//可以用两个下标访问二维数组的元素</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>不规则数组<br>数组不一定是矩形的，可以任意指定长短。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java核心技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java核心技术</tag>
        <tag>JavaEE</tag>
      </tags>
  </entry>
  <entry>
    <title>3.对象和类</title>
    <url>/Java/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/3.%E5%AF%B9%E8%B1%A1%E5%92%8C%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="3-对象和类"><a href="#3-对象和类" class="headerlink" title="3. 对象和类"></a>3. 对象和类</h1><h2 id="面向对象程序设计概述"><a href="#面向对象程序设计概述" class="headerlink" title="面向对象程序设计概述"></a>面向对象程序设计概述</h2><p>面向对象适合解决规模较大的问题，规模较小的问题可以分解为面向过程的程序化设计问题来解决。</p>
<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="1-一些基本概念"><a href="#1-一些基本概念" class="headerlink" title="1. 一些基本概念"></a>1. 一些基本概念</h3><ul>
<li><h4 id="类："><a href="#类：" class="headerlink" title="类："></a>类：</h4><p>类是构造对象的模板或蓝图，由类构造对象的过程称为创建类的实例（即对象是类的示例）。</p>
</li>
<li><h4 id="类的部分特性："><a href="#类的部分特性：" class="headerlink" title="类的部分特性："></a>类的部分特性：</h4><ul>
<li>封装：将数据和行为组合在一个包中，并对对象的使用者隐藏具体的实现方式。对象中的数据称为<strong>实例字段</strong>，操作数据的过程称为<strong>方法</strong>，作为一个类的实例，特定对象都有一组特定的实例字段值，这些值的集合就是对象的当前<strong>状态</strong>。<br><strong>实现封装的关键在于：不能让类的方法直接访问其他类中的实例字段</strong>。</li>
<li>继承：<strong>可以通过扩展其他类来构建新类。</strong>Java中所有的类都扩展自Object类，拓展后的新类具有被扩展类的全部属性和方法，只需要在新类中提供适用于这个新类的新方法和新数据字段即可。</li>
</ul>
</li>
<li><h4 id="对象的主要特性："><a href="#对象的主要特性：" class="headerlink" title="对象的主要特性："></a>对象的主要特性：</h4><ul>
<li>对象的行为：可以对对象完成哪些操作？或者可以对对象应用哪些方法？<br>用对象的可调用方法来定义。</li>
<li>对象的状态：当调用那些方法时，对象会如何响应？<br>对象保存着描述当前状况的信息，这就是对象的状态。</li>
<li>对象的标识：如何区分具有相同行为与状态的不同对象？</li>
</ul>
</li>
<li><h4 id="常见的类之间的关系"><a href="#常见的类之间的关系" class="headerlink" title="常见的类之间的关系"></a>常见的类之间的关系</h4><ul>
<li>依赖（“uses-a”）关系：<br>类的依赖关系是指一个类的实现要依赖于其他类的实现，即如果一个类的方法使用或者操纵另一个类的对象，就说一个类依赖于另一个类。<br><strong>应该尽可能地将相互依赖的类减至最少，也就是减少类之间的耦合。</strong></li>
<li>聚合（“has-a”）关系：<br>类的聚合关系是指一个类包含另一个类的对象作为其成员变量，这个成员变量可以被多个方法使用，但是这个成员变量的生命周期不受包含它的类的生命周期的影响。</li>
<li>继承（“is-a”）关系：<br>一个类继承另一个类。</li>
</ul>
</li>
<li><h4 id="Java中的预定义类"><a href="#Java中的预定义类" class="headerlink" title="Java中的预定义类"></a>Java中的预定义类</h4><p>Java的JDK中封装了很多基础的类，可以直接调用</p>
</li>
<li><h4 id="构造对象"><a href="#构造对象" class="headerlink" title="构造对象"></a>构造对象</h4><p>使用对象的前提，是要先构造对象，然后指定其初始状态。完成这一操作的是<strong>构造器</strong>（或叫构造函数），即构造器主要用来构造并初始化对象。<br>构造器的名字应该与类名相同，构造一个对象，需要在构造器前面加上<code>new</code>操作符, 例如:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>();</span><br></pre></td></tr></table></figure>

<p>如果希望构造的对象可以多次使用，可以将对象存放在一个变量中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Date</span> <span class="variable">birthday</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br></pre></td></tr></table></figure>

<p><strong>对象和对象变量之间存在的重要的区别</strong>，例如以下语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Date deadline;</span><br></pre></td></tr></table></figure>

<p>定义了一个对象变量deadline，它可以引用Date类型的对象。但是，deadline本身不是一个对象，而且它也没有引用任何对象，所以还不能在这个变量使用任何Date方法。<br>要想使用对象变量deadline，必须初始化该变量，有两种初始化方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">deadline = <span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">// 引用一个新构造的对象</span></span><br><span class="line">deadline = birthday; <span class="comment">// 引用一个已有的对象，此时这两个变量都引用同一个对象</span></span><br></pre></td></tr></table></figure>

<p><strong>要认识到：对象变量并没有包含一个对象，它只是引用一个对象</strong>。<strong>在Java中，任何对象变量的值都是对存储在另外一个地方的某个对象的引用。new操作符的返回值也是一个引用。</strong><br>下列语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Date</span> <span class="variable">deadline</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br></pre></td></tr></table></figure>

<p>有两个部分，new Date()构造了一个Date类型的对象，它的值是对新创建对象的一个引用。这个引用存储在对象变量deadline中。</p>
<p>可以显式地将对象变量设置为null，表示这个对象变量目前没有引用任何对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Date</span> <span class="variable">deadline</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">//显式表达</span></span><br><span class="line">Date deadline; <span class="comment">// 隐式表达</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java核心技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java核心技术</tag>
        <tag>JavaEE</tag>
      </tags>
  </entry>
  <entry>
    <title>常用的Java API</title>
    <url>/Java/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/%E5%B8%B8%E7%94%A8Java%20API/</url>
    <content><![CDATA[<h1 id="常用Java-API"><a href="#常用Java-API" class="headerlink" title="常用Java API"></a>常用Java API</h1><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">length()：返回字符串的长度。</span><br><span class="line"></span><br><span class="line">charAt(int index)：返回指定索引处的字符。</span><br><span class="line"></span><br><span class="line">substring(int beginIndex, int endIndex)：返回从beginIndex到endIndex-1的子字符串。</span><br><span class="line"></span><br><span class="line">indexOf(String str)：返回指定字符串在此字符串中第一次出现的索引。</span><br><span class="line"></span><br><span class="line">lastIndexOf(String str)：返回指定字符串在此字符串中最后一次出现的索引。</span><br><span class="line"></span><br><span class="line">startsWith(String prefix)：测试此字符串是否以指定的前缀开头。</span><br><span class="line"></span><br><span class="line">endsWith(String suffix)：测试此字符串是否以指定的后缀结尾。</span><br><span class="line"></span><br><span class="line">toUpperCase()：将此字符串转换为大写。</span><br><span class="line"></span><br><span class="line">toLowerCase()：将此字符串转换为小写。</span><br><span class="line"></span><br><span class="line">trim()：返回字符串的副本，忽略前导空白和尾部空白。</span><br><span class="line"></span><br><span class="line">replace(char oldChar, char newChar)：返回一个新字符串，其中所有出现的oldChar都被替换为newChar。</span><br><span class="line"></span><br><span class="line">split(String regex)：根据给定的正则表达式拆分此字符串。</span><br><span class="line"></span><br><span class="line">equals(Object anObject)：将此字符串与指定对象进行比较。</span><br><span class="line"></span><br><span class="line">compareTo(String anotherString)：按字典顺序比较两个字符串。</span><br><span class="line"></span><br><span class="line">valueOf()：将其他类型的数据转换为字符串。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">append(String str)：将指定的字符串追加到此字符序列。</span><br><span class="line"></span><br><span class="line">insert(int offset, String str)：将指定的字符串插入此字符序列中。</span><br><span class="line"></span><br><span class="line">delete(int start, int end)：删除此字符序列中指定范围内的字符。</span><br><span class="line"></span><br><span class="line">replace(int start, int end, String str)：使用指定的字符串替换此字符序列中指定范围内的字符。</span><br><span class="line"></span><br><span class="line">reverse()：将此字符序列用其反转形式取代。</span><br><span class="line"></span><br><span class="line">length()：返回此字符序列的长度。</span><br><span class="line"></span><br><span class="line">capacity()：返回此字符序列的当前容量。</span><br><span class="line"></span><br><span class="line">charAt(int index)：返回此字符序列中指定索引处的 char 值。</span><br><span class="line"></span><br><span class="line">setCharAt(int index, char ch)：将此字符序列中指定索引处的字符设置为 ch。</span><br><span class="line"></span><br><span class="line">toString()：返回此字符序列的字符串表示形式。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line">next()：读取下一个字符串，以空格作为分隔符。</span><br><span class="line">nextLine()：读取下一行字符串，以换行符作为分隔符。</span><br><span class="line">nextInt()：读取下一个整数。</span><br><span class="line">nextDouble()：读取下一个双精度浮点数。</span><br><span class="line">useDelimiter(String pattern)：设置分隔符模式。</span><br><span class="line">hasNext()：检查是否还有下一个输入项。</span><br><span class="line">hasNextInt()：检查下一个输入项是否为整数。</span><br><span class="line">hasNextDouble()：检查下一个输入项是否为双精度浮点数。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="System"><a href="#System" class="headerlink" title="System"></a>System</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println()：将文本输出到控制台。</span><br><span class="line"></span><br><span class="line">System.err.println()：将错误消息输出到控制台。</span><br><span class="line"></span><br><span class="line">System.currentTimeMillis()：返回当前时间的毫秒数。</span><br><span class="line"></span><br><span class="line">System.exit(int status)：终止Java虚拟机。</span><br><span class="line"></span><br><span class="line">System.getProperty(String key)：获取系统属性。</span><br><span class="line"></span><br><span class="line">System.getenv(String name)：获取环境变量。</span><br><span class="line"></span><br><span class="line">System.arraycopy(Object src, int srcPos, Object dest, int destPos, int length)：将一个数组的一部分复制到另一个数组中。</span><br><span class="line"></span><br><span class="line">System.gc()：请求Java虚拟机进行垃圾回收。</span><br><span class="line"></span><br><span class="line">System.setOut(PrintStream out)：将标准输出流重定向到指定的PrintStream。</span><br><span class="line"></span><br><span class="line">System.setErr(PrintStream err)：将标准错误流重定向到指定的PrintStream。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Console"><a href="#Console" class="headerlink" title="Console"></a>Console</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">    System.console()：获取当前Java虚拟机的控制台对象，如果没有控制台，则返回null。</span><br><span class="line"></span><br><span class="line">    Console.readLine(String fmt, Object... args)：从控制台读取一行输入，可以使用格式化字符串指定提示信息。</span><br><span class="line"></span><br><span class="line">    Console.readPassword(String fmt, Object... args)：从控制台读取密码，输入的字符将被隐藏。</span><br><span class="line"></span><br><span class="line">    Console.writer()：获取控制台的输出流，可以使用它输出信息到控制台。</span><br><span class="line"></span><br><span class="line">    Console.format(String fmt, Object... args)：使用格式化字符串输出信息到控制台。</span><br><span class="line"></span><br><span class="line">    Console.printf(String fmt, Object... args)：使用格式化字符串输出信息到控制台，与format方法类似。</span><br><span class="line"></span><br><span class="line">需要注意的是，Java Console只能在命令行模式下使用，不能在图形界面下使用。另外，Java Console在某些操作系统上可能不可用，例如在Windows上使用Eclipse时，Java Console可能无法正常工作。</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Java</category>
        <category>Java核心技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JavaEE</tag>
        <tag>Java API</tag>
      </tags>
  </entry>
  <entry>
    <title>逻辑层关系梳理</title>
    <url>/Java/%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C/%E9%80%BB%E8%BE%91%E5%B1%82%E5%85%B3%E7%B3%BB%E6%A2%B3%E7%90%86/</url>
    <content><![CDATA[<h2 id="Mapper层"><a href="#Mapper层" class="headerlink" title="Mapper层"></a>Mapper层</h2><ul>
<li>查询用户已经使用的次数</li>
<li>查询城市白名单</li>
<li>为用户添加一次使用记录</li>
</ul>
<h2 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h2><ul>
<li>调用mapper层，获取用户已经使用的次数</li>
<li>调用mapper层，获取城市白名单，判断用户所在城市是否支持</li>
<li>调用mapper层，为用户添加一次使用记录</li>
</ul>
<h2 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h2><ul>
<li>调用Service层，根据使用次数返回结果</li>
<li>调用Service层，根据service的判断结果返回结果</li>
<li>如果前两次返回结果都为成功，则调用Service层为用户添加一次使用记录</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>开发经验</category>
      </categories>
      <tags>
        <tag>开发经验</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>配置文件无法生效的问题解决</title>
    <url>/Java/%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C/%E8%A7%A3%E5%86%B3%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%97%A0%E6%B3%95%E7%94%9F%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%88pom.xml%E4%B8%AD%E8%BF%9B%E8%A1%8C%E9%85%8D%E7%BD%AE%EF%BC%89/</url>
    <content><![CDATA[<h1 id="解决配置文件无法生效的问题（pom-xml中进行配置）"><a href="#解决配置文件无法生效的问题（pom-xml中进行配置）" class="headerlink" title="解决配置文件无法生效的问题（pom.xml中进行配置）"></a>解决配置文件无法生效的问题（pom.xml中进行配置）</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在build中配置resources，来防止我们资源导出失败的问题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
        <category>开发经验</category>
      </categories>
      <tags>
        <tag>开发经验</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java实战经验</title>
    <url>/Java/%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C/Java%E5%AE%9E%E6%88%98%E7%BB%8F%E9%AA%8C/</url>
    <content><![CDATA[<h1 id="Java实战经验"><a href="#Java实战经验" class="headerlink" title="Java实战经验"></a>Java实战经验</h1><blockquote>
<p> 本文内容完全来自于个人理解与开发经验</p>
</blockquote>
<p>[TOC]</p>
<h2 id="1-关于实体类"><a href="#1-关于实体类" class="headerlink" title="1. 关于实体类"></a>1. 关于实体类</h2><h2 id="1-1-实体类的建立与分层"><a href="#1-1-实体类的建立与分层" class="headerlink" title="1.1 实体类的建立与分层"></a>1.1 实体类的建立与分层</h2><h3 id="1-1-1什么是实体类？为什么要创建实体类？"><a href="#1-1-1什么是实体类？为什么要创建实体类？" class="headerlink" title="1.1.1什么是实体类？为什么要创建实体类？"></a>1.1.1什么是实体类？为什么要创建实体类？</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在实际业务开发中，会发现我们的逻辑其实是在给一个个或大或小的“对象”或者“模块”之前建立联系，例如现在要书写一个返回全国各级省市区对应关系的接口，其中包括行政区域编码和行政区域名称两个要素，这种接口很常见，在很多应用上我们都可以看见，可以一级一级地选择省、市、区县，比较方便；那么这时候要如何来做呢？由于一般接口返回给前端的都是一个JSON字符串，我们很容易想到使用JSON工具包对信息进行封装，创建一个省JSON对象，然后再创建一个市JSON对象，将市JSON对象put到省JSON对象中...以此类推。</span><br><span class="line"></span><br><span class="line">在这个过程中，我们可以发现省、市、区县是相对独立的部分，因为我们对这三个部分，每一部分都创建了一个JSON对象。使用JSON对象的一个优点是比较方便和灵活，毕竟我们可以随意地将数据put进去；但另一方面，当实际的业务场景非常复杂时，例如现在不仅仅有名称和编码，还有20个其他属性，此时在进行操作时就会出现很多问题，例如很容易忘记将某个属性put进去，而且，后期在查看代码时，也难以分辨每一部分需要包含哪些属性，当这些部分涉及到重复使用时操作也会比较麻烦。</span><br><span class="line"></span><br><span class="line">因此，创建一个合适的Java对象是必要的，这也正是Java对象的存在意义，将事实上或逻辑上存在的事物抽象成一个Java对象，这样一来，业务模块的独立性就立马显现出来，模块的内容(Java对象的属性)也一目了然，无论是开发还是后续的迭代都很方便。</span><br><span class="line"></span><br><span class="line">如果为这个Java对象中的每一个属性都添加内置的getter/setter方法(用来取属性值，或为属性赋值)，这样就可以通过该对象进行交互，为整个对象添加一个内置的toString()方法, 这样就能够清晰的输出和查看对象包含的内容。</span><br><span class="line"></span><br><span class="line">包含了属性、getter/setter方法、toString()方法的Java对象，我们称之为实体类，在实际开发中，为了方便可以使用 lombok包下的@Data注解，但最好还是要了解这些方法的实现，如果使用IEDA开发工具，也可以使用Alt + Insert快捷键快速生成这些方法。</span><br></pre></td></tr></table></figure>

<h3 id="1-1-2-创建实体类注意点"><a href="#1-1-2-创建实体类注意点" class="headerlink" title="1.1.2 创建实体类注意点"></a>1.1.2 创建实体类注意点</h3><p><strong>创建实体类时，要注意属性的类型不能使用基本类型，而应使用包装类。</strong>因为包装类可以为属性提供更多的功能，例如可以为null值提供支持，可以用equals方法进行比较等。本质上还是因为包装类把属性声明为了一个类，而Java对类的支持比较完善；而基本类型是Java语言的预定义数据类型，没有提供任何方法和字段。</p>
<p>基本类型会有默认值，可能会对业务产生影响。</p>
<h2 id="1-2-实体类的序列化"><a href="#1-2-实体类的序列化" class="headerlink" title="1.2 实体类的序列化"></a>1.2 实体类的序列化</h2><h3 id="1-2-1-什么是序列化？"><a href="#1-2-1-什么是序列化？" class="headerlink" title="1.2.1 什么是序列化？"></a>1.2.1 什么是序列化？</h3><p>实体类的序列化是指将Java实体类对象转换为字节流的过程，以便在网络上传输或将其保存到磁盘上。</p>
<h3 id="1-2-2-如何对实体类进行序列化？"><a href="#1-2-2-如何对实体类进行序列化？" class="headerlink" title="1.2.2 如何对实体类进行序列化？"></a>1.2.2 如何对实体类进行序列化？</h3><p>对实体类进行序列化，只需要先让实体类实现Serializable接口，然后生成序列化ID即可。使用IDEA生成序列化ID，需要进行设置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">新版：</span><br><span class="line">进入“Settings”界面，然后选择“Editor”-&gt;“Inspections”-&gt;“JVM languages”-&gt;“Serialization issues”，勾选“Serializable class without ’serialVersionUID’” 。这样，IDEA就会在编辑器中提醒你对于没有显式指定序列化ID的类，自动生成ID的风险。</span><br><span class="line"></span><br><span class="line">旧版：</span><br><span class="line">进入“Settings”界面，然后选择“Editor”-&gt;“Inspections”-&gt;“Java”-&gt;“Serialization issues”，勾选“Serializable class without ’serialVersionUID’” 。这样，IDEA就会在编辑器中提醒你对于没有显式指定序列化ID的类，自动生成ID的风险。</span><br></pre></td></tr></table></figure>

<p>设置完毕后，先让实体类实现Serializable接口，将鼠标光标放在实体类类名上，可以等待提示窗口出现，然后选择添加序列化id，也可以直接点击类名，然后按下Alt + Enter组合快捷键，选择生成序列化id。</p>
<h3 id="1-2-3-什么情况下需要对实体类进行序列化？"><a href="#1-2-3-什么情况下需要对实体类进行序列化？" class="headerlink" title="1.2.3 什么情况下需要对实体类进行序列化？"></a>1.2.3 什么情况下需要对实体类进行序列化？</h3><p>对Java实体类进行序列化的主要原因是为了在分布式系统中进行数据传输和持久化。在分布式系统中，不同的应用程序可能运行在不同的计算机上，它们需要通过网络进行通信。在这种情况下，Java实体类对象需要被序列化为字节流，以便在网络上传输。另外，Java实体类对象也可以被序列化并保存到磁盘上，以便在需要时进行读取和恢复。</p>
<p>例如在Dubbo架构项目中，Controller层 和 Service层是分离的，即在实际部署时，两个部分是部署在不同服务器上的。而一些数据传输实体是通过调用Controller的接口，传递给Service层进行逻辑处理的。这个传递过程中，需要先将数据传输实体（DTO）序列化为字节流在网络上传输，然后接收方再将字节流反序列化为实体类用于逻辑处理。</p>
<p><strong>总之，需要通过网络传输的实体类都需要进行序列化。</strong></p>
<h2 id="1-3-实体类的用途分类"><a href="#1-3-实体类的用途分类" class="headerlink" title="1.3 实体类的用途分类"></a>1.3 实体类的用途分类</h2><h3 id="1-3-1-个人常用的几种实体类"><a href="#1-3-1-个人常用的几种实体类" class="headerlink" title="1.3.1 个人常用的几种实体类"></a>1.3.1 个人常用的几种实体类</h3><ul>
<li><p>DO（Data Object）：数据层对象，用于持久化数据。按照规范，DO对象中的属性需要与数据库的字段一一对应。</p>
<p>在实际开发中，DO用来接收查询返回结果；<br><strong>但有时我们只需要数据库中的某几个字段，而非全部字段</strong>，在这种情况下：</p>
<ul>
<li>如果数据库的查询结果可以直接作为接口调用结果返回，则创建一个VO实体类进行接收，然后该VO实体类经由Service层直接返回给Controller层</li>
<li>如果数据库的查询结果不能直接作为接口调用结果，而是要参与Service层的逻辑计算，则建议使用DO来接收返回结果，而不是再创建新的类。比如数据库有10个字段，对应的DO类也有10个字段，但某个查询只需要查询其中的3个字段，那么我们依然使用该DO来接收返回数据，这时返回结果中其他7个字段的值为null，只需要在处理时只调用这三个字段即可。避免在处理时由于一会儿用两个、一会儿用三个这种情况创建大量的类，只要查询的是同一张表，就用该表对应的DO来接收返回结果。</li>
</ul>
</li>
<li><p>DTO（Data Transfer Object）：数据传输对象，用于在不同层之间传输数据，以及封装从数据库中查询出来的数据。</p>
<p>在实际开发中，DTO用来接收从接口传来的数据，也就是Controller层传来的数据，然后传递到Service、ServiceImpl层。也可以从<br>ServiceImpl层传递到Mapper&#x2F;Dao层。</p>
</li>
<li><p>VO （Value Object）: 值对象，用于封装业务逻辑层返回的数据。<br>在实际开发中，VO用来将处理完的数据进行封装，然后返回计算结果。也就是说，VO用来将数据处理结果进行封装返回给接口调用者，VO的结构就是接口调用者看到的结构</p>
</li>
</ul>
<h3 id="1-3-2-几种实体类之间的数据传输与类型转换"><a href="#1-3-2-几种实体类之间的数据传输与类型转换" class="headerlink" title="1.3.2 几种实体类之间的数据传输与类型转换"></a>1.3.2 几种实体类之间的数据传输与类型转换</h3><ul>
<li>如果接口需要传参，当参数有多个时，将这些参数封装成DTO实体类，然后传输给Service和ServiceImpl层，如果有需要，通过ServiceImpl调用Mapper&#x2F;Dao层的时候，如果对数据库的操作需要传递多个参数，则也需要将这些DTO封装成实体类进行传输。查询数据库表之前需要依据数据库字段创建DO实体类，用来接收返回结果（<strong>一些简单的接口可以直接用VO实体类接收数据库查询结果并返回，这种情况上面已经叙述过了，此处不再赘述</strong>）。在ServiceImpl接收到这些DO时，由于实际业务，这些数据库查询结果是为了参与某些逻辑计算而非作为接口返回结果，所以通常，在Service层经过逻辑处理后的结果，需要封装在VO类里返回给Controller。</li>
</ul>
<h2 id="2-关于对象"><a href="#2-关于对象" class="headerlink" title="2. 关于对象"></a>2. 关于对象</h2><h3 id="2-1-对象的创建和对象引用"><a href="#2-1-对象的创建和对象引用" class="headerlink" title="2.1 对象的创建和对象引用"></a>2.1 对象的创建和对象引用</h3><p>在Java中，创建一个对象是在堆内存中为该对象分配一块存储空间。<br>声明一个对象的引用变量时，会为其在栈内存中分配一块存储空间，引用相当于C++中的指针。<br>将一个对象赋值给一个对象的引用变量时，实际上是将该对象在堆内存中的地址存储在栈内存中的地址中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TestClass</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestClass</span>();</span><br><span class="line"><span class="comment">// new TestClass时，在堆内存中为其分配存储空间；声明TestClass的引用变量test时，test存储在栈内存中；将创建的对象赋值给引用变量test,是将该对象的对内存地址存储在了引用变量test的栈内存地址中，注意传递的是地址，而非实际数据。</span></span><br></pre></td></tr></table></figure>

<h4 id="2-1-1-创建和引用对象踩坑实例"><a href="#2-1-1-创建和引用对象踩坑实例" class="headerlink" title="2.1.1 创建和引用对象踩坑实例"></a>2.1.1 创建和引用对象踩坑实例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;TestClass&gt; testList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="type">TestClass</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestClass</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">	test.setA(i);</span><br><span class="line">    test.setB(i);</span><br><span class="line">    test.setC(i);</span><br><span class="line">    testList.add(test)</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(testList.toString()); <span class="comment">// [TestClass&#123;A=2, B=2, C=2&#125;, TestClass&#123;A=2, B=2, C=2&#125;, TestClass&#123;A=2, B=2, C=2&#125;]</span></span><br></pre></td></tr></table></figure>

<p>意图通过在循环外创建对象的方式，实现一次创建、多次复用的效果。结果列表中的所有元素的值都是该对象最后一次赋值的结果。因为列表中存储的是指向该对象的地址，而非具体的值。</p>
<h3 id="2-2-对象的比较"><a href="#2-2-对象的比较" class="headerlink" title="2.2 对象的比较"></a>2.2 对象的比较</h3><p>比较两个对象是否相等，可以根据情况使用以下两种方式：</p>
<ul>
<li>使用Object类的<code>.equals()</code>方法，<strong>该方法比较的是两个对象中的内容是否相等</strong>，如果相等返回true，否则返回false。<br>如果要使用<code>.equals()</code>方法比较两个自定义的类对象，需要在自定义类中重写equals()方法，以便根据对象的内容进行比较。</li>
<li>使用<code>==</code>比较两个对象的<strong>引用</strong>是否相同，<strong>如果两个对象的引用指向同一个对象</strong>，则返回true，否则返回false。</li>
</ul>
<h3 id="2-3-对象的判空"><a href="#2-3-对象的判空" class="headerlink" title="2.3 对象的判空"></a>2.3 对象的判空</h3><h4 id="2-3-1-一般对象的判空"><a href="#2-3-1-一般对象的判空" class="headerlink" title="2.3.1 一般对象的判空"></a>2.3.1 一般对象的判空</h4><ul>
<li><p>使用<code>==</code>运算符判断对象是否为null：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj == <span class="literal">null</span>)&#123;&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用java.util包中的<code>Objects.isNull()</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (Objects.isNull(obj))&#123;&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>org.springframework.util</code>中的<code>ObjectUtils.isEmpty()</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (ObjectUtils.isEmpty(obj))&#123;&#125;; <span class="comment">// 对象</span></span><br><span class="line"><span class="keyword">if</span> (ObjectUtils.isEmpty(Collection))&#123;&#125;; <span class="comment">//集合</span></span><br></pre></td></tr></table></figure>

<p><strong>该方法不仅可以判断单个对象是否为空，对于数组、集合等类型可以判断是否为空。</strong></p>
</li>
<li><p>对于String类型，可以使用<code>org.apache.commons.lang</code>包中的<code>StringUtils.isBlank()</code>方法。还可以使用<code>org.springframework.util</code>中的<code>StringUtils.isEmpty()</code>方法，但该方法目前处于弃用状态。当字符串为null，或者空字符串，亦或者只包含空格的字符串时，该方法将返回true。</p>
</li>
<li><p>对于集合类型，还可以使用<code>size()</code>等方法，通过判断集合中元素的个数是否为0来判断集合是否为空。</p>
</li>
<li><p><strong>集合中的null问题</strong></p>
</li>
</ul>
<h4 id="2-3-2-Mapper层-x2F-Dao层返回实例的判空"><a href="#2-3-2-Mapper层-x2F-Dao层返回实例的判空" class="headerlink" title="2.3.2 Mapper层&#x2F;Dao层返回实例的判空"></a>2.3.2 Mapper层&#x2F;Dao层返回实例的判空</h4><p><strong>使用Mapper层&#x2F;Dao层返回的实例前一定要进行判空操作，否则程序运行时很容易出现空指针的问题。</strong></p>
<ul>
<li><p>如果是增、删、改操作，返回类型可以设置为int，然后通过判断int是否为0，来判断增、删、改操作是否成功。因为增删改操作返回的数值代表了对数据库表中产生影响的数据条数。</p>
</li>
<li><p>如果返回值为包装类、自定义类或各种集合类型，可以使用上面介绍的对象判空的方式进行判断。</p>
</li>
</ul>
<h3 id="3-关于MySQL数据库"><a href="#3-关于MySQL数据库" class="headerlink" title="3. 关于MySQL数据库"></a>3. 关于MySQL数据库</h3><h4 id="3-1-数据库设计"><a href="#3-1-数据库设计" class="headerlink" title="3.1 数据库设计"></a>3.1 数据库设计</h4><p>数据作为一个项目的最底层，起着根基的作用。良好的数据库设计可以为程序编码带来很大方便，在软件维护中，涉及到数据库的修改一般都比较棘手。因此，在项目开发之初，应该投入足够的时间精力进行数据库设计。笔者经验有限，个人建议按照一下方面思考如何进行数据库设计：</p>
<ul>
<li><p>扩展性<br>数据表的设计首先要考虑到项目后续会如何扩展，尽量避免扩展时需要增减字段的情况。另外需要考虑到数据库的承载能力，设计时要尽可能减少存储占用以及避免存储量的快速增长。</p>
</li>
<li><p>低耦合性<br>数据表设计时尽量实现业务独立，即该表的变化不会影响其他业务或数据。非必要情况下尽量避免外键的使用和数据表的关联。</p>
</li>
<li></li>
</ul>
<h4 id="3-2-建表"><a href="#3-2-建表" class="headerlink" title="3.2 建表"></a>3.2 建表</h4><h4 id="3-3-性能优化"><a href="#3-3-性能优化" class="headerlink" title="3.3 性能优化"></a>3.3 性能优化</h4><h2 id="4-关于缓存Redis"><a href="#4-关于缓存Redis" class="headerlink" title="4. 关于缓存Redis"></a>4. 关于缓存Redis</h2><h3 id="4-1-缓存的优点"><a href="#4-1-缓存的优点" class="headerlink" title="4.1 缓存的优点"></a>4.1 缓存的优点</h3><ul>
<li>读写速率快，可以有效降低系统响应的延迟。</li>
<li></li>
</ul>
<h3 id="4-2-缓存的缺点"><a href="#4-2-缓存的缺点" class="headerlink" title="4.2 缓存的缺点"></a>4.2 缓存的缺点</h3><ul>
<li>问题排查时，如果程序中使用了缓存，常常会忘记了缓存的影响而找不到问题，并且由于缓存的影响，问题排查的难度也会变大。</li>
<li></li>
</ul>
<h3 id="4-3-缓存的使用场景"><a href="#4-3-缓存的使用场景" class="headerlink" title="4.3 缓存的使用场景"></a>4.3 缓存的使用场景</h3><ul>
<li>当某部分数据需要频繁查询时，可以考虑使用缓存，既可以加快查询速度，也可以减少数据库的查询压力。</li>
</ul>
<h3 id="4-4-如何权衡使用缓存"><a href="#4-4-如何权衡使用缓存" class="headerlink" title="4.4 如何权衡使用缓存"></a>4.4 如何权衡使用缓存</h3><h2 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h2><h3 id="基础格式规范-见阿里巴巴Java开发代码规范"><a href="#基础格式规范-见阿里巴巴Java开发代码规范" class="headerlink" title="基础格式规范 见阿里巴巴Java开发代码规范"></a>基础格式规范 见阿里巴巴Java开发代码规范</h3><h3 id="实战中的开发规范"><a href="#实战中的开发规范" class="headerlink" title="实战中的开发规范"></a>实战中的开发规范</h3><h2 id="其他知识"><a href="#其他知识" class="headerlink" title="其他知识"></a>其他知识</h2><h3 id="MyBatis-x2F-iBatis-中resultMap的作用"><a href="#MyBatis-x2F-iBatis-中resultMap的作用" class="headerlink" title="MyBatis&#x2F;iBatis 中resultMap的作用"></a>MyBatis&#x2F;iBatis 中resultMap的作用</h3><p>resultMap将实体类中的属性字段与底层数据库表中的字段建立了映射。</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>开发经验</category>
      </categories>
      <tags>
        <tag>开发经验</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>空值判断</title>
    <url>/Java/%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C/%E7%A9%BA%E5%80%BC%E5%88%A4%E6%96%AD/</url>
    <content><![CDATA[<h1 id="空值判断"><a href="#空值判断" class="headerlink" title="空值判断"></a>空值判断</h1><h2 id="数据库查询"><a href="#数据库查询" class="headerlink" title="数据库查询"></a>数据库查询</h2><ul>
<li>在Mybatis中，如果数据查询select语句根据where条件找不到要找的数据时，将会<strong>返回null</strong>，无论接收返回值的类型是什么。如果要查询单个字段的一个值，应该使用<strong>包装类型</strong>而不是基本类型来接收返回值，因为基本类型接收null会报错。</li>
</ul>
<h2 id="集合遍历"><a href="#集合遍历" class="headerlink" title="集合遍历"></a>集合遍历</h2><ul>
<li>当我们需要遍历一个集合时，<strong>首先应该判断该集合是否为空</strong>，一般可以通过集合的大小来判断。尤其是当我们通过SQL查询到一个列表，使用foreach语法对集合进行遍历时，如果不判断集合内是否有元素，遍历会返回空指针异常。</li>
</ul>
<h2 id="对象是否为空的判断"><a href="#对象是否为空的判断" class="headerlink" title="对象是否为空的判断"></a>对象是否为空的判断</h2><p>当前有很多工具类可以对对象是否为空进行判断，如：</p>
<blockquote>
<p>ObjectUtil.isNull()   &#x2F;    ObjuctUtils.isNull()</p>
<p>ObjectUtil.isEmpty()  &#x2F;  ObjectUtils.isEmpty()</p>
<p>StringUtil.isNull()  &#x2F;  StringUtil.isEmpty()</p>
</blockquote>
<ul>
<li><h5 id="对于使用new实例化的类"><a href="#对于使用new实例化的类" class="headerlink" title="对于使用new实例化的类"></a>对于使用new实例化的类</h5><p>类在没有进行实例化时是空的，即isNull 和 isEmpty的判断结果会返回true。一旦对象进行了实例化，也就是使用了new操作创建了实例，对象就不再是空的了。</p>
<p>对于基本类型的包装类，如果实例化(new)后没有初始化(赋值)，则此时对象依旧是空的，isNull 和 isEmpty的判断结果都为true。</p>
<p>对于自己定义的类，实例化(new)之后就不再是空的了，此时isNull 和 isEmpty的判断结果都为false。</p>
</li>
<li><h5 id="对于通过赋值来实例化的类"><a href="#对于通过赋值来实例化的类" class="headerlink" title="对于通过赋值来实例化的类"></a>对于通过赋值来实例化的类</h5><ul>
<li><p>通过Mapper层方法查询得到的类：例如  object &#x3D; testMapper.getObject(fields)</p>
<p>如果查询结果为空，即没有查询到数据或者数据本身为null，此时object为空，使用isNull 和 isEmpty的判断结果都为空。</p>
<p>如果查询结果不为空，则isNull 和 isEmpty 的判断结果都为 false.</p>
</li>
<li><p>通过其他方式得到的类，如从json中解析得到的类，如果类本身不是null，则isNull 和 isEmpty的判断结果都为false。</p>
</li>
</ul>
</li>
</ul>
<h4 id="另一维度来看"><a href="#另一维度来看" class="headerlink" title="另一维度来看"></a>另一维度来看</h4><ul>
<li><h5 id="ObjectUtil-isNull-x2F-ObjectUtils-isNull"><a href="#ObjectUtil-isNull-x2F-ObjectUtils-isNull" class="headerlink" title="ObjectUtil.isNull  &#x2F;  ObjectUtils.isNull"></a>ObjectUtil.isNull  &#x2F;  ObjectUtils.isNull</h5><p>该方法用于判断类对象是否为空，注意一旦类进行了实例化，也就是给类对象分配了内存，该类就不再是空的了，除非类对象被实例化为null。</p>
</li>
<li><h5 id="ObjectUtil-isEmpty-x2F-ObjectUtils-isEmpty"><a href="#ObjectUtil-isEmpty-x2F-ObjectUtils-isEmpty" class="headerlink" title="ObjectUtil.isEmpty  &#x2F;  ObjectUtils.isEmpty"></a>ObjectUtil.isEmpty  &#x2F;  ObjectUtils.isEmpty</h5><p>该方法用于判断类对象中的值是否为空，当一个类只分配了内存而没有赋值的时候，isEmpty判断结果为true。</p>
</li>
<li><h5 id="StringUtils-isNull-x2F-StringUtils-isEmpty"><a href="#StringUtils-isNull-x2F-StringUtils-isEmpty" class="headerlink" title="StringUtils.isNull  &#x2F;  StringUtils.isEmpty"></a>StringUtils.isNull  &#x2F;  StringUtils.isEmpty</h5><p>StringUtils.isNull 用于判断对象是否为空，一般使用很少。</p>
<p>StringUtils.isEmpty 用于判断一个字符串是否为空字符串或者为null，<strong>注意在Spring5.3之后该方法被弃用</strong>。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>开发经验</category>
      </categories>
      <tags>
        <tag>开发经验</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/%E5%85%B6%E4%BB%96/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%AD%E6%B3%95%E8%A7%84%E5%88%99/</url>
    <content><![CDATA[<h1 id="正则表达式语法规则"><a href="#正则表达式语法规则" class="headerlink" title="正则表达式语法规则"></a>正则表达式语法规则</h1><ul>
<li><h2 id="普通字符"><a href="#普通字符" class="headerlink" title="普通字符"></a>普通字符</h2><p>普通字符包括没有显式指定为元字符的所有可打印和不可打印字符。这包括所有大写和小写字母、所有数字、所有标点符号和一些其他符号</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>[ABC]</td>
<td>匹配[…]中的所有字符，例如[abc]匹配字符串 “adsdfbdsc” 中的所有 a b c字母</td>
</tr>
<tr>
<td>[^ABC]</td>
<td>匹配除了[…]中字符的所有字符，例如[ ^abc]匹配字符串 “adsdfbdsc” 中除 a b c字母外的其他所有字母</td>
</tr>
<tr>
<td>[A-Z]</td>
<td>[A-Z] 表示一个区间，匹配所有大写字母，[a-z] 表示所有小写字母。</td>
</tr>
<tr>
<td>.</td>
<td>匹配除换行符（\n、\r）之外的任何单个字符，相等于 [ ^\n\r]。</td>
</tr>
<tr>
<td>[\s\S]</td>
<td>匹配所有。\s 是匹配所有空白符，包括换行，\S 非空白符，不包括换行。</td>
</tr>
<tr>
<td>\w</td>
<td>匹配字母、数字、下划线。等价于 [A-Za-z0-9_]</td>
</tr>
</tbody></table>
</li>
<li><h2 id="非打印字符"><a href="#非打印字符" class="headerlink" title="非打印字符"></a>非打印字符</h2><p>非打印字符也可以是正则表达式的组成部分。下表列出了表示非打印字符的转义序列：</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>\cx</td>
<td>匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td>
</tr>
<tr>
<td>\f</td>
<td>匹配一个换页符。等价于 \x0c 和 \cL。</td>
</tr>
<tr>
<td>\n</td>
<td>匹配一个换行符。等价于 \x0a 和 \cJ。</td>
</tr>
<tr>
<td>\r</td>
<td>匹配一个回车符。等价于 \x0d 和 \cM。</td>
</tr>
<tr>
<td>\s</td>
<td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。注意 Unicode 正则表达式会匹配全角空格符。</td>
</tr>
<tr>
<td>\S</td>
<td>匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td>
</tr>
<tr>
<td>\t</td>
<td>匹配一个制表符。等价于 \x09 和 \cI。</td>
</tr>
<tr>
<td>\v</td>
<td>匹配一个垂直制表符。等价于 \x0b 和 \cK。</td>
</tr>
</tbody></table>
</li>
<li><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><p>所谓特殊字符，就是一些有特殊含义的字符，如 *，简单的说就是表示任何字符串的意思。如果要查找字符串中的 * 符号，则需要对 * 进行转义，即在其前加一个 \，runo*ob 匹配字符串 <strong>runo*ob</strong>。</p>
<p>许多元字符要求在试图匹配它们时特别对待。若要匹配这些特殊字符，必须首先使字符”转义”，即，将反斜杠字符\ 放在它们前面。下表列出了正则表达式中的特殊字符：</p>
<table>
<thead>
<tr>
<th>特别字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>$</td>
<td>匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\n’ 或 ‘\r’。要匹配 $ 字符本身，请使用 $。</td>
</tr>
<tr>
<td>( )</td>
<td>标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 ( 和 )。</td>
</tr>
<tr>
<td>*</td>
<td>匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 \*。</td>
</tr>
<tr>
<td>+</td>
<td>匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 \+。</td>
</tr>
<tr>
<td>.</td>
<td>匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用\ . 。</td>
</tr>
<tr>
<td>[</td>
<td>标记一个中括号表达式的开始。要匹配 [，请使用 \[。</td>
</tr>
<tr>
<td>?</td>
<td>匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 ?。</td>
</tr>
<tr>
<td>\</td>
<td>将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。’\n’ 匹配换行符。序列 ‘\\‘ 匹配 “\“，而 ‘\(‘ 则匹配 “(“。</td>
</tr>
<tr>
<td>^</td>
<td>匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。要匹配 ^ 字符本身，请使用 ^。</td>
</tr>
<tr>
<td>{</td>
<td>标记限定符表达式的开始。要匹配 {，请使用 \{。</td>
</tr>
<tr>
<td>|</td>
<td>指明两项之间的一个选择。要匹配 |，请使用 \</td>
</tr>
</tbody></table>
</li>
<li><h2 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h2><p>限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有 * 或 + 或 ? 或 {n} 或 {n,} 或 {n,m} 共6种。</p>
<p>正则表达式的限定符有：</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>*</td>
<td>匹配前面的子表达式零次或多次。例如，zo* 能匹配 <strong>“z”</strong> 以及 **”zoo”*<em>。</em> 等价于 {0,}。</td>
</tr>
<tr>
<td>+</td>
<td>匹配前面的子表达式一次或多次。例如，zo+ 能匹配 <strong>“zo”</strong> 以及 “**zoo”**，但不能匹配 **”z”**。+ 等价于 {1,}。</td>
</tr>
<tr>
<td>?</td>
<td>匹配前面的子表达式零次或一次。例如，do(es)?  可以匹配 <strong>“do”</strong> 、 **”does”**、 <strong>“doxy”</strong> 中的 <strong>“do”</strong> 和 **”does”**。? 等价于 {0,1}。</td>
</tr>
<tr>
<td>{n}</td>
<td>n 是一个非负整数。匹配确定的 <strong>n</strong> 次。例如，o{2} 不能匹配 <strong>“Bob”</strong> 中的 <strong>o</strong>，但是能匹配 <strong>“food”</strong> 中的两个 <strong>o</strong>。</td>
</tr>
<tr>
<td>{n,}</td>
<td>n 是一个非负整数。至少匹配n 次。例如，o{2,} 不能匹配 <strong>“Bob”</strong> 中的 <strong>o</strong>，但能匹配 <strong>“foooood”</strong> 中的所有 <strong>o</strong>。o{1,} 等价于 o+。o{0,} 则等价于 o*。</td>
</tr>
<tr>
<td>{n,m}</td>
<td>m 和 n 均为非负整数，其中 n &lt;&#x3D; m。最少匹配 n 次且最多匹配 m 次。例如，o{1,3} 将匹配 <strong>“fooooood”</strong> 中的前三个 <strong>o</strong>。o{0,1} 等价于 o?。请注意在逗号和两个数之间不能有空格。</td>
</tr>
</tbody></table>
<p>*** 和 + 限定符都是贪婪的，因为它们会尽可能多的匹配文字，只要在它们的后面加上一个 ? 就可以实现非贪婪或最小匹配。**</p>
</li>
<li><h2 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h2><p>定位符使您能够将正则表达式固定到行首或行尾。它们还使您能够创建这样的正则表达式，这些正则表达式出现在一个单词内、在一个单词的开头或者一个单词的结尾。</p>
<p>定位符用来描述字符串或单词的边界，^ 和 $ 分别指字符串的开始与结束，\b 描述单词的前或后边界，\B 表示非单词边界。</p>
<p>正则表达式的定位符有：</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>^</td>
<td>匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \n 或 \r 之后的位置匹配。</td>
</tr>
<tr>
<td>$</td>
<td>匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \n 或 \r 之前的位置匹配。</td>
</tr>
<tr>
<td>\b</td>
<td>匹配一个单词边界，即字与空格间的位置。</td>
</tr>
<tr>
<td>\B</td>
<td>非单词边界匹配。</td>
</tr>
</tbody></table>
<p><strong>注意</strong>：不能将限定符与定位符一起使用。由于在紧靠换行或者单词边界的前面或后面不能有一个以上位置，因此不允许诸如 ^* 之类的表达式。</p>
</li>
<li><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><p>用圆括号 () 将所有选择项括起来，相邻的选择项之间用 | 分隔。</p>
<p>() 表示捕获分组，() 会把每个分组里的匹配的值保存起来， 多个匹配值可以通过数字 n 来查看(<strong>n</strong> 是一个数字，表示第 n 个捕获组的内容)。</p>
<p><img src="/%E5%85%B6%E4%BB%96/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%AD%E6%B3%95%E8%A7%84%E5%88%99/366574CC-3706-4B4C-8782-1BFF4CF57582.jpg" alt="img"></p>
<p><img src="/%E5%85%B6%E4%BB%96/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%AD%E6%B3%95%E8%A7%84%E5%88%99/82A7298A-2A94-49E3-AA27-A7778EE89711.jpg" alt="img"></p>
<p>但用圆括号会有一个副作用，使相关的匹配会被缓存，此时可用 ?: 放在第一个选项前来消除这种副作用。</p>
<p>其中 ?: 是非捕获元之一，还有两个非捕获元是 ?&#x3D; 和 ?!，这两个还有更多的含义，前者为正向预查，在任何开始匹配圆括号内的正则表达式模式的位置来匹配搜索字符串，后者为负向预查，在任何开始不匹配该正则表达式模式的位置来匹配搜索字符串。</p>
<p>以下列出 ?&#x3D;、?&lt;&#x3D;、?!、?&lt;! 的使用区别：</p>
<p>exp1(?&#x3D;exp2)：查找 exp2 前面的 exp1。</p>
<p><img src="/%E5%85%B6%E4%BB%96/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%AD%E6%B3%95%E8%A7%84%E5%88%99/reg-111.jpg" alt="img"></p>
<p>(?&lt;&#x3D;exp2)exp1：查找 exp2 后面的 exp1。</p>
<p><img src="/%E5%85%B6%E4%BB%96/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%AD%E6%B3%95%E8%A7%84%E5%88%99/reg-222.jpg" alt="img"></p>
<p>exp1(?!exp2)：查找后面不是 exp2 的 exp1。</p>
<p><img src="/%E5%85%B6%E4%BB%96/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%AD%E6%B3%95%E8%A7%84%E5%88%99/reg-333.jpg" alt="img"></p>
<p>(?&lt;!exp2)exp1：查找前面不是 exp2 的 exp1。</p>
<p><img src="/%E5%85%B6%E4%BB%96/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%AD%E6%B3%95%E8%A7%84%E5%88%99/reg-444.jpg" alt="img"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>Cron表达式</title>
    <url>/%E5%85%B6%E4%BB%96/Cron%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E8%A1%A8%E8%BE%BE%E5%BC%8F/Cron%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="Cron表达式"><a href="#Cron表达式" class="headerlink" title="Cron表达式"></a>Cron表达式</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Cron表达式是一个具有时间含义的字符串，字符串以5<del>6个空格隔开，分为6</del>7个域，格式为<code>X X X X X X X</code>。其中<code>X</code>是一个域的占位符。最后一个代表年份的域非必须，可省略。单个域有多个取值时，使用半角逗号<code>,</code>隔开取值。每个域可以是确定的取值，也可以是具有逻辑意义的特殊字符。每个域最多支持一个前导零。</p>
<h2 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h2><ul>
<li><p>当为7个域时：</p>
<p><code>Seconds Minutes Hours DayofMonth Month DayofWeek Year</code></p>
</li>
<li><p>当为6个域时：</p>
<p><code>Seconds Minutes Hours DayofMonth Month DayofWeek</code></p>
</li>
</ul>
<h2 id="域取值"><a href="#域取值" class="headerlink" title="域取值"></a>域取值</h2><p>下表为Cron表达式中六个域能够取的值以及支持的特殊字符。</p>
<table>
<thead>
<tr>
<th>域</th>
<th>是否必需</th>
<th>取值范围</th>
<th>特殊字符</th>
</tr>
</thead>
<tbody><tr>
<td>秒</td>
<td>是</td>
<td>[0, 59]</td>
<td>* , - &#x2F;</td>
</tr>
<tr>
<td>分钟</td>
<td>是</td>
<td>[0, 59]</td>
<td>* , - &#x2F;</td>
</tr>
<tr>
<td>小时</td>
<td>是</td>
<td>[0, 23]</td>
<td>* , - &#x2F;</td>
</tr>
<tr>
<td>日期</td>
<td>是</td>
<td>[1, 31]</td>
<td>* , - &#x2F; ? L W</td>
</tr>
<tr>
<td>月份</td>
<td>是</td>
<td>[1, 12]或[JAN, DEC]</td>
<td>* , - &#x2F;</td>
</tr>
<tr>
<td>星期</td>
<td>是</td>
<td>[1, 7]或[MON, SUN]。若您使用[1, 7]表达方式，<code>1</code>代表星期一，<code>7</code>代表星期日。</td>
<td>* , - &#x2F; ? L #</td>
</tr>
<tr>
<td>年</td>
<td>否</td>
<td>[当前年份，2099]</td>
<td>* , - &#x2F;</td>
</tr>
</tbody></table>
<h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><p>Cron表达式中的每个域都支持一定数量的特殊字符，每个特殊字符有其特殊含义。</p>
<table>
<thead>
<tr>
<th>特殊字符</th>
<th>含义</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>*</code></td>
<td>所有可能的值。</td>
<td>在月域中，<code>*</code>表示每个月；在星期域中，<code>*</code>表示星期的每一天。</td>
</tr>
<tr>
<td><code>,</code></td>
<td>列出枚举值。</td>
<td>在分钟域中，<code>5,20</code>表示分别在5分钟和20分钟触发一次。</td>
</tr>
<tr>
<td><code>-</code></td>
<td>范围。</td>
<td>在分钟域中，<code>5-20</code>表示从5分钟到20分钟之间每隔一分钟触发一次。</td>
</tr>
<tr>
<td><code>/</code></td>
<td>指定数值的增量。</td>
<td>在分钟域中，<code>0/15</code>表示从第0分钟开始，每15分钟。在分钟域中<code>3/20</code>表示从第3分钟开始，每20分钟。</td>
</tr>
<tr>
<td><code>?</code></td>
<td>不指定值，仅日期和星期域支持该字符。</td>
<td>当日期或星期域其中之一被指定了值以后，为了避免冲突，需要将另一个域的值设为<code>?</code>。</td>
</tr>
<tr>
<td><code>L</code></td>
<td>单词Last的首字母，表示最后一天，仅日期和星期域支持该字符。                                                                                                 <strong>说明</strong> 指定<code>L</code>字符时，避免指定列表或者范围，否则，会导致逻辑问题。</td>
<td>在日期域中，<code>L</code>表示某个月的最后一天。在星期域中，<code>L</code>表示一个星期的最后一天，也就是星期日（<code>SUN</code>）。                                                                  如果在<code>L</code>前有具体的内容，例如，在星期域中的<code>6L</code>表示这个月的最后一个星期六。</td>
</tr>
<tr>
<td><code>W</code></td>
<td>除周末以外的有效工作日，在离指定日期的最近的有效工作日触发事件。<code>W</code>字符寻找最近有效工作日时不会跨过当前月份，连用字符<code>LW</code>时表示为指定月份的最后一个工作日。</td>
<td>在日期域中<code>5W</code>，如果5日是星期六，则将在最近的工作日星期五，即4日触发。如果5日是星期天，则将在最近的工作日星期一，即6日触发；如果5日在星期一到星期五中的一天，则就在5日触发。</td>
</tr>
<tr>
<td><code>#</code></td>
<td>确定每个月第几个星期几，仅星期域支持该字符。</td>
<td>在星期域中，<code>4#2</code>表示某月的第二个星期四。</td>
</tr>
</tbody></table>
<h2 id="取值示例"><a href="#取值示例" class="headerlink" title="取值示例"></a>取值示例</h2><p>以下为Cron表达式的取值示例。</p>
<table>
<thead>
<tr>
<th>示例</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>0 15 10 ? * *</code></td>
<td>每天上午10:15执行任务</td>
</tr>
<tr>
<td><code>0 15 10 * * ?</code></td>
<td>每天上午10:15执行任务</td>
</tr>
<tr>
<td><code>0 0 12 * * ?</code></td>
<td>每天中午12:00执行任务</td>
</tr>
<tr>
<td><code>0 0 10,14,16 * * ?</code></td>
<td>每天上午10:00点、下午14:00以及下午16:00执行任务</td>
</tr>
<tr>
<td><code>0 0/30 9-17 * * ?</code></td>
<td>每天上午09:00到下午17:00时间段内每隔半小时执行任务</td>
</tr>
<tr>
<td><code>0 * 14 * * ?</code></td>
<td>每天下午14:00到下午14:59时间段内每隔1分钟执行任务</td>
</tr>
<tr>
<td><code>0 0-5 14 * * ?</code></td>
<td>每天下午14:00到下午14:05时间段内每隔1分钟执行任务</td>
</tr>
<tr>
<td><code>0 0/5 14 * * ?</code></td>
<td>每天下午14:00到下午14:55时间段内每隔5分钟执行任务</td>
</tr>
<tr>
<td><code>0 0/5 14,18 * * ?</code></td>
<td>每天下午14:00到下午14:55、下午18:00到下午18:55时间段内每隔5分钟执行任务</td>
</tr>
<tr>
<td><code>0 0 12 ? * WED</code></td>
<td>每个星期三中午12:00执行任务</td>
</tr>
<tr>
<td><code>0 15 10 15 * ?</code></td>
<td>每月15日上午10:15执行任务</td>
</tr>
<tr>
<td><code>0 15 10 L * ?</code></td>
<td>每月最后一日上午10:15执行任务</td>
</tr>
<tr>
<td><code>0 15 10 ? * 6L</code></td>
<td>每月最后一个星期六上午10:15执行任务</td>
</tr>
<tr>
<td><code>0 15 10 ? * 6#3</code></td>
<td>每月第三个星期六上午10:15执行任务</td>
</tr>
<tr>
<td><code>0 10,44 14 ? 3 WED</code></td>
<td>每年3月的每个星期三下午14:10和14:44执行任务</td>
</tr>
<tr>
<td><code>0 15 10 ? * * 2022</code></td>
<td>2022年每天上午10:15执行任务</td>
</tr>
<tr>
<td><code>0 15 10 ? * * *</code></td>
<td>每年每天上午10:15执行任务</td>
</tr>
<tr>
<td><code>0 0/5 14,18 * * ? 2022</code></td>
<td>2022年每天下午14:00到下午14:55、下午18:00到下午18:55时间段内每隔5分钟执行任务</td>
</tr>
<tr>
<td><code>0 15 10 ? * 6#3 2022,2023</code></td>
<td>2022年至2023年每月第三个星期六上午10:15执行任务</td>
</tr>
<tr>
<td><code>0 0/30 9-17 * * ? 2022-2025</code></td>
<td>2022年至2025年每天上午09:00到下午17:30时间段内每隔半小时执行任务</td>
</tr>
<tr>
<td><code>0 10,44 14 ? 3 WED 2022/2</code></td>
<td>从2022年开始，每隔两年3月的每个星期三下午14:10和14:44执行任务</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Cron表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA基本配置</title>
    <url>/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/IDEA/IDEA%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="IDEA基本配置"><a href="#IDEA基本配置" class="headerlink" title="IDEA基本配置"></a>IDEA基本配置</h3><h4 id="1-maven仓库配置-当前项目有效"><a href="#1-maven仓库配置-当前项目有效" class="headerlink" title="1. maven仓库配置(当前项目有效)"></a>1. maven仓库配置(当前项目有效)</h4><p>maven设置打开方式：</p>
<ul>
<li>settings→Build,Execution,Deployment→Build Tools→Maven</li>
<li>最右侧点击maven，然后点击设置图标，点击maven settings</li>
</ul>
<p>在maven设置中配置Maven home path，地址为maven的安装文件夹的位置，如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:/Maven/apache-maven-3.8.4</span><br></pre></td></tr></table></figure>

<p>配置maven的配置文件位置，地址为maven安装文件夹下的conf目录下的settings.xml文件，如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\Maven\apache-maven-3.8.4\conf\settings.xml</span><br></pre></td></tr></table></figure>

<p>本地的maven仓库地址需要自己指定目录，如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\Maven\MyRepository</span><br></pre></td></tr></table></figure>

<p><strong>如果想使之后的项目都沿用此配置，可以在File→New Projects Setup→Setting for new Projects中进行maven配置</strong></p>
<h4 id="2-文件的基本模板配置（可选，便利性选项）"><a href="#2-文件的基本模板配置（可选，便利性选项）" class="headerlink" title="2. 文件的基本模板配置（可选，便利性选项）"></a>2. 文件的基本模板配置（可选，便利性选项）</h4><p>文件的基本模板规定了文件的创建格式和创建后文件中的基本内容，除了idea自带的模板外，还可以对经常需要创建的文件类型建立模板。</p>
<p>配置位置在settings→Editor→File and Code Templates→Files,可以指定模板名称、模板内容以及模板类型（即文件的后缀名）等。</p>
<p>以下是一些模板，随时更新和增加：</p>
<p>Mybatis配置文件Mybatis.xml，模板内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>themeleaf.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ch&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="3-文件头设置"><a href="#3-文件头设置" class="headerlink" title="3. 文件头设置"></a>3. 文件头设置</h4><p>文件头即创建文件时自动添加的注释，用于标注代码的创建时间、作者等信息。</p>
<p>设置位置在settings→Editor→File and Code Templates→Includes→File Header</p>
<p>内容可以自定义，当前设置的内容为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> with IntelliJ IDEA</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Kaiyuan Zhang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateDate</span> $DATE</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span> $HOUR:$MINUTE</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>



<h4 id="4-共享进程堆大小设置（缓解项目build时idea卡死的问题）"><a href="#4-共享进程堆大小设置（缓解项目build时idea卡死的问题）" class="headerlink" title="4. 共享进程堆大小设置（缓解项目build时idea卡死的问题）"></a>4. 共享进程堆大小设置（缓解项目build时idea卡死的问题）</h4><p>如果要为当前项目设置：</p>
<ul>
<li>settings→Build,Execution,Deployment→Complier→Shared build process heap size</li>
</ul>
<p>如果要为以后新建的所有项目设置（推荐):</p>
<ul>
<li>File→New Projects Setup→Setting for new Projects→Build,Execution,Deployment→Complier→Shared build process heap size</li>
</ul>
]]></content>
      <categories>
        <category>开发工具</category>
        <category>IDEA</category>
      </categories>
      <tags>
        <tag>开发工具</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA常用快捷键汇总</title>
    <url>/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/IDEA/IDEA%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h1 id="IDEA常用快捷键汇总"><a href="#IDEA常用快捷键汇总" class="headerlink" title="IDEA常用快捷键汇总"></a>IDEA常用快捷键汇总</h1><ul>
<li>Alt + Enter  ：万能快捷键，可用于报错、创建对象等多种情况</li>
<li>Ctrl + O ：快速重写，在一个类继承了另一个类之后，可以使用此快捷键快速重写父类的方法</li>
<li>Ctrl + P ：查看参数，用于在方法的参数列表中查看方法有哪些参数</li>
<li>Alt + Insert ：快速生成set、get方法，以及构造器等，常用语实体类实现以上方法及重写toString‘方法的内容。</li>
<li>Ctrl+Alt+L：格式化代码，去掉无用代码</li>
<li>Ctrl+Alt+O：格式化导入文件包，去掉无用的import包</li>
</ul>
]]></content>
      <categories>
        <category>开发工具</category>
        <category>IDEA</category>
      </categories>
      <tags>
        <tag>开发工具</tag>
        <tag>快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>在Windows操作系统下安装MySQL</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h2><h3 id="1-下载安装"><a href="#1-下载安装" class="headerlink" title="1. 下载安装"></a>1. 下载安装</h3><ul>
<li>MySQL官网:<a href="https://www.mysql.com/cn/">mysql官网链接</a></li>
</ul>
<p>在官网中，可以在首页最下方选择需要下载的MySQL版本，通常情况下，下载的是社区版的MySQL：</p>
<ul>
<li>MySQL社区版：<a href="https://dev.mysql.com/downloads/mysql/">mysql communtiy downloads</a></li>
</ul>
<p>其中x64适用于64位系统，x86适用于32位系统。</p>
<p>下面教程以5.7版本的MySQL安装为例，下载好后，将压缩包解压到合适位置，比如我当前的解压路径为：<code>E:\MySQL\mysql-5.7.37-winx64</code>，在该目录下新建my.ini文件，文件内容模板如下：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="comment"># 设置3306端口</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"><span class="comment"># 设置mysql的安装目录   ----------是你的文件路径-------------</span></span><br><span class="line"><span class="attr">basedir</span>=E:\MySQL\mysql-<span class="number">5.7</span>.<span class="number">37</span>-winx64</span><br><span class="line"><span class="comment"># 设置mysql数据库的数据的存放目录  ---------是你的文件路径data文件夹自行创建</span></span><br><span class="line"><span class="attr">datadir</span>=E:\MySQL\mysql-<span class="number">5.7</span>.<span class="number">37</span>-winx64\data</span><br><span class="line"><span class="comment"># 允许最大连接数</span></span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">200</span></span><br><span class="line"><span class="comment"># 允许连接失败的次数。</span></span><br><span class="line"><span class="attr">max_connect_errors</span>=<span class="number">10</span></span><br><span class="line"><span class="comment"># 服务端使用的字符集默认为utf8mb4</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8mb4</span><br><span class="line"><span class="comment"># 创建新表时将使用的默认存储引擎</span></span><br><span class="line"><span class="attr">default-storage-engine</span>=INNODB</span><br><span class="line"><span class="comment"># 默认使用“mysql_native_password”插件认证</span></span><br><span class="line"><span class="comment">#mysql_native_password</span></span><br><span class="line"><span class="attr">default_authentication_plugin</span>=mysql_native_password</span><br><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="comment"># 设置mysql客户端默认字符集</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8mb4</span><br><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="comment"># 设置mysql客户端连接服务端时默认使用的端口</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8mb4</span><br></pre></td></tr></table></figure>

<p>文件中主要根据情况修改MySQL的安装目录路径basedir，以及MySQL的数据存放目录datadir。</p>
<h3 id="2-初始化数据库"><a href="#2-初始化数据库" class="headerlink" title="2. 初始化数据库"></a>2. 初始化数据库</h3><p>使用管理员身份打开命令提示符，进入mysql安装目录下的bin目录，如<code>E:\MySQL\mysql-5.7.37-winx64\bin</code> ,执行命令<code>mysqld  --initialize --console</code> ,进行目录的初始化，此时安装目录下会自动建立配置文件中设置的数据存放目录，同时，命令行中可以看到生成的随机初始化密码，此密码用于首次登录MySQL，需要记住。如果没记住的话，在刚刚生成的MySQL安装目录下的data目录下的以.err为后缀的文件中可以找到MySQL的随机初始密码。</p>
<h3 id="3-安装数据库"><a href="#3-安装数据库" class="headerlink" title="3. 安装数据库"></a>3. 安装数据库</h3><p>依然是在管理员权限下的MySQL目录的bin目录下，执行命令<code>mysqld  -install</code>，进行mysqld的安装。</p>
<h3 id="4-启动数据库"><a href="#4-启动数据库" class="headerlink" title="4. 启动数据库"></a>4. 启动数据库</h3><p>使用命令行的管理员权限，在MySQL安装目录的bin目录下，使用命令<code>net start mysql</code> 来启动MySQL数据库。</p>
<h3 id="5-登录MySQL数据库（注意，登录数据库后，所有命令最后要加分号’；‘）"><a href="#5-登录MySQL数据库（注意，登录数据库后，所有命令最后要加分号’；‘）" class="headerlink" title="5. 登录MySQL数据库（注意，登录数据库后，所有命令最后要加分号’；‘）"></a>5. 登录MySQL数据库（注意，登录数据库后，所有命令最后要加分号’；‘）</h3><ul>
<li><p>登录命令格式 <code>mysql -u 用户名 -p 密码</code></p>
<ul>
<li>一般因为使用了管理员权限，用户名为root，-p后面的密码可以不写，在执行此命令后需要继续输入密码</li>
</ul>
</li>
<li><p>如果是第一次登录：</p>
<ul>
<li><p>mysql5.6版本之后，在第一次初始化MySQL数据库的时候会生成随机生成的初始密码，该密码的获取可以参照上面第3条。</p>
</li>
<li><p><strong>修改密码</strong>：由于初始密码不方便记忆，第一次登录成功后需要设置自己熟悉的密码，修改密码方式与版本相关：</p>
<ul>
<li>5.7.6版本之前：<code>set password for &#39;用户名&#39;@&#39;localhost&#39; = password(&quot;新密码&quot;)</code></li>
<li>5.7.6版本之后：<code>alter user &#39;用户名&#39;@&#39;localhost&#39;identified with mysql_native_password by &#39;新密码&#39; </code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="6-配置系统环境变量"><a href="#6-配置系统环境变量" class="headerlink" title="6. 配置系统环境变量"></a>6. 配置系统环境变量</h3><p>在Windows中为MySQL配置系统环境变量，新增系统环境变量 <code>MYSQL_HOME</code>,变量值为msyqld 安装路径，例如我安装了5.7版本路径为<code>E:\MySQL\mysql-5.7.37-winx64</code> ,然后再系统环境变量中的path中添加路径：<code>%MYSQL_HOME%\bin</code></p>
<h3 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h3><ul>
<li>如果出现如“由于找不到msvcr120.dll，无法继续执行代码……”的问题，说明系统缺少vcredist ，此时需要在官网下载vcredist,arm架构系统选择arm版本，64位系统选择x64版本，32位系统选择x86版本，vcredist官网链接:<a href="https://www.microsoft.com/zh-CN/download/details.aspx?id=40784">vcredist官网</a>,下载安装后，运行该程序，点击修复按钮，修复完成即可正常安装MySQL</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>软件安装配置</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据检索</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E6%95%B0%E6%8D%AE%E6%A3%80%E7%B4%A2/</url>
    <content><![CDATA[<h1 id="MySQL数据检索"><a href="#MySQL数据检索" class="headerlink" title="MySQL数据检索"></a>MySQL数据检索</h1><h2 id="1-联表查询"><a href="#1-联表查询" class="headerlink" title="1. 联表查询"></a>1. 联表查询</h2><p>下面给出两个表，在此基础上介绍联表查询的知识：</p>
<p>​          user_name 表                                  user_age 表</p>
<p><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E6%95%B0%E6%8D%AE%E6%A3%80%E7%B4%A2/.%5CMySQL%E6%95%B0%E6%8D%AE%E6%A3%80%E7%B4%A2%5Cimage-20220602095148006.png" alt="image-20220602095148006">     <img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E6%95%B0%E6%8D%AE%E6%A3%80%E7%B4%A2/.%5CMySQL%E6%95%B0%E6%8D%AE%E6%A3%80%E7%B4%A2%5Cimage-20220602095233457.png" alt="image-20220602095233457"></p>
<ul>
<li><p>内连接：</p>
<blockquote>
<p>内连接只会输出两表关联条件匹配到的数据。<strong>相当于按条件获取两个表的交集。</strong></p>
</blockquote>
<ul>
<li><p>显式内连接</p>
<blockquote>
<p>显式内连接使用INNER JOIN 或 JOIN关键字，适用于两表及多表查询的情况</p>
</blockquote>
<p>如以下查询:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.`name`,b.age</span><br><span class="line"><span class="keyword">from</span> user_name a <span class="keyword">INNER</span> <span class="keyword">JOIN</span> user_age b</span><br><span class="line"><span class="keyword">ON</span> a.id <span class="operator">=</span> b.id</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<p>​				连接结果为：<img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E6%95%B0%E6%8D%AE%E6%A3%80%E7%B4%A2/.%5CMySQL%E6%95%B0%E6%8D%AE%E6%A3%80%E7%B4%A2%5Cimage-20220602100454645.png" alt="image-20220602100454645"></p>
<p>* </p>
<ul>
<li><p>隐式内连接（等值连接）</p>
<blockquote>
<p>隐式内连接不需要显示的写出连接关键字，在FROM条件中声明要连接的表，WHERE子句中说明连接的条件即可，隐式内连接在多表连接时容易出错，需要注意。</p>
</blockquote>
<p>如以下查询：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.`name`,b.age</span><br><span class="line"><span class="keyword">from</span> user_name a , user_age b</span><br><span class="line"><span class="keyword">where</span> a.id <span class="operator">=</span> b.id</span><br></pre></td></tr></table></figure>
</li>
<li><p>外连接：</p>
</li>
</ul>
<blockquote>
<p>外连接对于两表关联条件匹配不到的数据，也会输出并将关联不到的列显示为NULL。</p>
<p>外连接包括左连接&#x2F;左外连接、右连接&#x2F;右外连接、全连接。这里的左连接&#x2F;左外连接是同义的，右连接&#x2F;右外连接也是同义的。</p>
</blockquote>
<ul>
<li>左连接&#x2F;左外连接：</li>
</ul>
<blockquote>
<p>左连接将左表作为主表，主表的数据会全部显示处理，从表根据连接条件进行匹配，匹配不到的行展示为NULL</p>
</blockquote>
<p>如以下查询：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.`name`,b.age</span><br><span class="line"><span class="keyword">from</span> user_name a <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> user_age b</span><br><span class="line"><span class="keyword">ON</span> a.id <span class="operator">=</span> b.id</span><br></pre></td></tr></table></figure>

<p>连接结果为：<img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E6%95%B0%E6%8D%AE%E6%A3%80%E7%B4%A2/.%5CMySQL%E6%95%B0%E6%8D%AE%E6%A3%80%E7%B4%A2%5Cimage-20220602101210493.png" alt="image-20220602101210493"></p>
<ul>
<li>右连接&#x2F;右外连接：</li>
</ul>
<blockquote>
<p>右连接将右表作为主表，主表的数据会全部显示处理，从表根据连接条件进行匹配，匹配不到的行展示为NULL</p>
</blockquote>
<p>如以下查询：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.`name`,b.age</span><br><span class="line"><span class="keyword">from</span> user_name a <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> user_age b</span><br><span class="line"><span class="keyword">ON</span> a.id <span class="operator">=</span> b.id</span><br></pre></td></tr></table></figure>

<p>连接结果为：<img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E6%95%B0%E6%8D%AE%E6%A3%80%E7%B4%A2/.%5CMySQL%E6%95%B0%E6%8D%AE%E6%A3%80%E7%B4%A2%5Cimage-20220602101953139.png" alt="image-20220602101953139"></p>
<ul>
<li>全连接：</li>
</ul>
<blockquote>
<p>全连接是将两张表的所有行按连接做匹配，匹配缺失之处使用NULL填充。<strong>相当于按条件获取两个表的并集。</strong></p>
<p><strong>注意：MySQL不支FULL JOIN的语法，MySQL实现全连接的方式是将左连接和右连接的结果做联合，注意连接条件应该一致</strong></p>
</blockquote>
<p>如以下查询：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.`name`,b.age <span class="keyword">from</span> user_name a <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> user_age b <span class="keyword">ON</span> a.id <span class="operator">=</span> b.id</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">select</span> a.`name`,b.age <span class="keyword">from</span> user_name a <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> user_age b <span class="keyword">ON</span> a.id <span class="operator">=</span> b.id</span><br></pre></td></tr></table></figure>

<p>连接结果为：<img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E6%95%B0%E6%8D%AE%E6%A3%80%E7%B4%A2/.%5CMySQL%E6%95%B0%E6%8D%AE%E6%A3%80%E7%B4%A2%5Cimage-20220602103440328.png" alt="image-20220602103440328"></p>
<ul>
<li><strong>注意点：</strong></li>
</ul>
<p>注意，表连接时会产生一个暂时表，对于暂时表的过滤应该使用 ON 关键字而非 WHERE 关键字，暂时表完成过滤后会产生连接的结果，此时可以使用WHERE 子句对连接结果进行过滤。</p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL语法</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="MySQL语法"><a href="#MySQL语法" class="headerlink" title="MySQL语法"></a>MySQL语法</h1><h2 id="一、创建数据库"><a href="#一、创建数据库" class="headerlink" title="一、创建数据库"></a>一、创建数据库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE `数据库名`</span><br></pre></td></tr></table></figure>



<h2 id="二、删除数据库"><a href="#二、删除数据库" class="headerlink" title="二、删除数据库"></a>二、删除数据库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP DATABASE `数据库名`</span><br></pre></td></tr></table></figure>

<h2 id="三、选择数据库"><a href="#三、选择数据库" class="headerlink" title="三、选择数据库"></a>三、选择数据库</h2><p>在命令行中，使用以下命令选择数据库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use 数据库名</span><br></pre></td></tr></table></figure>



<h2 id="四、数据类型"><a href="#四、数据类型" class="headerlink" title="四、数据类型"></a>四、数据类型</h2><ul>
<li><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><p><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/Users\59737\AppData\Roaming\Typora\typora-user-images\image-20220111111721111.png" alt="image-20220111111721111"></p>
</li>
<li><h3 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h3></li>
</ul>
<p><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/Users\59737\AppData\Roaming\Typora\typora-user-images\image-20220111111827606.png" alt="image-20220111111827606"></p>
<ul>
<li><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3></li>
</ul>
<p><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/Users\59737\AppData\Roaming\Typora\typora-user-images\image-20220111111925757.png" alt="image-20220111111925757"></p>
<h2 id="五、创建数据表"><a href="#五、创建数据表" class="headerlink" title="五、创建数据表"></a>五、创建数据表</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE table_name(column_name column_type);</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS `runoob_tbl`(</span><br><span class="line">   `runoob_id` INT UNSIGNED AUTO_INCREMENT,</span><br><span class="line">   `runoob_title` VARCHAR(100) NOT NULL,</span><br><span class="line">   `runoob_author` VARCHAR(40) NOT NULL,</span><br><span class="line">   `submission_date` DATE,</span><br><span class="line">   PRIMARY KEY ( `runoob_id` )</span><br><span class="line">)ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure>

<p>例子解析：</p>
<ul>
<li><p>如果你不想字段为 <strong>NULL</strong> 可以设置字段的属性为 <strong>NOT NULL</strong>， 在操作数据库时如果输入该字段的数据为<strong>NULL</strong> ，就会报错。</p>
</li>
<li><p>AUTO_INCREMENT定义列为自增的属性，一般用于主键，数值会自动加1。</p>
</li>
<li><p>PRIMARY KEY关键字用于定义列为主键。 您可以使用多列来定义主键，列间以逗号分隔。</p>
</li>
<li><p>ENGINE 设置存储引擎，CHARSET 设置编码。</p>
</li>
</ul>
<h3 id="通过命令行创建表"><a href="#通过命令行创建表" class="headerlink" title="通过命令行创建表"></a>通过命令行创建表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE table_name;</span><br></pre></td></tr></table></figure>



<h2 id="六、删除数据表"><a href="#六、删除数据表" class="headerlink" title="六、删除数据表"></a>六、删除数据表</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP TABLE table_name;</span><br></pre></td></tr></table></figure>

<h3 id="在命令行中删除表"><a href="#在命令行中删除表" class="headerlink" title="在命令行中删除表"></a>在命令行中删除表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP TABLE table_name;</span><br></pre></td></tr></table></figure>



<h2 id="七、插入数据"><a href="#七、插入数据" class="headerlink" title="七、插入数据"></a>七、插入数据</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO table_name ( field1, field2,...fieldN )</span><br><span class="line">                       VALUES</span><br><span class="line">                       ( value1, value2,...valueN );</span><br></pre></td></tr></table></figure>

<p>如果数据是字符型，必须使用单引号或者双引号，如：”value”。</p>
<p>当需要插入多条数据时，可以再values后多跟几个括号，用逗号隔开，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO table_name ( field1, field2,...fieldN )</span><br><span class="line">                      VALUES</span><br><span class="line">                     ( value1, value2,...valueN ),( value1, value2,...valueN ),( value1, value2,...valueN );</span><br></pre></td></tr></table></figure>

<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>插入数据时，列名可以加反单引号，也可以不加；对于要插入的字符类型的值，要加单引号而不是反单引号。</p>
<p>在命令行中插入数据的语法同上。</p>
<h2 id="八、查询数据"><a href="#八、查询数据" class="headerlink" title="八、查询数据"></a>八、查询数据</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT column_name,column_name</span><br><span class="line">FROM table_name</span><br><span class="line">[WHERE Clause]</span><br><span class="line">[LIMIT N][ OFFSET M]</span><br></pre></td></tr></table></figure>

<ul>
<li>查询语句中你可以使用一个或者多个表，表之间使用逗号(,)分割，并使用WHERE语句来设定查询条件。</li>
<li>SELECT 命令可以读取一条或者多条记录。</li>
<li>你可以使用星号（*）来代替其他字段，SELECT语句会返回表的所有字段数据</li>
<li>你可以使用 WHERE 语句来包含任何条件。</li>
<li>你可以使用 LIMIT 属性来设定返回的记录数。</li>
<li>你可以通过OFFSET指定SELECT语句开始查询的数据偏移量。默认情况下偏移量为0。</li>
</ul>
<h4 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h4><p>查询中涉及到字符串时要使用单引号或双引号包括，表名可以使用反单引号，也可以直接写出。</p>
<p>命令行模式下查询数据的语法同上。</p>
<h2 id="九、WHERE-字句"><a href="#九、WHERE-字句" class="headerlink" title="九、WHERE 字句"></a>九、WHERE 字句</h2><p>where字句用于在查询数据时有条件地筛选数据。</p>
<p>语法格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT field1, field2,...fieldN FROM table_name1, table_name2...</span><br><span class="line">[WHERE condition1 [AND [OR]] condition2.....</span><br></pre></td></tr></table></figure>

<ul>
<li>查询语句中你可以使用一个或者多个表，表之间使用逗号, 分割，并使用WHERE语句来设定查询条件。</li>
<li>你可以在 WHERE 子句中指定任何条件。</li>
<li>你可以使用 AND 或者 OR 指定一个或多个条件。</li>
<li>WHERE 子句也可以运用于 SQL 的 DELETE 或者 UPDATE 命令。</li>
<li>WHERE 子句类似于程序语言中的 if 条件，根据 MySQL 表中的字段值来读取指定的数据。</li>
</ul>
<p>一下为操作符列表，可用于WHERE字句中。</p>
<p>下表中实例假定A为10，B为20</p>
<p><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/Users\59737\AppData\Roaming\Typora\typora-user-images\image-20220111133500917.png" alt="image-20220111133500917"></p>
<p>命令行模式下WHERE子句的用法同上。</p>
<h2 id="十、修改-x2F-更新数据"><a href="#十、修改-x2F-更新数据" class="headerlink" title="十、修改&#x2F;更新数据"></a>十、修改&#x2F;更新数据</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE table_name SET field1=new-value1, field2=new-value2</span><br><span class="line">[WHERE Clause]</span><br></pre></td></tr></table></figure>

<ul>
<li>你可以同时更新一个或多个字段。</li>
<li>你可以在 WHERE 子句中指定任何条件。</li>
<li>你可以在一个单独表中同时更新数据。</li>
</ul>
<p>当你需要更新数据表中指定行的数据时 WHERE 子句是非常有用的。</p>
<h2 id="十一、删除表中的数据"><a href="#十一、删除表中的数据" class="headerlink" title="十一、删除表中的数据"></a>十一、删除表中的数据</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE FROM table_name [WHERE Clause]</span><br></pre></td></tr></table></figure>

<ul>
<li>如果没有指定 WHERE 子句，MySQL 表中的所有记录将被删除。</li>
<li>你可以在 WHERE 子句中指定任何条件</li>
<li>您可以在单个表中一次性删除记录。</li>
</ul>
<p>当你想删除数据表中指定的记录时 WHERE 子句是非常有用的。</p>
<p>在命令行中删除表中的记录的方法同上。</p>
<h2 id="十二、LIKE-子句"><a href="#十二、LIKE-子句" class="headerlink" title="十二、LIKE 子句"></a>十二、LIKE 子句</h2><p>LIKE 子句常与WHERE子句一起使用，用来表示含有某些字符的关键字看，可以用百分号%来表示任意字符，如果没有使用百分号%，LIKE子句与等号&#x3D;的效果是一样的。</p>
<p>语法格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT field1, field2,...fieldN </span><br><span class="line">FROM table_name</span><br><span class="line">WHERE field1 LIKE condition1 [AND [OR]] filed2 = &#x27;somevalue&#x27;</span><br></pre></td></tr></table></figure>

<p>在命令行模式下LIKE子句的语法格式同上。</p>
<h2 id="十三、UNION操作符-（连接两个select语句的结果）"><a href="#十三、UNION操作符-（连接两个select语句的结果）" class="headerlink" title="十三、UNION操作符  （连接两个select语句的结果）"></a>十三、UNION操作符  （连接两个select语句的结果）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT expression1, expression2, ... expression_n</span><br><span class="line">FROM tables</span><br><span class="line">[WHERE conditions]</span><br><span class="line">UNION [ALL | DISTINCT]</span><br><span class="line">SELECT expression1, expression2, ... expression_n</span><br><span class="line">FROM tables</span><br><span class="line">[WHERE conditions];</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>expression1, expression2, … expression_n</strong>: 要检索的列。</li>
<li><strong>tables:</strong> 要检索的数据表。</li>
<li><strong>WHERE conditions:</strong> 可选， 检索条件。</li>
<li><strong>DISTINCT:</strong> 可选，删除结果集中重复的数据。默认情况下 UNION 操作符已经删除了重复数据，所以 DISTINCT 修饰符对结果没啥影响。</li>
<li><strong>ALL:</strong> 可选，返回所有结果集，包含重复数据。</li>
</ul>
<h2 id="十四、排序"><a href="#十四、排序" class="headerlink" title="十四、排序"></a>十四、排序</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT field1, field2,...fieldN FROM table_name1, table_name2...</span><br><span class="line">ORDER BY field1 [ASC [DESC][默认 ASC]], [field2...] [ASC [DESC][默认 ASC]]</span><br></pre></td></tr></table></figure>

<ul>
<li>你可以使用任何字段来作为排序的条件，从而返回排序后的查询结果。</li>
<li>你可以设定多个字段来排序。</li>
<li>你可以使用 ASC 或 DESC 关键字来设置查询结果是按升序或降序排列。 默认情况下，它是按升序排列。</li>
<li>你可以添加 WHERE…LIKE 子句来设置条件。</li>
</ul>
<p>在命令行模式下排序的语法格式同上。</p>
<h2 id="十五、分组"><a href="#十五、分组" class="headerlink" title="十五、分组"></a>十五、分组</h2><p>SQL中分组使用<strong>GROUP BY</strong>语句，根据一个或多个列对结果集进行分组。在分组的列上我们可以使用COUNT,SUM,AVG等函数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT column_name, function(column_name)</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE column_name operator value</span><br><span class="line">GROUP BY column_name;</span><br></pre></td></tr></table></figure>

<p><strong>WITH ROLLUP</strong> 可以实现在分组统计数据基础上再进行相同的统计（SUM,AVG,COUNT…）。</p>
<h4 id="理解和注意点："><a href="#理解和注意点：" class="headerlink" title="理解和注意点："></a>理解和注意点：</h4><p><strong>SELECT 的列必须是用于分组的列的一个或多个，不能包括其他列。</strong>理解如下：</p>
<p>要对某个表按某一列或者某几列进行分组，可以理解为除了这几列外，其余的列都放在了统一单元格里，例如：</p>
<p>原始表：</p>
<table>
<thead>
<tr>
<th>name</th>
<th>id</th>
<th>num</th>
</tr>
</thead>
<tbody><tr>
<td>a</td>
<td>1</td>
<td>12</td>
</tr>
<tr>
<td>b</td>
<td>2</td>
<td>12</td>
</tr>
<tr>
<td>c</td>
<td>3</td>
<td>13</td>
</tr>
</tbody></table>
<p>假设我们按照num列进行分组，即group by num，则得到：</p>
<table>
<thead>
<tr>
<th>name</th>
<th>id</th>
<th>num</th>
</tr>
</thead>
<tbody><tr>
<td>a   b</td>
<td>1  2</td>
<td>12</td>
</tr>
<tr>
<td>c</td>
<td>3</td>
<td>13</td>
</tr>
</tbody></table>
<p>可以看到，其余列因为分组已经写到了一起，所以select时只能选择分组的列，而不能包含其余列。</p>
<h2 id="十六、表链接"><a href="#十六、表链接" class="headerlink" title="十六、表链接"></a>十六、表链接</h2><p>可以在SELECT，UPDATE和DELETE语句中使用JOIN来联合多表查询。</p>
<p>JOIN 按照功能大致分为如下三类：</p>
<ul>
<li><strong>INNER JOIN（内连接,或等值连接）</strong>：获取两个表中字段匹配关系的记录。</li>
<li><strong>LEFT JOIN（左连接）：</strong>获取左表所有记录，即使右表没有对应匹配的记录。</li>
<li><strong>RIGHT JOIN（右连接）：</strong> 与 LEFT JOIN 相反，用于获取右表所有记录，即使左表没有对应匹配的记录。</li>
</ul>
<h2 id="十七、NULL值处理"><a href="#十七、NULL值处理" class="headerlink" title="十七、NULL值处理"></a>十七、NULL值处理</h2><p>处理NULL值的三大运算符：</p>
<ul>
<li><strong>IS NULL:</strong> 当列的值是 NULL,此运算符返回 true。</li>
<li><strong>IS NOT NULL:</strong> 当列的值不为 NULL, 运算符返回 true。</li>
<li><strong>&lt;&#x3D;&gt;:</strong> 比较操作符（不同于 &#x3D; 运算符），当比较的的两个值相等或者都为 NULL 时返回 true。</li>
</ul>
<h2 id="十八、MySQL正则表达式"><a href="#十八、MySQL正则表达式" class="headerlink" title="十八、MySQL正则表达式"></a>十八、MySQL正则表达式</h2><p>MySQL中使用<strong>REGEXP</strong>操作符来进行正则表达式匹配</p>
<p>正则表达式如下：</p>
<p><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/Users\59737\AppData\Roaming\Typora\typora-user-images\image-20220111140640057.png" alt="image-20220111140640057"></p>
<p>实例：<br>查找name字段中以‘st’开头的所有数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT name FROM person_tbl WHERE name REGEXP &#x27;^st&#x27;;</span><br></pre></td></tr></table></figure>



<h2 id="十九、MySQL事务"><a href="#十九、MySQL事务" class="headerlink" title="十九、MySQL事务"></a>十九、MySQL事务</h2><p>MySQL 事务主要用于处理操作量大，复杂度高的数据。比如说，在人员管理系统中，你删除一个人员，你既需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据库操作语句就构成一个事务！</p>
<ul>
<li>在 MySQL 中只有使用了 Innodb 数据库引擎的数据库或表才支持事务。</li>
<li>事务处理可以用来维护数据库的完整性，保证成批的 SQL 语句要么全部执行，要么全部不执行。</li>
<li>事务用来管理 insert,update,delete 语句</li>
</ul>
<p>一般来说，事务是必须满足4个条件（ACID）：：原子性（<strong>A</strong>tomicity，或称不可分割性）、一致性（<strong>C</strong>onsistency）、隔离性（<strong>I</strong>solation，又称独立性）、持久性（<strong>D</strong>urability）。</p>
<ul>
<li><strong>原子性：</strong>一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</li>
<li><strong>一致性：</strong>在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</li>
<li><strong>隔离性：</strong>数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable  read）和串行化（Serializable）。</li>
<li><strong>持久性：</strong>事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</li>
</ul>
<blockquote>
<p>在 MySQL 命令行的默认设置下，事务都是自动提交的，即执行 SQL 语句后就会马上执行 COMMIT  操作。因此要显式地开启一个事务务须使用命令 BEGIN 或 START TRANSACTION，或者执行命令 SET  AUTOCOMMIT&#x3D;0，用来禁止使用当前会话的自动提交。</p>
</blockquote>
<h3 id="事务控制语句："><a href="#事务控制语句：" class="headerlink" title="事务控制语句："></a>事务控制语句：</h3><ul>
<li>BEGIN 或 START TRANSACTION 显式地开启一个事务；</li>
<li>COMMIT 也可以使用 COMMIT WORK，不过二者是等价的。COMMIT 会提交事务，并使已对数据库进行的所有修改成为永久性的；</li>
<li>ROLLBACK 也可以使用 ROLLBACK WORK，不过二者是等价的。回滚会结束用户的事务，并撤销正在进行的所有未提交的修改；</li>
<li>SAVEPOINT identifier，SAVEPOINT 允许在事务中创建一个保存点，一个事务中可以有多个 SAVEPOINT；</li>
<li>RELEASE SAVEPOINT identifier 删除一个事务的保存点，当没有指定的保存点时，执行该语句会抛出一个异常；</li>
<li>ROLLBACK TO identifier 把事务回滚到标记点；</li>
<li>SET TRANSACTION 用来设置事务的隔离级别。InnoDB 存储引擎提供事务的隔离级别有READ UNCOMMITTED、READ COMMITTED、REPEATABLE READ 和 SERIALIZABLE。</li>
</ul>
<h3 id="MYSQL-事务处理主要有两种方法："><a href="#MYSQL-事务处理主要有两种方法：" class="headerlink" title="MYSQL 事务处理主要有两种方法："></a>MYSQL 事务处理主要有两种方法：</h3><p>1、用 BEGIN, ROLLBACK, COMMIT来实现</p>
<ul>
<li><strong>BEGIN</strong> 开始一个事务</li>
<li><strong>ROLLBACK</strong> 事务回滚</li>
<li><strong>COMMIT</strong>  事务确认</li>
</ul>
<p>2、直接用 SET 来改变 MySQL 的自动提交模式: </p>
<ul>
<li><strong>SET AUTOCOMMIT&#x3D;0</strong>   禁止自动提交</li>
<li><strong>SET AUTOCOMMIT&#x3D;1</strong> 开启自动提交</li>
</ul>
<h2 id="二十、ALTER命令"><a href="#二十、ALTER命令" class="headerlink" title="二十、ALTER命令"></a>二十、ALTER命令</h2><p>当我们需要修改数据表名或者修改数据表字段时，就需要使用到MySQL ALTER命令。</p>
<h3 id="删除、添加或修改表字段"><a href="#删除、添加或修改表字段" class="headerlink" title="删除、添加或修改表字段"></a>删除、添加或修改表字段</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl  DROP i;</span><br></pre></td></tr></table></figure>

<p>如果数据表中只剩余一个字段则无法使用DROP来删除字段。</p>
<p>MySQL 中使用  ADD 子句来向数据表中添加列，如下实例在表 testalter_tbl 中添加 i 字段，并定义数据类型:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl ADD i INT;</span><br></pre></td></tr></table></figure>

<p>执行以上命令后，i 字段会自动添加到数据表字段的末尾。</p>
<p>如果你需要指定新增字段的位置，可以使用MySQL提供的关键字 FIRST (设定位第一列)， AFTER 字段名（设定位于某个字段之后）。FIRST 和 AFTER 关键字可用于 ADD 与 MODIFY  子句，所以如果你想重置数据表字段的位置就需要先使用 DROP 删除字段然后使用 ADD 来添加字段并设置位置。如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE testalter_tbl DROP i;</span><br><span class="line">ALTER TABLE testalter_tbl ADD i INT FIRST;</span><br><span class="line">ALTER TABLE testalter_tbl DROP i;</span><br><span class="line">ALTER TABLE testalter_tbl ADD i INT AFTER c;</span><br></pre></td></tr></table></figure>

<h3 id="修改字段类型和名称"><a href="#修改字段类型和名称" class="headerlink" title="修改字段类型和名称"></a>修改字段类型和名称</h3><p>如果需要修改字段类型及名称, 你可以在ALTER命令中使用 MODIFY 或 CHANGE 子句 。</p>
<p>例如，把字段 c 的类型从 CHAR(1) 改为 CHAR(10)，可以执行以下命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE testalter_tbl MODIFY c CHAR(10);</span><br></pre></td></tr></table></figure>

<p>使用 CHANGE 子句, 语法有很大的不同。 在 CHANGE 关键字之后，紧跟着的是你要修改的字段名，然后指定新字段名及类型。尝试如下实例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE testalter_tbl CHANGE i j BIGINT;</span><br><span class="line">ALTER TABLE testalter_tbl CHANGE j j INT;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="ALTER-TABLE-对-Null-值和默认值的影响"><a href="#ALTER-TABLE-对-Null-值和默认值的影响" class="headerlink" title="ALTER TABLE 对 Null 值和默认值的影响"></a>ALTER TABLE 对 Null 值和默认值的影响</h3><p>当你修改字段时，你可以指定是否包含值或者是否设置默认值。</p>
<p>以下实例，指定字段 j 为 NOT NULL 且默认值为100 。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl </span><br><span class="line">    -&gt; MODIFY j BIGINT NOT NULL DEFAULT 100;</span><br></pre></td></tr></table></figure>

<p>如果你不设置默认值，MySQL会自动设置该字段默认为 NULL。</p>
<h3 id="修改字段默认值"><a href="#修改字段默认值" class="headerlink" title="修改字段默认值"></a>修改字段默认值</h3><p>你可以使用 ALTER 来修改字段的默认值，尝试以下实例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE testalter_tbl ALTER i SET DEFAULT 1000;</span><br></pre></td></tr></table></figure>

<h3 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h3><p>如果需要修改数据表的名称，可以在  ALTER TABLE 语句中使用 RENAME 子句来实现。</p>
<p>尝试以下实例将数据表 testalter_tbl 重命名为 alter_tbl：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE testalter_tbl RENAME TO alter_tbl;</span><br></pre></td></tr></table></figure>

<h3 id="修改存储引擎"><a href="#修改存储引擎" class="headerlink" title="修改存储引擎"></a>修改存储引擎</h3><p>修改为myisam</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table tableName engine=myisam;</span><br></pre></td></tr></table></figure>

<h3 id="删除外键约束"><a href="#删除外键约束" class="headerlink" title="删除外键约束"></a>删除外键约束</h3><p>keyName是外键别名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table tableName drop foreign key keyName</span><br></pre></td></tr></table></figure>



<h2 id="二十一、索引"><a href="#二十一、索引" class="headerlink" title="二十一、索引"></a>二十一、索引</h2><h3 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h3><h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><p>这是最基本的索引，没有任何限制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE INDEX indexName ON table_name (column_name)</span><br></pre></td></tr></table></figure>

<p>如果是CHAR，VARCHAR类型，length可以小于字段实际长度；如果是BLOB和TEXT类型，必须指定 length。</p>
<h4 id="修改表结构-添加索引"><a href="#修改表结构-添加索引" class="headerlink" title="修改表结构(添加索引)"></a>修改表结构(添加索引)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER table tableName ADD INDEX indexName(columnName)</span><br></pre></td></tr></table></figure>

<h4 id="创建表的时候直接指定"><a href="#创建表的时候直接指定" class="headerlink" title="创建表的时候直接指定"></a>创建表的时候直接指定</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE mytable(  </span><br><span class="line"> </span><br><span class="line">ID INT NOT NULL,   </span><br><span class="line"> </span><br><span class="line">username VARCHAR(16) NOT NULL,  </span><br><span class="line"> </span><br><span class="line">INDEX [indexName] (username(length))  </span><br><span class="line"> </span><br><span class="line">);  </span><br></pre></td></tr></table></figure>

<h4 id="删除索引的语法"><a href="#删除索引的语法" class="headerlink" title="删除索引的语法"></a>删除索引的语法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP INDEX [indexName] ON mytable; </span><br></pre></td></tr></table></figure>

<hr>
<h3 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h3><p>它与前面的普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。它有以下几种创建方式：</p>
<h4 id="创建索引-1"><a href="#创建索引-1" class="headerlink" title="创建索引"></a>创建索引</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE UNIQUE INDEX indexName ON mytable(username(length)) </span><br></pre></td></tr></table></figure>

<h4 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER table mytable ADD UNIQUE [indexName] (username(length))</span><br></pre></td></tr></table></figure>

<h4 id="创建表的时候直接指定-1"><a href="#创建表的时候直接指定-1" class="headerlink" title="创建表的时候直接指定"></a>创建表的时候直接指定</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE mytable(  </span><br><span class="line"> </span><br><span class="line">ID INT NOT NULL,   </span><br><span class="line"> </span><br><span class="line">username VARCHAR(16) NOT NULL,  </span><br><span class="line"> </span><br><span class="line">UNIQUE [indexName] (username(length))  </span><br><span class="line"> </span><br><span class="line">);  </span><br></pre></td></tr></table></figure>

<hr>
<h3 id="使用ALTER-命令添加和删除索引"><a href="#使用ALTER-命令添加和删除索引" class="headerlink" title="使用ALTER 命令添加和删除索引"></a>使用ALTER 命令添加和删除索引</h3><p>有四种方式来添加数据表的索引：</p>
<ul>
<li>**ALTER TABLE tbl_name ADD PRIMARY KEY (column_list):**该语句添加一个主键，这意味着索引值必须是唯一的，且不能为NULL。</li>
<li><strong>ALTER TABLE tbl_name ADD UNIQUE index_name (column_list):</strong> 这条语句创建索引的值必须是唯一的（除了NULL外，NULL可能会出现多次）。</li>
<li><strong>ALTER TABLE tbl_name ADD INDEX index_name (column_list):</strong> 添加普通索引，索引值可出现多次。</li>
<li>**ALTER TABLE tbl_name ADD FULLTEXT index_name (column_list):**该语句指定了索引为  FULLTEXT ，用于全文索引。</li>
</ul>
<p>以下实例为在表中添加索引。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl ADD INDEX (c);</span><br></pre></td></tr></table></figure>

<p>你还可以在 ALTER 命令中使用 DROP 子句来删除索引。尝试以下实例删除索引:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl DROP INDEX c;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="使用-ALTER-命令添加和删除主键"><a href="#使用-ALTER-命令添加和删除主键" class="headerlink" title="使用 ALTER  命令添加和删除主键"></a>使用 ALTER  命令添加和删除主键</h3><p>主键作用于列上（可以一个列或多个列联合主键），添加主键索引时，你需要确保该主键默认不为空（NOT NULL）。实例如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl MODIFY i INT NOT NULL;</span><br><span class="line">mysql&gt; ALTER TABLE testalter_tbl ADD PRIMARY KEY (i);</span><br></pre></td></tr></table></figure>

<p>你也可以使用 ALTER 命令删除主键：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl DROP PRIMARY KEY;</span><br></pre></td></tr></table></figure>

<p>删除主键时只需指定PRIMARY KEY，但在删除索引时，你必须知道索引名。</p>
<hr>
<h3 id="显示索引信息"><a href="#显示索引信息" class="headerlink" title="显示索引信息"></a>显示索引信息</h3><p>你可以使用 SHOW INDEX 命令来列出表中的相关的索引信息。可以通过添加 \G 来格式化输出信息。</p>
<p>尝试以下实例:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW INDEX FROM table_name\G</span><br><span class="line">........</span><br></pre></td></tr></table></figure>



<h2 id="二十二、临时表"><a href="#二十二、临时表" class="headerlink" title="二十二、临时表"></a>二十二、临时表</h2><p>MySQL 临时表在我们需要保存一些临时数据时是非常有用的。临时表只在当前连接可见，当关闭连接时，Mysql会自动删除表并释放所有空间。</p>
<p>临时表在MySQL 3.23版本中添加，如果你的MySQL版本低于 3.23版本就无法使用MySQL的临时表。不过现在一般很少有再使用这么低版本的MySQL数据库服务了。</p>
<p>MySQL临时表只在当前连接可见，如果你使用PHP脚本来创建MySQL临时表，那每当PHP脚本执行完成后，该临时表也会自动销毁。</p>
<p>如果你使用了其他MySQL客户端程序连接MySQL数据库服务器来创建临时表，那么只有在关闭客户端程序时才会销毁临时表，当然你也可以手动销毁。</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>以下展示了使用MySQL 临时表的简单实例，以下的SQL代码可以适用于PHP脚本的mysql_query()函数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE TEMPORARY TABLE SalesSummary (</span><br><span class="line">    -&gt; product_name VARCHAR(50) NOT NULL</span><br><span class="line">    -&gt; , total_sales DECIMAL(12,2) NOT NULL DEFAULT 0.00</span><br><span class="line">    -&gt; , avg_unit_price DECIMAL(7,2) NOT NULL DEFAULT 0.00</span><br><span class="line">    -&gt; , total_units_sold INT UNSIGNED NOT NULL DEFAULT 0</span><br><span class="line">);</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT INTO SalesSummary</span><br><span class="line">    -&gt; (product_name, total_sales, avg_unit_price, total_units_sold)</span><br><span class="line">    -&gt; VALUES</span><br><span class="line">    -&gt; (&#x27;cucumber&#x27;, 100.25, 90, 2);</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM SalesSummary;</span><br><span class="line">+--------------+-------------+----------------+------------------+</span><br><span class="line">| product_name | total_sales | avg_unit_price | total_units_sold |</span><br><span class="line">+--------------+-------------+----------------+------------------+</span><br><span class="line">| cucumber     |      100.25 |          90.00 |                2 |</span><br><span class="line">+--------------+-------------+----------------+------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>当你使用 <strong>SHOW TABLES</strong>命令显示数据表列表时，你将无法看到 SalesSummary表。</p>
<p>如果你退出当前MySQL会话，再使用 <strong>SELECT</strong>命令来读取原先创建的临时表数据，那你会发现数据库中没有该表的存在，因为在你退出时该临时表已经被销毁了。</p>
<hr>
<h3 id="删除MySQL-临时表"><a href="#删除MySQL-临时表" class="headerlink" title="删除MySQL 临时表"></a>删除MySQL 临时表</h3><p>默认情况下，当你断开与数据库的连接后，临时表就会自动被销毁。当然你也可以在当前MySQL会话使用 <strong>DROP TABLE</strong>  命令来手动删除临时表。</p>
<p>以下是手动删除临时表的实例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE TEMPORARY TABLE SalesSummary (</span><br><span class="line">    -&gt; product_name VARCHAR(50) NOT NULL</span><br><span class="line">    -&gt; , total_sales DECIMAL(12,2) NOT NULL DEFAULT 0.00</span><br><span class="line">    -&gt; , avg_unit_price DECIMAL(7,2) NOT NULL DEFAULT 0.00</span><br><span class="line">    -&gt; , total_units_sold INT UNSIGNED NOT NULL DEFAULT 0</span><br><span class="line">);</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT INTO SalesSummary</span><br><span class="line">    -&gt; (product_name, total_sales, avg_unit_price, total_units_sold)</span><br><span class="line">    -&gt; VALUES</span><br><span class="line">    -&gt; (&#x27;cucumber&#x27;, 100.25, 90, 2);</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM SalesSummary;</span><br><span class="line">+--------------+-------------+----------------+------------------+</span><br><span class="line">| product_name | total_sales | avg_unit_price | total_units_sold |</span><br><span class="line">+--------------+-------------+----------------+------------------+</span><br><span class="line">| cucumber     |      100.25 |          90.00 |                2 |</span><br><span class="line">+--------------+-------------+----------------+------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">mysql&gt; DROP TABLE SalesSummary;</span><br><span class="line">mysql&gt;  SELECT * FROM SalesSummary;</span><br><span class="line">ERROR 1146: Table &#x27;RUNOOB.SalesSummary&#x27; doesn&#x27;t exist</span><br></pre></td></tr></table></figure>



<h2 id="二十三、复制表"><a href="#二十三、复制表" class="headerlink" title="二十三、复制表"></a>二十三、复制表</h2><p><strong>第一、只复制表结构到新表</strong></p>
<p>create table 新表 select * from 旧表 where 1&#x3D;2</p>
<p>或者</p>
<p>create table 新表 like 旧表 </p>
<p><strong>第二、复制表结构及数据到新表</strong></p>
<p>create table新表 select * from 旧表 </p>
<h2 id="二十四、元数据"><a href="#二十四、元数据" class="headerlink" title="二十四、元数据"></a>二十四、元数据</h2><p>在命令行模式中，可以很容易地获取以下的服务器信息：</p>
<ul>
<li><strong>查询结果信息：</strong> SELECT, UPDATE 或 DELETE语句影响的记录数。</li>
<li><strong>数据库和数据表的信息：</strong> 包含了数据库及数据表的结构信息。</li>
<li><strong>MySQL服务器信息：</strong> 包含了数据库服务器的当前状态，版本号等。</li>
</ul>
<h4 id="数据库和数据表列表"><a href="#数据库和数据表列表" class="headerlink" title="数据库和数据表列表"></a>数据库和数据表列表</h4><p>可以使用SHOW TABLES或SHOW DATABASES语句来获取数据库和数据表列表。</p>
<h4 id="获取服务器元数据"><a href="#获取服务器元数据" class="headerlink" title="获取服务器元数据"></a>获取服务器元数据</h4><p>命令如下表：</p>
<p><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/Users\59737\AppData\Roaming\Typora\typora-user-images\image-20220111144610993.png" alt="image-20220111144610993"></p>
<h2 id="二十五、序列"><a href="#二十五、序列" class="headerlink" title="二十五、序列"></a>二十五、序列</h2><p>MySQL 序列是一组整数：1, 2, 3, …，由于一张数据表只能有一个字段自增主键， 如果你想实现其他字段也实现自动增加，就可以使用MySQL序列来实现</p>
<h3 id="使用-AUTO-INCREMENT"><a href="#使用-AUTO-INCREMENT" class="headerlink" title="使用 AUTO_INCREMENT"></a>使用 AUTO_INCREMENT</h3><p>MySQL 中最简单使用序列的方法就是使用 MySQL AUTO_INCREMENT 来定义序列。</p>
<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><p>以下实例中创建了数据表 insect， insect 表中 id 无需指定值可实现自动增长。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE insect</span><br><span class="line">    -&gt; (</span><br><span class="line">    -&gt; id INT UNSIGNED NOT NULL AUTO_INCREMENT,</span><br><span class="line">    -&gt; PRIMARY KEY (id),</span><br><span class="line">    -&gt; name VARCHAR(30) NOT NULL, # type of insect</span><br><span class="line">    -&gt; date DATE NOT NULL, # date collected</span><br><span class="line">    -&gt; origin VARCHAR(30) NOT NULL # where collected</span><br><span class="line">);</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line">mysql&gt; INSERT INTO insect (id,name,date,origin) VALUES</span><br><span class="line">    -&gt; (NULL,&#x27;housefly&#x27;,&#x27;2001-09-10&#x27;,&#x27;kitchen&#x27;),</span><br><span class="line">    -&gt; (NULL,&#x27;millipede&#x27;,&#x27;2001-09-10&#x27;,&#x27;driveway&#x27;),</span><br><span class="line">    -&gt; (NULL,&#x27;grasshopper&#x27;,&#x27;2001-09-10&#x27;,&#x27;front yard&#x27;);</span><br><span class="line">Query OK, 3 rows affected (0.02 sec)</span><br><span class="line">Records: 3  Duplicates: 0  Warnings: 0</span><br><span class="line">mysql&gt; SELECT * FROM insect ORDER BY id;</span><br><span class="line">+----+-------------+------------+------------+</span><br><span class="line">| id | name        | date       | origin     |</span><br><span class="line">+----+-------------+------------+------------+</span><br><span class="line">|  1 | housefly    | 2001-09-10 | kitchen    |</span><br><span class="line">|  2 | millipede   | 2001-09-10 | driveway   |</span><br><span class="line">|  3 | grasshopper | 2001-09-10 | front yard |</span><br><span class="line">+----+-------------+------------+------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h3 id="获取AUTO-INCREMENT值"><a href="#获取AUTO-INCREMENT值" class="headerlink" title="获取AUTO_INCREMENT值"></a>获取AUTO_INCREMENT值</h3><p>在MySQL的客户端中你可以使用 SQL中的LAST_INSERT_ID( ) 函数来获取最后的插入表中的自增列的值。</p>
<h3 id="重置序列"><a href="#重置序列" class="headerlink" title="重置序列"></a>重置序列</h3><p>如果你删除了数据表中的多条记录，并希望对剩下数据的AUTO_INCREMENT列进行重新排列，那么你可以通过删除自增的列，然后重新添加来实现。 不过该操作要非常小心，如果在删除的同时又有新记录添加，有可能会出现数据混乱。操作如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE insect DROP id;</span><br><span class="line">mysql&gt; ALTER TABLE insect</span><br><span class="line">    -&gt; ADD id INT UNSIGNED NOT NULL AUTO_INCREMENT FIRST,</span><br><span class="line">    -&gt; ADD PRIMARY KEY (id);</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="设置序列的开始值"><a href="#设置序列的开始值" class="headerlink" title="设置序列的开始值"></a>设置序列的开始值</h3><p>一般情况下序列的开始值为1，但如果你需要指定一个开始值100，那我们可以通过以下语句来实现：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE insect</span><br><span class="line">    -&gt; (</span><br><span class="line">    -&gt; id INT UNSIGNED NOT NULL AUTO_INCREMENT,</span><br><span class="line">    -&gt; PRIMARY KEY (id),</span><br><span class="line">    -&gt; name VARCHAR(30) NOT NULL, </span><br><span class="line">    -&gt; date DATE NOT NULL,</span><br><span class="line">    -&gt; origin VARCHAR(30) NOT NULL</span><br><span class="line">)engine=innodb auto_increment=100 charset=utf8;</span><br></pre></td></tr></table></figure>

<p>或者你也可以在表创建成功后，通过以下语句来实现：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE t AUTO_INCREMENT = 100;</span><br></pre></td></tr></table></figure>

<p>​			</p>
<h2 id="二十六、处理重复数据"><a href="#二十六、处理重复数据" class="headerlink" title="二十六、处理重复数据"></a>二十六、处理重复数据</h2><h3 id="防止表中出现重复数据"><a href="#防止表中出现重复数据" class="headerlink" title="防止表中出现重复数据"></a>防止表中出现重复数据</h3><p>你可以在 MySQL 数据表中设置指定的字段为 <strong>PRIMARY KEY（主键）</strong>  或者 <strong>UNIQUE（唯一）</strong> 索引来保证数据的唯一性。</p>
<p>如果你想设置表中字段数据不能重复，你可以设置双主键模式来设置数据的唯一性， 如果你设置了双主键，那么那个键的默认值不能为 NULL，可设置为 NOT NULL。</p>
<p>INSERT IGNORE INTO 与 INSERT INTO 的区别就是 INSERT IGNORE INTO  会忽略数据库中已经存在的数据，如果数据库没有数据，就插入新的数据，如果有数据的话就跳过这条数据。这样就可以保留数据库中已经存在数据，达到在间隙中插入数据的目的。</p>
<p>另一种设置数据的唯一性方法是添加一个 UNIQUE 索引，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE person_tbl</span><br><span class="line">(</span><br><span class="line">   first_name CHAR(20) NOT NULL,</span><br><span class="line">   last_name CHAR(20) NOT NULL,</span><br><span class="line">   sex CHAR(10),</span><br><span class="line">   UNIQUE (last_name, first_name)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="统计重复数据"><a href="#统计重复数据" class="headerlink" title="统计重复数据"></a>统计重复数据</h3><p>一般情况下，查询重复的值，请执行以下操作：</p>
<ul>
<li>确定哪一列包含的值可能会重复。</li>
<li>在列选择列表使用COUNT(*)列出的那些列。</li>
<li>在GROUP BY子句中列出的列。</li>
<li>HAVING子句设置重复数大于1。</li>
</ul>
<h3 id="过滤重复数据"><a href="#过滤重复数据" class="headerlink" title="过滤重复数据"></a>过滤重复数据</h3><p>如果你需要读取不重复的数据可以在 SELECT 语句中使用 DISTINCT 关键字来过滤重复数据。</p>
<p>你也可以使用 GROUP BY 来读取数据表中不重复的数据。</p>
<h3 id="删除重复数据"><a href="#删除重复数据" class="headerlink" title="删除重复数据"></a>删除重复数据</h3><p>如果你想删除数据表中的重复数据，你可以使用以下的SQL语句：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE tmp SELECT last_name, first_name, sex FROM person_tbl  GROUP BY (last_name, first_name, sex);</span><br><span class="line">mysql&gt; DROP TABLE person_tbl;</span><br><span class="line">mysql&gt; ALTER TABLE tmp RENAME TO person_tbl;</span><br></pre></td></tr></table></figure>

<p>当然你也可以在数据表中添加 INDEX（索引） 和 PRIMAY KEY（主键）这种简单的方法来删除表中的重复记录。方法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER IGNORE TABLE person_tbl</span><br><span class="line">    -&gt; ADD PRIMARY KEY (last_name, first_name);</span><br></pre></td></tr></table></figure>



<h2 id="二十七、导出数据"><a href="#二十七、导出数据" class="headerlink" title="二十七、导出数据"></a>二十七、导出数据</h2><ul>
<li>使用 <strong>SELECT … INTO OUTFILE</strong> 语句导出数据</li>
</ul>
<p>以下实例中我们将数据表 runoob_tbl 数据导出到 &#x2F;tmp&#x2F;runoob.txt 文件中: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM runoob_tbl </span><br><span class="line">    -&gt; INTO OUTFILE &#x27;/tmp/runoob.txt&#x27;;</span><br></pre></td></tr></table></figure>

<p>你可以通过命令选项来设置数据输出的指定格式，以下实例为导出 CSV 格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM passwd INTO OUTFILE &#x27;/tmp/runoob.txt&#x27;</span><br><span class="line">    -&gt; FIELDS TERMINATED BY &#x27;,&#x27; ENCLOSED BY &#x27;&quot;&#x27;</span><br><span class="line">    -&gt; LINES TERMINATED BY &#x27;\r\n&#x27;;</span><br></pre></td></tr></table></figure>

<p>在下面的例子中，生成一个文件，各值用逗号隔开。这种格式可以被许多程序使用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT a,b,a+b INTO OUTFILE &#x27;/tmp/result.text&#x27;</span><br><span class="line">FIELDS TERMINATED BY &#x27;,&#x27; OPTIONALLY ENCLOSED BY &#x27;&quot;&#x27;</span><br><span class="line">LINES TERMINATED BY &#x27;\n&#x27;</span><br><span class="line">FROM test_table;</span><br></pre></td></tr></table></figure>

<h3 id="SELECT-…-INTO-OUTFILE-语句的属性"><a href="#SELECT-…-INTO-OUTFILE-语句的属性" class="headerlink" title="SELECT … INTO OUTFILE 语句的属性:"></a>SELECT … INTO OUTFILE 语句的属性:</h3><ul>
<li>LOAD DATA INFILE是SELECT … INTO OUTFILE的逆操作，SELECT句法。为了将一个数据库的数据写入一个文件，使用SELECT … INTO OUTFILE，为了将文件读回数据库，使用LOAD DATA INFILE。</li>
<li>SELECT…INTO OUTFILE ‘file_name’形式的SELECT可以把被选择的行写入一个文件中。该文件被创建到服务器主机上，因此您必须拥有FILE权限，才能使用此语法。  </li>
<li>输出不能是一个已存在的文件。防止文件数据被篡改。</li>
<li>你需要有一个登陆服务器的账号来检索文件。否则 SELECT … INTO OUTFILE 不会起任何作用。</li>
<li>在UNIX中，该文件被创建后是可读的，权限由MySQL服务器所拥有。这意味着，虽然你就可以读取该文件，但可能无法将其删除。</li>
</ul>
<h3 id="导出表作为原始数据"><a href="#导出表作为原始数据" class="headerlink" title="导出表作为原始数据"></a>导出表作为原始数据</h3><p>mysqldump 是 mysql 用于转存储数据库的实用程序。它主要产生一个 SQL 脚本，其中包含从头重新创建数据库所必需的命令 CREATE TABLE INSERT 等。</p>
<p>使用 mysqldump 导出数据需要使用  –tab 选项来指定导出文件指定的目录，该目标必须是可写的。</p>
<p>以下实例将数据表 runoob_tbl 导出到 &#x2F;tmp 目录中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mysqldump -u root -p --no-create-info \</span><br><span class="line">            --tab=/tmp RUNOOB runoob_tbl</span><br><span class="line">password ******</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="导出-SQL-格式的数据"><a href="#导出-SQL-格式的数据" class="headerlink" title="导出 SQL 格式的数据"></a>导出 SQL 格式的数据</h3><p>导出 SQL 格式的数据到指定文件，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mysqldump -u root -p RUNOOB runoob_tbl &gt; dump.txt</span><br><span class="line">password ******</span><br></pre></td></tr></table></figure>

<p>如果你需要导出整个数据库的数据，可以使用以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mysqldump -u root -p RUNOOB &gt; database_dump.txt</span><br><span class="line">password ******</span><br></pre></td></tr></table></figure>

<p>如果需要备份所有数据库，可以使用以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mysqldump -u root -p --all-databases &gt; database_dump.txt</span><br><span class="line">password ******</span><br></pre></td></tr></table></figure>

<h3 id="将数据表及数据库拷贝至其他主机"><a href="#将数据表及数据库拷贝至其他主机" class="headerlink" title="将数据表及数据库拷贝至其他主机"></a>将数据表及数据库拷贝至其他主机</h3><p>如果你需要将数据拷贝至其他的 MySQL 服务器上, 你可以在 mysqldump 命令中指定数据库名及数据表。</p>
<p>在源主机上执行以下命令，将数据备份至 dump.txt 文件中:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mysqldump -u root -p database_name table_name &gt; dump.txt</span><br><span class="line">password *****</span><br></pre></td></tr></table></figure>

<p>如果完整备份数据库，则无需使用特定的表名称。</p>
<p>如果你需要将备份的数据库导入到MySQL服务器中，可以使用以下命令，使用以下命令你需要确认数据库已经创建：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mysql -u root -p database_name &lt; dump.txt</span><br><span class="line">password *****</span><br></pre></td></tr></table></figure>

<p>你也可以使用以下命令将导出的数据直接导入到远程的服务器上，但请确保两台服务器是相通的，是可以相互访问的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mysqldump -u root -p database_name \</span><br><span class="line">       | mysql -h other-host.com database_name</span><br></pre></td></tr></table></figure>

<p>以上命令中使用了管道来将导出的数据导入到指定的远程主机上。</p>
<h2 id="二十八、导入数据"><a href="#二十八、导入数据" class="headerlink" title="二十八、导入数据"></a>二十八、导入数据</h2><h2 id="1、mysql-命令导入"><a href="#1、mysql-命令导入" class="headerlink" title="1、mysql  命令导入"></a>1、mysql  命令导入</h2><p>使用 mysql 命令导入语法格式为： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u用户名    -p密码    &lt;  要导入的数据库数据(runoob.sql)</span><br></pre></td></tr></table></figure>

<p><strong>实例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># mysql -uroot -p123456 &lt; runoob.sql</span><br></pre></td></tr></table></figure>

<p>以上命令将将备份的整个数据库  runoob.sql 导入。</p>
<hr>
<h2 id="2、source-命令导入"><a href="#2、source-命令导入" class="headerlink" title="2、source  命令导入"></a>2、source  命令导入</h2><p>source 命令导入数据库需要先登录到数库终端：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; create database abc;      # 创建数据库</span><br><span class="line">mysql&gt; use abc;                  # 使用已创建的数据库 </span><br><span class="line">mysql&gt; set names utf8;           # 设置编码</span><br><span class="line">mysql&gt; source /home/abc/abc.sql  # 导入备份数据库</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="3、使用-LOAD-DATA-导入数据"><a href="#3、使用-LOAD-DATA-导入数据" class="headerlink" title="3、使用  LOAD DATA 导入数据"></a>3、使用  LOAD DATA 导入数据</h2><p>MySQL 中提供了LOAD DATA INFILE语句来插入数据。 以下实例中将从当前目录中读取文件 dump.txt ，将该文件中的数据插入到当前数据库的 mytbl 表中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; LOAD DATA LOCAL INFILE &#x27;dump.txt&#x27; INTO TABLE mytbl;</span><br></pre></td></tr></table></figure>

<p>　如果指定LOCAL关键词，则表明从客户主机上按路径读取文件。如果没有指定，则文件在服务器上按路径读取文件。</p>
<p>你能明确地在LOAD DATA语句中指出列值的分隔符和行尾标记，但是默认标记是定位符和换行符。</p>
<p>两个命令的 FIELDS 和 LINES 子句的语法是一样的。两个子句都是可选的，但是如果两个同时被指定，FIELDS 子句必须出现在 LINES 子句之前。</p>
<p>如果用户指定一个 FIELDS 子句，它的子句 （TERMINATED BY、[OPTIONALLY] ENCLOSED BY 和 ESCAPED BY) 也是可选的，不过，用户必须至少指定它们中的一个。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; LOAD DATA LOCAL INFILE &#x27;dump.txt&#x27; INTO TABLE mytbl</span><br><span class="line">  -&gt; FIELDS TERMINATED BY &#x27;:&#x27;</span><br><span class="line">  -&gt; LINES TERMINATED BY &#x27;\r\n&#x27;;</span><br></pre></td></tr></table></figure>

<p>LOAD DATA 默认情况下是按照数据文件中列的顺序插入数据的，如果数据文件中的列与插入表中的列不一致，则需要指定列的顺序。</p>
<p>如，在数据文件中的列顺序是 a,b,c，但在插入表的列顺序为b,c,a，则数据导入语法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; LOAD DATA LOCAL INFILE &#x27;dump.txt&#x27; </span><br><span class="line">    -&gt; INTO TABLE mytbl (b, c, a);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="4、使用-mysqlimport-导入数据"><a href="#4、使用-mysqlimport-导入数据" class="headerlink" title="4、使用 mysqlimport 导入数据"></a>4、使用 mysqlimport 导入数据</h2><p>mysqlimport 客户端提供了 LOAD DATA INFILEQL 语句的一个命令行接口。mysqlimport 的大多数选项直接对应 LOAD DATA INFILE 子句。</p>
<p>从文件 dump.txt 中将数据导入到 mytbl 数据表中, 可以使用以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mysqlimport -u root -p --local mytbl dump.txt</span><br><span class="line">password *****</span><br></pre></td></tr></table></figure>

<p> mysqlimport 命令可以指定选项来设置指定格式,命令语句格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mysqlimport -u root -p --local --fields-terminated-by=&quot;:&quot; \</span><br><span class="line">   --lines-terminated-by=&quot;\r\n&quot;  mytbl dump.txt</span><br><span class="line">password *****</span><br></pre></td></tr></table></figure>

<p> mysqlimport 语句中使用 –columns 选项来设置列的顺序：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mysqlimport -u root -p --local --columns=b,c,a \</span><br><span class="line">    mytbl dump.txt</span><br><span class="line">password *****</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="mysqlimport的常用选项介绍"><a href="#mysqlimport的常用选项介绍" class="headerlink" title="mysqlimport的常用选项介绍"></a>mysqlimport的常用选项介绍</h2><p><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/Users\59737\AppData\Roaming\Typora\typora-user-images\image-20220111151649888.png" alt="image-20220111151649888"></p>
<p>mysqlimport 命令常用的选项还有 -v 显示版本（version）， -p 提示输入密码（password）等。</p>
<h2 id="二十九、函数"><a href="#二十九、函数" class="headerlink" title="二十九、函数"></a>二十九、函数</h2><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><p><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/Users\59737\AppData\Roaming\Typora\typora-user-images\image-20220111151839188.png" alt="image-20220111151839188"><br><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/Users\59737\AppData\Roaming\Typora\typora-user-images\image-20220111151943783.png" alt="image-20220111151943783"><br><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/Users\59737\AppData\Roaming\Typora\typora-user-images\image-20220111152039568.png" alt="image-20220111152039568"></p>
<p><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/Users\59737\AppData\Roaming\Typora\typora-user-images\image-20220111152116038.png" alt="image-20220111152116038"></p>
<p><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/Users\59737\AppData\Roaming\Typora\typora-user-images\image-20220111152158149.png" alt="image-20220111152158149"></p>
<p><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/Users\59737\AppData\Roaming\Typora\typora-user-images\image-20220111152405200.png" alt="image-20220111152405200"></p>
<p><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/Users\59737\AppData\Roaming\Typora\typora-user-images\image-20220111152515546.png" alt="image-20220111152515546"></p>
<h3 id="数字函数"><a href="#数字函数" class="headerlink" title="数字函数"></a>数字函数</h3><p><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/Users\59737\AppData\Roaming\Typora\typora-user-images\image-20220111152652291.png" alt="image-20220111152652291"></p>
<p><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/Users\59737\AppData\Roaming\Typora\typora-user-images\image-20220111152719340.png" alt="image-20220111152719340"></p>
<p><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/Users\59737\AppData\Roaming\Typora\typora-user-images\image-20220111152805594.png" alt="image-20220111152805594"></p>
<p><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/Users\59737\AppData\Roaming\Typora\typora-user-images\image-20220111152848876.png" alt="image-20220111152848876"></p>
<p><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/Users\59737\AppData\Roaming\Typora\typora-user-images\image-20220111152911882.png" alt="image-20220111152911882"></p>
<p><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/Users\59737\AppData\Roaming\Typora\typora-user-images\image-20220111152951861.png" alt="image-20220111152951861"></p>
<h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><p><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/Users\59737\AppData\Roaming\Typora\typora-user-images\image-20220111153103656.png" alt="image-20220111153103656"></p>
<p><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/Users\59737\AppData\Roaming\Typora\typora-user-images\image-20220111153132694.png" alt="image-20220111153132694"></p>
<p><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/Users\59737\AppData\Roaming\Typora\typora-user-images\image-20220111153213321.png" alt="image-20220111153213321"></p>
<p><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/Users\59737\AppData\Roaming\Typora\typora-user-images\image-20220111153243604.png" alt="image-20220111153243604"></p>
<p><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/Users\59737\AppData\Roaming\Typora\typora-user-images\image-20220111153314853.png" alt="image-20220111153314853"></p>
<p><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/Users\59737\AppData\Roaming\Typora\typora-user-images\image-20220111153418806.png" alt="image-20220111153418806"></p>
<p><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/Users\59737\AppData\Roaming\Typora\typora-user-images\image-20220111153453973.png" alt="image-20220111153453973"></p>
<p><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/Users\59737\AppData\Roaming\Typora\typora-user-images\image-20220111153538504.png" alt="image-20220111153538504"></p>
<p><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/Users\59737\AppData\Roaming\Typora\typora-user-images\image-20220111153612980.png" alt="image-20220111153612980"></p>
<p><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/Users\59737\AppData\Roaming\Typora\typora-user-images\image-20220111153652982.png" alt="image-20220111153652982"></p>
<p><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/Users\59737\AppData\Roaming\Typora\typora-user-images\image-20220111153735999.png" alt="image-20220111153735999"></p>
<p><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/Users\59737\AppData\Roaming\Typora\typora-user-images\image-20220111153808883.png" alt="image-20220111153808883"></p>
<p><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/Users\59737\AppData\Roaming\Typora\typora-user-images\image-20220111153830820.png" alt="image-20220111153830820"></p>
<h3 id="高级函数"><a href="#高级函数" class="headerlink" title="高级函数"></a>高级函数</h3><p><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/Users\59737\AppData\Roaming\Typora\typora-user-images\image-20220111153906531.png" alt="image-20220111153906531"></p>
<p><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/Users\59737\AppData\Roaming\Typora\typora-user-images\image-20220111153943903.png" alt="image-20220111153943903"></p>
<p><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/Users\59737\AppData\Roaming\Typora\typora-user-images\image-20220111154017960.png" alt="image-20220111154017960"></p>
<p><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/Users\59737\AppData\Roaming\Typora\typora-user-images\image-20220111154053153.png" alt="image-20220111154053153"></p>
<p><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/Users\59737\AppData\Roaming\Typora\typora-user-images\image-20220111154115363.png" alt="image-20220111154115363"></p>
<h2 id="三十、运算符"><a href="#三十、运算符" class="headerlink" title="三十、运算符"></a>三十、运算符</h2><p>MySQL有以下几种运算符：</p>
<ul>
<li>算术运算符</li>
<li>比较运算符</li>
<li>逻辑运算符</li>
<li>位运算符</li>
</ul>
<h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><p><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/Users\59737\AppData\Roaming\Typora\typora-user-images\image-20220111154256455.png" alt="image-20220111154256455"></p>
<p>在除法运算和模运算中，如果除数为0，将是非法除数，返回结果为NULL。</p>
<h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>SELECT 语句中的条件语句经常要使用比较运算符。通过这些比较运算符，可以判断表中的哪些记录是符合条件的。比较结果为真，则返回 1，为假则返回 0，比较结果不确定则返回 NULL。</p>
<p><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/Users\59737\AppData\Roaming\Typora\typora-user-images\image-20220111154411540.png" alt="image-20220111154411540"></p>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>逻辑运算符用来判断表达式的真假。如果表达式是真，结果返回 1。如果表达式是假，结果返回 0。</p>
<p><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/Users\59737\AppData\Roaming\Typora\typora-user-images\image-20220111154456858.png" alt="image-20220111154456858"></p>
<h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p>位运算符是在二进制数上进行计算的运算符。位运算会先将操作数变成二进制数，进行位运算。然后再将计算结果从二进制数变回十进制数。</p>
<p><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/Users\59737\AppData\Roaming\Typora\typora-user-images\image-20220111154530641.png" alt="image-20220111154530641"></p>
<h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><p>最低优先级为： :&#x3D;。</p>
<p><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E8%AF%AD%E6%B3%95/Users\59737\AppData\Roaming\Typora\typora-user-images\image-20220111154619306.png" alt="image-20220111154619306"></p>
<p>最高优先级为： !、BINARY、 COLLATE。</p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis使用</title>
    <url>/Java/Java%E4%B8%AD%E9%97%B4%E4%BB%B6/MyBatis/Mybatis%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="MyBatis使用"><a href="#MyBatis使用" class="headerlink" title="MyBatis使用"></a>MyBatis使用</h1><h2 id="1、依赖文件配置"><a href="#1、依赖文件配置" class="headerlink" title="1、依赖文件配置"></a>1、依赖文件配置</h2><p>使用maven或者jar包都可，配置mybatis包以及mysql依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2、配置文件编写"><a href="#2、配置文件编写" class="headerlink" title="2、配置文件编写"></a>2、配置文件编写</h2><p>命名为mybatis-config.xml，放置在resources目录下，配置文件内容如下(可以在mybatis官方文档上找到)：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-------文件头-------&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-------配置内容----------&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-------环境名可以自拟-----&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!------driver一般为：com.mysql.jdbc.Driver-----&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">          <span class="comment">&lt;!----url是链接数据库时的url，默认为jdbc:mysql://localhost:3306/数据表名称?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF-8--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--username即用户名----&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-----password密码------&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!------mappers用于在映射文件编写之后----&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/example/BlogMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3、编写数据库表对应的实体类"><a href="#3、编写数据库表对应的实体类" class="headerlink" title="3、编写数据库表对应的实体类"></a>3、编写数据库表对应的实体类</h2><p>表中字段对应着实体类的私有属性，实体类中还要包含无参构造器和有参构造器，以及属性的set、get方法，最后要重写toString方法方便打印实体类。示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//私有属性对应数据库字段</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;<span class="comment">//无参构造</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, Integer age, String id)</span> &#123;<span class="comment">//有参构造</span></span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;<span class="comment">// get、set系列方法</span></span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    								<span class="comment">//重写toString方法 </span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, id=&#x27;&quot;</span> + id + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4、创建数据库接口，包含增删改查等"><a href="#4、创建数据库接口，包含增删改查等" class="headerlink" title="4、创建数据库接口，包含增删改查等"></a>4、创建数据库接口，包含增删改查等</h2><p>示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zky.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zky.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询用户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">queryUserById</span><span class="params">(String id)</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有用户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">queryUserAll</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增用户信息</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新用户信息</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">(User user)</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除用户信息</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">(String id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="5、编写映射文件，对应于接口文件"><a href="#5、编写映射文件，对应于接口文件" class="headerlink" title="5、编写映射文件，对应于接口文件"></a>5、编写映射文件，对应于接口文件</h2><p>示例如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mapper:根标签，namespace：命名空间，随便写，一般保证命名空间唯一 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;UserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- statement，内容：sql语句。id：唯一标识，随便写，在同一个命名空间下保持唯一</span></span><br><span class="line"><span class="comment">       resultType：sql语句查询结果集的封装类型,tb_user即为数据库中的表</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;select id=&quot;queryUserById&quot; resultType=&quot;com.zpc.mybatis.pojo.User&quot;&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--select * from tb_user where id = #&#123;id&#125;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;/select&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--使用别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.zpc.mybatis.pojo.User&quot;</span>&gt;</span></span><br><span class="line">      select</span><br><span class="line">       tuser.id as id,</span><br><span class="line">       tuser.user_name as userName,</span><br><span class="line">       tuser.password as password,</span><br><span class="line">       tuser.name as name,</span><br><span class="line">       tuser.age as age,</span><br><span class="line">       tuser.birthday as birthday,</span><br><span class="line">       tuser.sex as sex,</span><br><span class="line">       tuser.created as created,</span><br><span class="line">       tuser.updated as updated</span><br><span class="line">       from</span><br><span class="line">       tb_user tuser</span><br><span class="line">       where tuser.id = #&#123;id&#125;;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUserAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.zpc.mybatis.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from tb_user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--插入数据--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.zpc.mybatis.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        INSERT INTO tb_user (</span><br><span class="line">        user_name,</span><br><span class="line">        password,</span><br><span class="line">        name,</span><br><span class="line">        age,</span><br><span class="line">        sex,</span><br><span class="line">        birthday,</span><br><span class="line">        created,</span><br><span class="line">        updated</span><br><span class="line">        )</span><br><span class="line">        VALUES</span><br><span class="line">        (</span><br><span class="line">        #&#123;userName&#125;,</span><br><span class="line">        #&#123;password&#125;,</span><br><span class="line">        #&#123;name&#125;,</span><br><span class="line">        #&#123;age&#125;,</span><br><span class="line">        #&#123;sex&#125;,</span><br><span class="line">        #&#123;birthday&#125;,</span><br><span class="line">        now(),</span><br><span class="line">        now()</span><br><span class="line">        );</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.zpc.mybatis.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        UPDATE tb_user</span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;set&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userName!=null&quot;</span>&gt;</span>user_name = #&#123;userName&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;password!=null&quot;</span>&gt;</span>password = #&#123;password&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name!=null&quot;</span>&gt;</span>name = #&#123;name&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age!=null&quot;</span>&gt;</span>age = #&#123;age&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex!=null&quot;</span>&gt;</span>sex = #&#123;sex&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;birthday!=null&quot;</span>&gt;</span>birthday = #&#123;birthday&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            updated = now(),</span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">        WHERE</span><br><span class="line">        (id = #&#123;id&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span>&gt;</span></span><br><span class="line">        delete from tb_user where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后在mybatis-config.xml配置文件中添加配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mapper文件的全路径-----&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/zky/mapper/UserDao.xml&quot;</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/UserDaoMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="6、编写测试用例"><a href="#6、编写测试用例" class="headerlink" title="6、编写测试用例"></a>6、编写测试用例</h2><h3 id="6-1、构建sqlSessionFactory"><a href="#6-1、构建sqlSessionFactory" class="headerlink" title="6.1、构建sqlSessionFactory"></a>6.1、构建sqlSessionFactory</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指定全局配置文件</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="comment">// 读取配置文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="comment">// 构建sqlSessionFactory</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br></pre></td></tr></table></figure>

<h3 id="6-2、-打开sqlSession会话，并执行增删改查等操作"><a href="#6-2、-打开sqlSession会话，并执行增删改查等操作" class="headerlink" title="6.2、 打开sqlSession会话，并执行增删改查等操作"></a>6.2、 打开sqlSession会话，并执行增删改查等操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取sqlSession</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="comment">// 操作CRUD，第一个参数：指定statement，规则：命名空间+“.”+statementId</span></span><br><span class="line">        <span class="comment">// 第二个参数：指定传入sql的参数：这里是用户id</span></span><br><span class="line">        <span class="comment">//插入表数据</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;xiaoming&quot;</span>, <span class="number">12</span>, <span class="string">&quot;00000001&quot;</span>);</span><br><span class="line">        userDao.insertUser(user5);</span><br><span class="line"><span class="comment">//按照id删除表数据</span></span><br><span class="line">        userDao.deleteUser(<span class="string">&quot;00000001&quot;</span>);</span><br><span class="line"><span class="comment">//按照id查询数据</span></span><br><span class="line">        System.out.println(userDao.queryUserById(<span class="string">&quot;00000001&quot;</span>));</span><br><span class="line"><span class="comment">//修改表数据</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;xiaoming&quot;</span>,<span class="number">12</span>,<span class="string">&quot;00000001&quot;</span>);</span><br><span class="line">        userDao.updateUser(user1);</span><br><span class="line"><span class="comment">//查询表中所有数据</span></span><br><span class="line">        <span class="keyword">for</span>(User user: userDao.queryUserAll())&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.commit();  <span class="comment">//注意涉及到对表的改动时（更改、删除、插入),必须执行commit操作</span></span><br><span class="line">        sqlSession.close();</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
        <category>Java中间件</category>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java中间件</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>maven安装</title>
    <url>/Java/Java%E4%B8%AD%E9%97%B4%E4%BB%B6/Maven/maven%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="maven安装"><a href="#maven安装" class="headerlink" title="maven安装"></a>maven安装</h1><ul>
<li>官网下载maven压缩包，link下的zip包</li>
<li>解压安装包到特定目录</li>
<li>添加系统环境变量，命名为MAVEN_HOME,路径为解压后的文件夹目录</li>
<li>在Path中添加路径，MAVEN_HOME下的bin目录，即：</li>
</ul>
<blockquote>
<p>%MAVEN_HOME%\bin</p>
</blockquote>
<h1 id="maven配置"><a href="#maven配置" class="headerlink" title="maven配置"></a>maven配置</h1><ul>
<li><h3 id="settings-xml的配置"><a href="#settings-xml的配置" class="headerlink" title="settings.xml的配置"></a>settings.xml的配置</h3></li>
</ul>
<p>maven常常因为源仓库在国外而导致maven包下载慢或者无法下载的问题，解决方案之一是将maven配置文件中的仓库源换成阿里云仓库。该配置文件在%MAVEN_HOME%\conf\settings.xml，换源时可将配置文件中的<mirrors></mirrors>标签及标签中的所有内容注释掉，然后添加以下内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>即可完成换源。</p>
<p>同时，maven的本地仓库位置也可以在配置文件中进行指定，添加以下路径配置即可：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>本地仓库路径<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
        <category>Java中间件</category>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis</title>
    <url>/Java/Java%E4%B8%AD%E9%97%B4%E4%BB%B6/MyBatis/Mybatis/</url>
    <content><![CDATA[<h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。</p>
<p>MyBatis免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p>
<h2 id="2-获取方式"><a href="#2-获取方式" class="headerlink" title="2.获取方式"></a>2.获取方式</h2><ul>
<li><p>Github</p>
<p><a href="https://github.com/mybatis/bmybatis3/releases">https://github.com/mybatis/bmybatis3/releases</a></p>
</li>
<li><p>中文文档</p>
</li>
</ul>
<p>​		<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p>
<ul>
<li><p>maven</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-持久化"><a href="#3-持久化" class="headerlink" title="3. 持久化"></a>3. 持久化</h2><p>数据持久化：</p>
<ul>
<li><p>持久化就是将程序的数据在持久状态和瞬时状态转化的过程</p>
</li>
<li><p>内存是断电即失的；</p>
</li>
<li><p>数据库、io文件支持持久化</p>
</li>
</ul>
<h3 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h3><p>保留某些重要的数据</p>
<h3 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h3><p>完成持久化工作的代码块</p>
<h1 id="4-环境搭建"><a href="#4-环境搭建" class="headerlink" title="4. 环境搭建"></a>4. 环境搭建</h1>]]></content>
      <categories>
        <category>Java</category>
        <category>Java中间件</category>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java中间件</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis注解</title>
    <url>/Java/Java%E4%B8%AD%E9%97%B4%E4%BB%B6/MyBatis/MyBatis%20@Param%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<h1 id="MyBatis-注解"><a href="#MyBatis-注解" class="headerlink" title="MyBatis 注解"></a>MyBatis 注解</h1><h2 id="Param注解"><a href="#Param注解" class="headerlink" title="@Param注解"></a>@Param注解</h2><h3 id="一、有多个基本类型参数"><a href="#一、有多个基本类型参数" class="headerlink" title="一、有多个基本类型参数"></a>一、有多个基本类型参数</h3><p>有多个基本类型参数时，需要在每个参数前添加@Param注解。</p>
<h3 id="二、方法参数需要起别名时"><a href="#二、方法参数需要起别名时" class="headerlink" title="二、方法参数需要起别名时"></a>二、方法参数需要起别名时</h3><p>当方法参数需要起别名时，需要在参数前添加@Param注解，注解内说明参数的别名。</p>
<h3 id="三、当XML配置文件中存在-符号时"><a href="#三、当XML配置文件中存在-符号时" class="headerlink" title="三、当XML配置文件中存在$符号时"></a>三、当XML配置文件中存在$符号时</h3><p>虽然在XML使用$符号传参会有SQL注入的风险，但当不得不使用$符号传参时，必须在Mapper层方法的参数前添加@Param注解。</p>
<h3 id="四、在动态SQL中使用了参数作为判断条件"><a href="#四、在动态SQL中使用了参数作为判断条件" class="headerlink" title="四、在动态SQL中使用了参数作为判断条件"></a>四、在动态SQL中使用了参数作为判断条件</h3><p>如果在动态SQL中使用了参数作为判断条件，则在mapper层的该参数前必须使用@Param注解。</p>
<h3 id="五、一般情况下，单个参数不需要加-Param注解"><a href="#五、一般情况下，单个参数不需要加-Param注解" class="headerlink" title="五、一般情况下，单个参数不需要加@Param注解"></a>五、一般情况下，单个参数不需要加@Param注解</h3><p>如果只传入了一个参数，并且该参数没有被特殊使用（如需要起别名、被用作动态SQL的判断条件等），可以不加@Param注解。</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java中间件</category>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java注解</tag>
        <tag>Java中间件</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
</search>
